# üìã IMP-010: Dockerfile Principal - Omni Keywords Finder
# üéØ Objetivo: Containeriza√ß√£o otimizada, segura e perform√°tica
# üìÖ Criado: 2024-12-27
# üîÑ Vers√£o: 2.0

# ========================================
# üèóÔ∏è STAGE 1: BUILD STAGE
# ========================================
FROM python:3.11-slim as builder

# Definir vari√°veis de ambiente para build
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Instalar depend√™ncias do sistema para build
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Criar usu√°rio n√£o-root para seguran√ßa
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Definir diret√≥rio de trabalho
WORKDIR /app

# Copiar arquivos de depend√™ncias
COPY requirements.txt .
COPY requirements-dev.txt .

# Instalar depend√™ncias Python
RUN pip install --user --no-cache-dir -r requirements.txt

# ========================================
# üöÄ STAGE 2: PRODUCTION STAGE
# ========================================
FROM python:3.11-slim as production

# Definir vari√°veis de ambiente para produ√ß√£o
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    ENVIRONMENT=production \
    LOG_LEVEL=info

# Instalar depend√™ncias do sistema para produ√ß√£o
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Criar usu√°rio n√£o-root
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Definir diret√≥rio de trabalho
WORKDIR /app

# Copiar depend√™ncias Python do stage anterior
COPY --from=builder /root/.local /home/appuser/.local

# Copiar c√≥digo da aplica√ß√£o
COPY --chown=appuser:appuser . .

# Criar diret√≥rios necess√°rios
RUN mkdir -p \
    logs \
    infrastructure/ml/models \
    infrastructure/cache/dados \
    infrastructure/backup \
    && chown -R appuser:appuser /app

# Expor porta da aplica√ß√£o
EXPOSE 8000

# Mudar para usu√°rio n√£o-root
USER appuser

# Adicionar diret√≥rio local ao PATH
ENV PATH=/home/appuser/.local/bin:$PATH

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Comando padr√£o
CMD ["uvicorn", "backend.app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]

# ========================================
# üß™ STAGE 3: TESTING STAGE
# ========================================
FROM production as testing

# Definir vari√°veis de ambiente para testes
ENV ENVIRONMENT=testing \
    LOG_LEVEL=debug \
    TEST_MODE=true

# Instalar depend√™ncias de desenvolvimento
RUN pip install --user --no-cache-dir -r requirements-dev.txt

# Comando para testes
CMD ["pytest", "tests/", "--cov=./", "--cov-report=xml", "--cov-report=html"]

# ========================================
# üîß STAGE 4: DEVELOPMENT STAGE
# ========================================
FROM production as development

# Definir vari√°veis de ambiente para desenvolvimento
ENV ENVIRONMENT=development \
    LOG_LEVEL=debug \
    DEBUG=true

# Instalar depend√™ncias de desenvolvimento
RUN pip install --user --no-cache-dir -r requirements-dev.txt

# Comando para desenvolvimento
CMD ["uvicorn", "backend.app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"] 