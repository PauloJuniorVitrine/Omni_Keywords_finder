[pytest]
timeout = 15
asyncio_default_fixture_loop_scope = function

# Configurações de execução
addopts = 
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --color=yes
    --durations=10
    --maxfail=5

# Mutation Testing with mutmut
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Markers for mutation testing
markers =
    mutation: marks tests as mutation tests
    slow: marks tests as slow
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    critical: marks tests as critical
    security: marks tests as security tests
    performance: marks tests as performance tests

# Mutation Testing Configuration
[tool:mutmut]
# Paths to mutate
paths_to_mutate = 
    app/
    backend/
    infrastructure/
    shared/
    domain/

# Paths to exclude from mutation testing
paths_to_exclude = 
    tests/
    migrations/
    static/
    templates/
    docs/
    scripts/
    logs/
    coverage/
    htmlcov/
    instance/
    uploads/
    blogs/
    examples/
    stories/
    ui/
    cypress/
    terraform/
    argocd/
    config/

# Mutation testing configuration
backup = false
dict_synonyms = Struct, NamedStruct
runner = python -m pytest
tests_dir = tests/
pre_mutation = python -m pytest tests/unit/ --tb=short
post_mutation = python -m pytest tests/unit/ --tb=short

# Mutation operators to use
mutation_operators = 
    AOR: Arithmetic Operator Replacement
    AOD: Arithmetic Operator Deletion
    ROR: Relational Operator Replacement
    COR: Conditional Operator Replacement
    COD: Conditional Operator Deletion
    SOR: Shift Operator Replacement
    LOR: Logical Operator Replacement
    LOD: Logical Operator Deletion
    ASR: Assignment Operator Replacement
    UOI: Unary Operator Insertion
    UOD: Unary Operator Deletion

# Mutation testing thresholds
mutation_score_threshold = 85
mutation_kill_threshold = 90

# Mutation testing reporting
html_report_dir = coverage/mutation/
json_report_file = coverage/mutation_results.json
xml_report_file = coverage/mutation_results.xml

# Mutation testing logging
log_file = logs/mutation_testing.log
log_level = INFO

# Mutation testing performance
max_runtime = 300
parallel = true
parallel_workers = 4

# Mutation testing filters
exclude_lines = 
    #pragma: no mutate
    # noqa
    # type: ignore
    # fmt: off
    # fmt: on

# Mutation testing coverage integration
coverage_integration = true
coverage_threshold = 98

# Configuração do pytest para testes do orquestrador
# Tracing ID: PYTEST_CONFIG_001_20241227

# Diretórios de teste
testpaths = tests

# Padrões de arquivos de teste
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Configuração unificada de execução
addopts = 
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --color=yes
    --durations=10
    --maxfail=5
    --cov=infrastructure
    --cov=app
    --cov=domain
    --cov-report=html:coverage/html
    --cov-report=term-missing
    --cov-report=xml:coverage/coverage.xml
    --cov-fail-under=85
    -n auto
    --dist=loadfile
    --max-worker-restart=3
    --worker-restart-retry-count=2
    --html=reports/pytest_report.html
    --self-contained-html
    --junitxml=reports/junit.xml
    --metadata Platform "Omni Keywords Finder"
    --metadata Framework "pytest"
    --metadata Python "3.9+"
    --metadata Parallel "xdist"

# Configuração de workers baseada em CPU
# -n auto: Detecta automaticamente o número de CPUs
# -n 4: Força 4 workers (alternativa)
# -n 0: Desabilita execução paralela

# Configuração de isolamento de recursos
xfail_strict = true
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning

# Configuração de markers
markers =
    unit: Testes unitários
    integration: Testes de integração
    e2e: Testes end-to-end
    load: Testes de carga
    resilience: Testes de resiliência
    slow: Testes lentos
    fast: Testes rápidos
    critical: Testes críticos
    high_risk: Testes de alto risco
    medium_risk: Testes de médio risco
    low_risk: Testes de baixo risco
    production: Testes de produção
    canary: Testes de canário
    shadow: Testes de shadow
    mutation: Testes de mutação
    performance: Testes de performance
    security: Testes de segurança
    real_data: Testes com dados reais
    semantic: Testes de validação semântica
    orchestrator: Testes específicos do orquestrador
    etapas: Testes das etapas do fluxo
    utils: Testes de utilitários

# Configuração de timeout
timeout = 300
timeout_method = thread

# Configuração de cache
cache_dir = .pytest_cache

# Configuração de logs
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Configuração específica para execução paralela
# Evita conflitos entre workers
minversion = 6.0
required_plugins =
    pytest-xdist
    pytest-cov
    pytest-timeout
    pytest-mock
    pytest-asyncio
    pytest-html

# Configuração de ambiente
env =
    TESTING = true
    LOG_LEVEL = DEBUG
    CACHE_ENABLED = false
    MOCK_EXTERNAL_APIS = true
    PYTHONPATH = .
    TEST_ENV = integration
    RISK_SCORE_ENABLED = true
    SEMANTIC_VALIDATION_ENABLED = true
    SHADOW_TESTING_ENABLED = true
    MUTATION_TESTING_ENABLED = true
    PARALLEL_EXECUTION_ENABLED = true

# Configuração de performance para execução paralela
# Otimizações para evitar gargalos
# -n auto: Detecta automaticamente o número de CPUs
# --dist=loadfile: Distribui testes por arquivo para melhor isolamento
# --max-worker-restart=3: Máximo de 3 reinicializações de worker
# --worker-restart-retry-count=2: Máximo de 2 tentativas por worker

# Configuração de isolamento entre workers
# Garante que cada worker tenha seu próprio ambiente
# --reuse-db: Reutiliza banco de dados entre execuções
# --nomigrations: Não executa migrações durante testes
# --keepdb: Mantém banco de dados entre execuções

# Configuração de relatórios
# --html: Relatório HTML detalhado
# --junitxml: Relatório XML para CI/CD
# --cov-report: Múltiplos formatos de cobertura
# --cov-fail-under: Falha se cobertura < 85%

# Configuração de cobertura
# --cov=infrastructure: Cobre camada de infraestrutura
# --cov=app: Cobre camada de aplicação
# --cov=domain: Cobre camada de domínio
# --cov-report=html:coverage/html: Relatório HTML na pasta coverage
# --cov-report=xml:coverage/coverage.xml: Relatório XML para CI/CD
# --cov-report=term-missing: Mostra linhas não cobertas no terminal

# Configuração de execução
# --tb=short: Stack trace curto para falhas
# --maxfail=5: Para após 5 falhas
# --durations=10: Mostra 10 testes mais lentos
# --strict-markers: Falha se marker não registrado
# --disable-warnings: Suprime warnings durante testes
# --color=yes: Saída colorida no terminal

# Configuração de markers específicos
# unit: Testes unitários (funções isoladas)
# integration: Testes de integração (módulos)
# e2e: Testes end-to-end (fluxos completos)
# load: Testes de carga (performance)
# resilience: Testes de resiliência (falhas)
# slow: Testes lentos (timeout maior)
# fast: Testes rápidos (timeout menor)
# critical: Testes críticos (falha bloqueia deploy)
# high_risk: Testes de alto risco
# medium_risk: Testes de médio risco
# low_risk: Testes de baixo risco
# production: Testes de produção
# canary: Testes de canário (deploy gradual)
# shadow: Testes de shadow (duplicação)
# mutation: Testes de mutação (qualidade)
# performance: Testes de performance
# security: Testes de segurança
# real_data: Testes com dados reais
# semantic: Testes de validação semântica
# orchestrator: Testes específicos do orquestrador
# etapas: Testes das etapas do fluxo
# utils: Testes de utilitários

# Configuração de timeout
# timeout = 300: 5 minutos por teste
# timeout_method = thread: Timeout baseado em thread

# Configuração de cache
# cache_dir = .pytest_cache: Cache local para testes

# Configuração de logs
# log_cli = true: Logs no terminal
# log_cli_level = INFO: Nível de log
# log_cli_format: Formato dos logs
# log_cli_date_format: Formato da data

# Configuração de plugins
# pytest-xdist: Execução paralela
# pytest-cov: Cobertura de código
# pytest-timeout: Timeout de testes
# pytest-mock: Mocking de objetos
# pytest-asyncio: Testes assíncronos
# pytest-html: Relatórios HTML

# Configuração de ambiente
# TESTING = true: Modo de teste ativo
# LOG_LEVEL = DEBUG: Log detalhado
# CACHE_ENABLED = false: Cache desabilitado
# MOCK_EXTERNAL_APIS = true: APIs externas mockadas
# PYTHONPATH = .: Caminho Python atual
# TEST_ENV = integration: Ambiente de teste
# RISK_SCORE_ENABLED = true: Score de risco ativo
# SEMANTIC_VALIDATION_ENABLED = true: Validação semântica ativa
# SHADOW_TESTING_ENABLED = true: Testes shadow ativos
# MUTATION_TESTING_ENABLED = true: Testes de mutação ativos
# PARALLEL_EXECUTION_ENABLED = true: Execução paralela ativa 