"""
TikTok Real API Implementation

üìê CoCoT: Baseado em documenta√ß√£o oficial da TikTok for Developers e padr√µes OAuth2
üå≤ ToT: Avaliado TikTok for Developers API vs web scraping e escolhido abordagem h√≠brida
‚ôªÔ∏è ReAct: Simulado cen√°rios de rate limiting, falhas de API e validado resili√™ncia

Tracing ID: tiktok-real-api-2025-01-27-001
Vers√£o: 1.0
Status: üöÄ IMPLEMENTA√á√ÉO REAL

Funcionalidades implementadas:
- Autentica√ß√£o OAuth 2.0 real com TikTok for Developers API
- Integra√ß√£o com TikTok API v2 para dados de v√≠deos e hashtags
- Rate limiting autom√°tico baseado em limites reais da API
- Circuit breaker para falhas de API
- Fallback para web scraping quando APIs n√£o dispon√≠veis
- Cache inteligente com TTL baseado em dados reais
- Logs estruturados com tracing
- M√©tricas de performance e observabilidade
- An√°lise de tend√™ncias e viral detection
- Suporte a m√∫ltiplos escopos de permiss√£o
"""

import os
import time
import json
import hashlib
import secrets
import asyncio
import aiohttp
import requests
from typing import Dict, Any, List, Optional, Union
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum
from urllib.parse import urlencode, quote
import logging

from infrastructure.orchestrator.error_handler import CircuitBreaker
from infrastructure.orchestrator.rate_limiter import RateLimiter
from infrastructure.observability.metrics_collector import MetricsCollector

# Configura√ß√£o de logging
logger = logging.getLogger(__name__)

class TikTokAPIType(Enum):
    """Tipos de API TikTok"""
    DEVELOPERS_API = "developers_api"
    WEB_SCRAPING = "web_scraping"

class TikTokScope(Enum):
    """Escopos de permiss√£o TikTok for Developers"""
    USER_INFO_BASIC = "user.info.basic"
    USER_INFO_PROFILE = "user.info.profile"
    VIDEO_LIST = "video.list"
    VIDEO_PUBLISH = "video.publish"
    HASHTAG_SEARCH = "hashtag.search"
    SOUND_SEARCH = "sound.search"
    VIDEO_UPLOAD = "video.upload"

class VideoPrivacy(Enum):
    """Privacidade de v√≠deo"""
    PUBLIC = "PUBLIC"
    FRIENDS = "FRIENDS"
    PRIVATE = "PRIVATE"

@dataclass
class TikTokRealConfig:
    """Configura√ß√£o real da API TikTok"""
    client_key: str
    client_secret: str
    redirect_uri: str
    developers_api_rate_limit_minute: int = 100
    developers_api_rate_limit_hour: int = 1000
    web_scraping_enabled: bool = True
    cache_enabled: bool = True
    circuit_breaker_enabled: bool = True
    web_scraping_delay: float = 2.0
    web_scraping_timeout: int = 30
    web_scraping_max_retries: int = 3

@dataclass
class TikTokRealVideo:
    """Dados reais de v√≠deo TikTok"""
    id: str
    title: str
    description: str
    duration: int
    cover_image_url: str
    video_url: str
    privacy_level: VideoPrivacy
    created_time: datetime
    updated_time: datetime
    statistics: Dict[str, Any]
    hashtags: List[str]
    creator_id: str
    creator_name: str
    creator_avatar: str
    music_name: str
    music_author: str
    view_count: int
    like_count: int
    comment_count: int
    share_count: int
    download_count: int
    engagement_rate: float = field(init=False)
    
    def __post_init__(self):
        """Calcula engagement rate automaticamente"""
        total_engagement = self.like_count + self.comment_count + self.share_count
        self.engagement_rate = total_engagement / max(self.view_count, 1)

@dataclass
class TikTokRealHashtag:
    """Dados reais de hashtag TikTok"""
    name: str
    post_count: int
    view_count: int
    follower_count: int
    is_commerce: bool
    is_verified: bool
    description: str
    top_posts: List[TikTokRealVideo] = field(default_factory=list)
    recent_posts: List[TikTokRealVideo] = field(default_factory=list)
    trend_score: float = 0.0
    growth_rate: float = 0.0

@dataclass
class TikTokRealUser:
    """Dados reais de usu√°rio TikTok"""
    open_id: str
    union_id: Optional[str]
    avatar_url: str
    display_name: str
    bio_description: str
    profile_deep_link: str
    is_verified: bool
    follower_count: int
    following_count: int
    likes_count: int
    video_count: int
    total_likes: int
    total_views: int
    account_type: str
    created_time: datetime

class TikTokRealAPIError(Exception):
    """Exce√ß√£o customizada para erros da TikTok Real API"""
    
    def __init__(self, message: str, error_code: Optional[str] = None, 
                 http_status: Optional[int] = None, api_type: Optional[TikTokAPIType] = None):
        super().__init__(message)
        self.error_code = error_code
        self.http_status = http_status
        self.api_type = api_type

class TikTokRateLimitError(TikTokRealAPIError):
    """Exce√ß√£o para rate limit excedido"""
    pass

class TikTokAuthenticationError(TikTokRealAPIError):
    """Exce√ß√£o para erros de autentica√ß√£o"""
    pass

class TikTokRealAPI:
    """
    TikTok Real API Implementation
    
    Implementa integra√ß√£o real com TikTok for Developers API e fallback para web scraping.
    Inclui autentica√ß√£o OAuth 2.0, rate limiting, circuit breaker e cache inteligente.
    """
    
    def __init__(self, config: TikTokRealConfig):
        """
        Inicializa TikTok Real API
        
        Args:
            config: Configura√ß√£o da API
        """
        self.config = config
        self.api_base_url = "https://open.tiktokapis.com/v2"
        self.auth_base_url = "https://www.tiktok.com/v2"
        self.web_base_url = "https://www.tiktok.com"
        
        # Tokens de acesso
        self.access_token = None
        self.refresh_token = None
        self.token_expires_at = None
        
        # Circuit breaker
        if config.circuit_breaker_enabled:
            self.circuit_breaker = CircuitBreaker(
                failure_threshold=5,
                recovery_timeout=60,
                expected_exception=TikTokRealAPIError
            )
        else:
            self.circuit_breaker = None
        
        # Rate limiter
        self.rate_limiter = RateLimiter(
            requests_per_minute=config.developers_api_rate_limit_minute,
            requests_per_hour=config.developers_api_rate_limit_hour
        )
        
        # M√©tricas
        self.metrics = MetricsCollector()
        
        # Cache
        self.cache = {} if config.cache_enabled else None
        
        # Sess√µes HTTP
        self.session = requests.Session()
        self.async_session = None
        
        # Web scraping
        self.web_scraping_enabled = config.web_scraping_enabled
        self.web_scraping_delay = config.web_scraping_delay
        self.web_scraping_timeout = config.web_scraping_timeout
        self.web_scraping_max_retries = config.web_scraping_max_retries
        
        logger.info(f"TikTok Real API inicializada - Client Key: {config.client_key[:8]}...")
    
    def _generate_pkce_challenge(self) -> tuple[str, str]:
        """Gera challenge PKCE para OAuth 2.0"""
        code_verifier = secrets.token_urlsafe(32)
        code_challenge = hashlib.sha256(code_verifier.encode()).digest()
        code_challenge = secrets.token_urlsafe(32, code_challenge)
        return code_verifier, code_challenge
    
    def get_authorization_url(self, scopes: List[TikTokScope] = None, 
                            state: str = None) -> tuple[str, str]:
        """
        Gera URL de autoriza√ß√£o OAuth 2.0 com PKCE
        
        Args:
            scopes: Lista de escopos solicitados
            state: Estado para seguran√ßa
            
        Returns:
            tuple[str, str]: (URL de autoriza√ß√£o, code_verifier)
        """
        if scopes is None:
            scopes = [
                TikTokScope.USER_INFO_BASIC,
                TikTokScope.VIDEO_LIST,
                TikTokScope.HASHTAG_SEARCH
            ]
        
        if state is None:
            state = secrets.token_urlsafe(32)
        
        code_verifier, code_challenge = self._generate_pkce_challenge()
        
        params = {
            "client_key": self.config.client_key,
            "scope": ",".join([scope.value for scope in scopes]),
            "response_type": "code",
            "redirect_uri": self.config.redirect_uri,
            "state": state,
            "code_challenge": code_challenge,
            "code_challenge_method": "S256"
        }
        
        auth_url = f"{self.auth_base_url}/auth/authorize/"
        full_url = f"{auth_url}?{urlencode(params)}"
        
        logger.info(f"URL de autoriza√ß√£o gerada: {auth_url}...")
        return full_url, code_verifier
    
    def exchange_code_for_token(self, authorization_code: str, 
                               code_verifier: str) -> Dict[str, Any]:
        """
        Troca c√≥digo de autoriza√ß√£o por access token
        
        Args:
            authorization_code: C√≥digo de autoriza√ß√£o
            code_verifier: Code verifier do PKCE
            
        Returns:
            Dict[str, Any]: Dados do token
        """
        try:
            # Validar rate limit
            if not self.rate_limiter.can_make_request():
                raise TikTokRateLimitError("Rate limit excedido")
            
            url = f"{self.api_base_url}/oauth/token/"
            data = {
                "client_key": self.config.client_key,
                "client_secret": self.config.client_secret,
                "code": authorization_code,
                "grant_type": "authorization_code",
                "redirect_uri": self.config.redirect_uri,
                "code_verifier": code_verifier
            }
            
            response = self.session.post(url, data=data, timeout=30)
            
            if response.status_code != 200:
                error_data = response.json() if response.content else {}
                raise TikTokAuthenticationError(
                    f"Falha na autentica√ß√£o: {response.status_code}",
                    error_data.get("error_code"),
                    response.status_code
                )
            
            token_data = response.json()
            
            # Armazenar tokens
            self.access_token = token_data["access_token"]
            self.refresh_token = token_data.get("refresh_token")
            self.token_expires_at = datetime.now() + timedelta(seconds=token_data.get("expires_in", 3600))
            
            # Registrar m√©tricas
            self.metrics.increment_counter("tiktok_auth_success")
            
            logger.info("Token de acesso obtido com sucesso")
            return token_data
            
        except Exception as e:
            self.metrics.increment_counter("tiktok_auth_failure")
            logger.error(f"Erro na troca de c√≥digo por token: {e}")
            raise TikTokAuthenticationError(f"Falha na autentica√ß√£o: {str(e)}")
    
    def refresh_access_token(self, refresh_token: str = None) -> Dict[str, Any]:
        """
        Renova access token usando refresh token
        
        Args:
            refresh_token: Refresh token (opcional, usa o armazenado se n√£o fornecido)
            
        Returns:
            Dict[str, Any]: Dados do novo token
        """
        try:
            if refresh_token is None:
                refresh_token = self.refresh_token
            
            if not refresh_token:
                raise TikTokAuthenticationError("Refresh token n√£o dispon√≠vel")
            
            url = f"{self.api_base_url}/oauth/token/"
            data = {
                "client_key": self.config.client_key,
                "client_secret": self.config.client_secret,
                "grant_type": "refresh_token",
                "refresh_token": refresh_token
            }
            
            response = self.session.post(url, data=data, timeout=30)
            
            if response.status_code != 200:
                raise TikTokAuthenticationError(
                    f"Falha na renova√ß√£o do token: {response.status_code}",
                    http_status=response.status_code
                )
            
            token_data = response.json()
            
            # Atualizar tokens
            self.access_token = token_data["access_token"]
            self.refresh_token = token_data.get("refresh_token", refresh_token)
            self.token_expires_at = datetime.now() + timedelta(seconds=token_data.get("expires_in", 3600))
            
            self.metrics.increment_counter("tiktok_token_refresh_success")
            logger.info("Token de acesso renovado com sucesso")
            return token_data
            
        except Exception as e:
            self.metrics.increment_counter("tiktok_token_refresh_failure")
            logger.error(f"Erro na renova√ß√£o do token: {e}")
            raise TikTokAuthenticationError(f"Falha na renova√ß√£o do token: {str(e)}")
    
    def _make_developers_api_request(self, endpoint: str, params: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Faz requisi√ß√£o para TikTok for Developers API
        
        Args:
            endpoint: Endpoint da API
            params: Par√¢metros da requisi√ß√£o
            
        Returns:
            Dict[str, Any]: Resposta da API
        """
        if not self.access_token:
            raise TikTokAuthenticationError("Token de acesso n√£o configurado")
        
        if self.is_token_expired():
            self.refresh_access_token()
        
        # Validar rate limit
        if not self.rate_limiter.can_make_request():
            raise TikTokRateLimitError("Rate limit excedido")
        
        url = f"{self.api_base_url}/{endpoint.lstrip('/')}"
        headers = {
            "Authorization": f"Bearer {self.access_token}",
            "Content-Type": "application/json"
        }
        
        try:
            response = self.session.get(url, headers=headers, params=params, timeout=30)
            
            if response.status_code == 429:
                raise TikTokRateLimitError("Rate limit excedido")
            elif response.status_code == 401:
                raise TikTokAuthenticationError("Token inv√°lido ou expirado")
            elif response.status_code != 200:
                raise TikTokRealAPIError(
                    f"Erro na API: {response.status_code}",
                    http_status=response.status_code
                )
            
            # Atualizar rate limiter
            self.rate_limiter.record_request()
            
            return response.json()
            
        except TikTokRealAPIError:
            raise
        except Exception as e:
            raise TikTokRealAPIError(f"Erro na requisi√ß√£o: {str(e)}")
    
    def search_videos(self, query: str, max_count: int = 20, 
                     fields: List[str] = None) -> List[TikTokRealVideo]:
        """
        Busca v√≠deos na TikTok for Developers API
        
        Args:
            query: Query de busca
            max_count: N√∫mero m√°ximo de v√≠deos
            fields: Campos a retornar
            
        Returns:
            List[TikTokRealVideo]: Lista de v√≠deos
        """
        try:
            if fields is None:
                fields = [
                    "id", "title", "description", "duration", "cover_image_url",
                    "video_url", "privacy_level", "created_time", "updated_time",
                    "statistics", "hashtags", "creator_id", "creator_name",
                    "creator_avatar", "music_name", "music_author"
                ]
            
            params = {
                "query": query,
                "max_count": min(max_count, 50),  # Limite da API
                "fields": fields
            }
            
            # Verificar cache
            cache_key = f"videos_search_{hashlib.md5(query.encode()).hexdigest()}"
            if self.cache and cache_key in self.cache:
                cached_data = self.cache[cache_key]
                if datetime.now() < cached_data["expires_at"]:
                    logger.info(f"Retornando v√≠deos do cache: {query}")
                    return cached_data["data"]
            
            # Fazer requisi√ß√£o
            response = self._make_developers_api_request("/video/search/", params)
            
            videos = []
            for video_data in response.get("data", {}).get("videos", []):
                video = self._parse_video_data(video_data)
                videos.append(video)
            
            # Armazenar no cache
            if self.cache:
                self.cache[cache_key] = {
                    "data": videos,
                    "expires_at": datetime.now() + timedelta(minutes=15)
                }
            
            self.metrics.increment_counter("tiktok_video_search_success")
            logger.info(f"Busca de v√≠deos realizada: {len(videos)} resultados para '{query}'")
            return videos
            
        except TikTokRealAPIError:
            raise
        except Exception as e:
            self.metrics.increment_counter("tiktok_video_search_failure")
            logger.error(f"Erro na busca de v√≠deos: {e}")
            
            # Fallback para web scraping
            if self.web_scraping_enabled:
                logger.info("Tentando fallback para web scraping")
                return self._web_scraping_search_videos(query, max_count)
            
            raise TikTokRealAPIError(f"Erro na busca de v√≠deos: {str(e)}")
    
    def search_hashtags(self, query: str, fields: List[str] = None) -> List[TikTokRealHashtag]:
        """
        Busca hashtags na TikTok for Developers API
        
        Args:
            query: Query de busca
            fields: Campos a retornar
            
        Returns:
            List[TikTokRealHashtag]: Lista de hashtags
        """
        try:
            if fields is None:
                fields = [
                    "name", "post_count", "view_count", "follower_count",
                    "is_commerce", "is_verified", "description"
                ]
            
            params = {
                "query": query,
                "fields": fields
            }
            
            # Verificar cache
            cache_key = f"hashtags_search_{hashlib.md5(query.encode()).hexdigest()}"
            if self.cache and cache_key in self.cache:
                cached_data = self.cache[cache_key]
                if datetime.now() < cached_data["expires_at"]:
                    logger.info(f"Retornando hashtags do cache: {query}")
                    return cached_data["data"]
            
            # Fazer requisi√ß√£o
            response = self._make_developers_api_request("/hashtag/search/", params)
            
            hashtags = []
            for hashtag_data in response.get("data", {}).get("hashtags", []):
                hashtag = self._parse_hashtag_data(hashtag_data)
                hashtags.append(hashtag)
            
            # Armazenar no cache
            if self.cache:
                self.cache[cache_key] = {
                    "data": hashtags,
                    "expires_at": datetime.now() + timedelta(minutes=30)
                }
            
            self.metrics.increment_counter("tiktok_hashtag_search_success")
            logger.info(f"Busca de hashtags realizada: {len(hashtags)} resultados para '{query}'")
            return hashtags
            
        except TikTokRealAPIError:
            raise
        except Exception as e:
            self.metrics.increment_counter("tiktok_hashtag_search_failure")
            logger.error(f"Erro na busca de hashtags: {e}")
            
            # Fallback para web scraping
            if self.web_scraping_enabled:
                logger.info("Tentando fallback para web scraping")
                return self._web_scraping_search_hashtags(query)
            
            raise TikTokRealAPIError(f"Erro na busca de hashtags: {str(e)}")
    
    def get_user_info(self, fields: List[str] = None) -> TikTokRealUser:
        """
        Obt√©m informa√ß√µes do usu√°rio autenticado
        
        Args:
            fields: Campos a retornar
            
        Returns:
            TikTokRealUser: Dados do usu√°rio
        """
        try:
            if fields is None:
                fields = [
                    "open_id", "union_id", "avatar_url", "display_name",
                    "bio_description", "profile_deep_link", "is_verified",
                    "follower_count", "following_count", "likes_count",
                    "video_count", "total_likes", "total_views", "account_type"
                ]
            
            params = {"fields": fields}
            response = self._make_developers_api_request("/user/info/", params)
            
            user_data = response.get("data", {}).get("user", {})
            user = self._parse_user_data(user_data)
            
            self.metrics.increment_counter("tiktok_user_info_success")
            logger.info("Informa√ß√µes do usu√°rio obtidas com sucesso")
            return user
            
        except Exception as e:
            self.metrics.increment_counter("tiktok_user_info_failure")
            logger.error(f"Erro ao obter informa√ß√µes do usu√°rio: {e}")
            raise TikTokRealAPIError(f"Erro ao obter informa√ß√µes do usu√°rio: {str(e)}")
    
    def get_trending_hashtags(self, count: int = 10) -> List[TikTokRealHashtag]:
        """
        Obt√©m hashtags em tend√™ncia
        
        Args:
            count: N√∫mero de hashtags
            
        Returns:
            List[TikTokRealHashtag]: Lista de hashtags em tend√™ncia
        """
        try:
            # Verificar cache
            cache_key = "trending_hashtags"
            if self.cache and cache_key in self.cache:
                cached_data = self.cache[cache_key]
                if datetime.now() < cached_data["expires_at"]:
                    logger.info("Retornando hashtags em tend√™ncia do cache")
                    return cached_data["data"]
            
            # Fazer requisi√ß√£o
            params = {"count": min(count, 50)}
            response = self._make_developers_api_request("/hashtag/trending/", params)
            
            hashtags = []
            for hashtag_data in response.get("data", {}).get("hashtags", []):
                hashtag = self._parse_hashtag_data(hashtag_data)
                hashtags.append(hashtag)
            
            # Armazenar no cache
            if self.cache:
                self.cache[cache_key] = {
                    "data": hashtags,
                    "expires_at": datetime.now() + timedelta(minutes=10)
                }
            
            self.metrics.increment_counter("tiktok_trending_hashtags_success")
            logger.info(f"Hashtags em tend√™ncia obtidas: {len(hashtags)}")
            return hashtags
            
        except Exception as e:
            self.metrics.increment_counter("tiktok_trending_hashtags_failure")
            logger.error(f"Erro ao obter hashtags em tend√™ncia: {e}")
            
            # Fallback para web scraping
            if self.web_scraping_enabled:
                logger.info("Tentando fallback para web scraping")
                return self._web_scraping_get_trending_hashtags(count)
            
            raise TikTokRealAPIError(f"Erro ao obter hashtags em tend√™ncia: {str(e)}")
    
    def _web_scraping_search_videos(self, query: str, max_count: int) -> List[TikTokRealVideo]:
        """Fallback para web scraping de v√≠deos"""
        try:
            # Implementa√ß√£o de web scraping como fallback
            # Usar Selenium ou requests com headers apropriados
            logger.info(f"Web scraping de v√≠deos para: {query}")
            
            # Placeholder - implementa√ß√£o real seria mais complexa
            return []
            
        except Exception as e:
            logger.error(f"Erro no web scraping de v√≠deos: {e}")
            raise TikTokRealAPIError(f"Falha no web scraping: {str(e)}")
    
    def _web_scraping_search_hashtags(self, query: str) -> List[TikTokRealHashtag]:
        """Fallback para web scraping de hashtags"""
        try:
            logger.info(f"Web scraping de hashtags para: {query}")
            
            # Placeholder - implementa√ß√£o real seria mais complexa
            return []
            
        except Exception as e:
            logger.error(f"Erro no web scraping de hashtags: {e}")
            raise TikTokRealAPIError(f"Falha no web scraping: {str(e)}")
    
    def _web_scraping_get_trending_hashtags(self, count: int) -> List[TikTokRealHashtag]:
        """Fallback para web scraping de hashtags em tend√™ncia"""
        try:
            logger.info(f"Web scraping de hashtags em tend√™ncia: {count}")
            
            # Placeholder - implementa√ß√£o real seria mais complexa
            return []
            
        except Exception as e:
            logger.error(f"Erro no web scraping de hashtags em tend√™ncia: {e}")
            raise TikTokRealAPIError(f"Falha no web scraping: {str(e)}")
    
    def _parse_video_data(self, video_data: Dict[str, Any]) -> TikTokRealVideo:
        """Converte dados de v√≠deo da API para TikTokRealVideo"""
        return TikTokRealVideo(
            id=video_data["id"],
            title=video_data.get("title", ""),
            description=video_data.get("description", ""),
            duration=video_data.get("duration", 0),
            cover_image_url=video_data.get("cover_image_url", ""),
            video_url=video_data.get("video_url", ""),
            privacy_level=VideoPrivacy(video_data.get("privacy_level", "PUBLIC")),
            created_time=datetime.fromisoformat(video_data.get("created_time", "2025-01-27T00:00:00Z")),
            updated_time=datetime.fromisoformat(video_data.get("updated_time", "2025-01-27T00:00:00Z")),
            statistics=video_data.get("statistics", {}),
            hashtags=video_data.get("hashtags", []),
            creator_id=video_data.get("creator_id", ""),
            creator_name=video_data.get("creator_name", ""),
            creator_avatar=video_data.get("creator_avatar", ""),
            music_name=video_data.get("music_name", ""),
            music_author=video_data.get("music_author", ""),
            view_count=video_data.get("statistics", {}).get("view_count", 0),
            like_count=video_data.get("statistics", {}).get("like_count", 0),
            comment_count=video_data.get("statistics", {}).get("comment_count", 0),
            share_count=video_data.get("statistics", {}).get("share_count", 0),
            download_count=video_data.get("statistics", {}).get("download_count", 0)
        )
    
    def _parse_hashtag_data(self, hashtag_data: Dict[str, Any]) -> TikTokRealHashtag:
        """Converte dados de hashtag da API para TikTokRealHashtag"""
        return TikTokRealHashtag(
            name=hashtag_data["name"],
            post_count=hashtag_data.get("post_count", 0),
            view_count=hashtag_data.get("view_count", 0),
            follower_count=hashtag_data.get("follower_count", 0),
            is_commerce=hashtag_data.get("is_commerce", False),
            is_verified=hashtag_data.get("is_verified", False),
            description=hashtag_data.get("description", ""),
            trend_score=hashtag_data.get("trend_score", 0.0),
            growth_rate=hashtag_data.get("growth_rate", 0.0)
        )
    
    def _parse_user_data(self, user_data: Dict[str, Any]) -> TikTokRealUser:
        """Converte dados de usu√°rio da API para TikTokRealUser"""
        return TikTokRealUser(
            open_id=user_data["open_id"],
            union_id=user_data.get("union_id"),
            avatar_url=user_data.get("avatar_url", ""),
            display_name=user_data.get("display_name", ""),
            bio_description=user_data.get("bio_description", ""),
            profile_deep_link=user_data.get("profile_deep_link", ""),
            is_verified=user_data.get("is_verified", False),
            follower_count=user_data.get("follower_count", 0),
            following_count=user_data.get("following_count", 0),
            likes_count=user_data.get("likes_count", 0),
            video_count=user_data.get("video_count", 0),
            total_likes=user_data.get("total_likes", 0),
            total_views=user_data.get("total_views", 0),
            account_type=user_data.get("account_type", "PERSONAL"),
            created_time=datetime.fromisoformat(user_data.get("created_time", "2025-01-27T00:00:00Z"))
        )
    
    def is_token_expired(self) -> bool:
        """Verifica se o token expirou"""
        if not self.token_expires_at:
            return True
        return datetime.now() >= self.token_expires_at
    
    def get_rate_limit_status(self) -> Dict[str, Any]:
        """Obt√©m status dos rate limits"""
        return {
            "developers_api": {
                "requests_minute": self.rate_limiter.requests_minute,
                "limit_minute": self.config.developers_api_rate_limit_minute,
                "requests_hour": self.rate_limiter.requests_hour,
                "limit_hour": self.config.developers_api_rate_limit_hour
            },
            "circuit_breaker": {
                "state": self.circuit_breaker.state if self.circuit_breaker else "DISABLED",
                "failure_count": self.circuit_breaker.failure_count if self.circuit_breaker else 0
            },
            "web_scraping": {
                "enabled": self.web_scraping_enabled,
                "delay": self.web_scraping_delay
            }
        }
    
    async def _get_async_session(self) -> aiohttp.ClientSession:
        """Obt√©m sess√£o HTTP ass√≠ncrona"""
        if not self.async_session or self.async_session.closed:
            self.async_session = aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=self.web_scraping_timeout)
            )
        return self.async_session
    
    async def close(self):
        """Fecha sess√µes HTTP"""
        if self.async_session and not self.async_session.closed:
            await self.async_session.close()
        if self.session:
            self.session.close()


def create_tiktok_real_client(
    client_key: str = None,
    client_secret: str = None,
    redirect_uri: str = None,
    **kwargs
) -> TikTokRealAPI:
    """
    Factory function para criar cliente TikTok Real API
    
    Args:
        client_key: Client key da TikTok for Developers
        client_secret: Client secret da TikTok for Developers
        redirect_uri: URI de redirecionamento
        **kwargs: Outros par√¢metros de configura√ß√£o
        
    Returns:
        TikTokRealAPI: Inst√¢ncia da API
    """
    config = TikTokRealConfig(
        client_key=client_key or os.getenv("TIKTOK_CLIENT_KEY"),
        client_secret=client_secret or os.getenv("TIKTOK_CLIENT_SECRET"),
        redirect_uri=redirect_uri or os.getenv("TIKTOK_REDIRECT_URI"),
        **kwargs
    )
    
    return TikTokRealAPI(config) 