#!/usr/bin/env python3
"""
ğŸ”’ Sistema de Hardening de SeguranÃ§a - IMP-017
==============================================

Tracing ID: SECURITY_HARDENING_IMP017_20250127_001
Data: 2025-01-27
VersÃ£o: 1.0.0

Sistema avanÃ§ado de hardening de seguranÃ§a que:
- Aplica medidas de seguranÃ§a automÃ¡ticas
- Verifica configuraÃ§Ãµes de seguranÃ§a
- Implementa polÃ­ticas de seguranÃ§a
- Monitora vulnerabilidades
- Fornece relatÃ³rios de seguranÃ§a
- Integra com observabilidade

Prompt: CHECKLIST_CONFIABILIDADE.md - IMP-017
Ruleset: enterprise_control_layer.yaml
"""

import os
import sys
import json
import logging
import hashlib
import secrets
import ssl
import socket
from typing import Dict, List, Any, Optional, Tuple, Callable, Union
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum
from collections import defaultdict, deque
import threading
from functools import wraps
import subprocess
import platform

# Criptografia e seguranÃ§a
import cryptography
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import bcrypt

# Logging estruturado
from shared.logger import logger

# Observabilidade
from infrastructure.observability.metrics import MetricsCollector
from infrastructure.observability.tracing import trace_function


class SecurityLevel(Enum):
    """NÃ­veis de seguranÃ§a."""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class SecurityCategory(Enum):
    """Categorias de seguranÃ§a."""
    AUTHENTICATION = "authentication"
    AUTHORIZATION = "authorization"
    ENCRYPTION = "encryption"
    NETWORK = "network"
    APPLICATION = "application"
    DATABASE = "database"
    SYSTEM = "system"


@dataclass
class SecurityConfig:
    """ConfiguraÃ§Ã£o de seguranÃ§a."""
    security_level: SecurityLevel = SecurityLevel.HIGH
    enable_auto_hardening: bool = True
    enable_vulnerability_scanning: bool = True
    enable_encryption: bool = True
    enable_audit_logging: bool = True
    password_min_length: int = 12
    password_complexity: bool = True
    session_timeout: int = 3600  # 1 hora
    max_login_attempts: int = 5
    lockout_duration: int = 900  # 15 minutos
    enable_2fa: bool = True
    ssl_required: bool = True
    cors_enabled: bool = True
    rate_limiting_enabled: bool = True
    input_validation_enabled: bool = True
    sql_injection_protection: bool = True
    xss_protection: bool = True
    csrf_protection: bool = True


@dataclass
class SecurityMetrics:
    """MÃ©tricas de seguranÃ§a."""
    failed_login_attempts: int = 0
    successful_logins: int = 0
    security_violations: int = 0
    vulnerability_count: int = 0
    encryption_operations: int = 0
    audit_events: int = 0
    timestamp: datetime = field(default_factory=datetime.now)


@dataclass
class SecurityViolation:
    """ViolaÃ§Ã£o de seguranÃ§a detectada."""
    category: SecurityCategory
    severity: SecurityLevel
    description: str
    source_ip: Optional[str] = None
    user_id: Optional[str] = None
    timestamp: datetime = field(default_factory=datetime.now)
    details: Dict[str, Any] = field(default_factory=dict)


@dataclass
class HardeningResult:
    """Resultado de uma operaÃ§Ã£o de hardening."""
    category: SecurityCategory
    success: bool
    changes_applied: List[str]
    security_score: float
    timestamp: datetime = field(default_factory=datetime.now)
    details: Dict[str, Any] = field(default_factory=dict)


class SecurityHardener:
    """
    Sistema de hardening de seguranÃ§a.
    
    ResponsÃ¡vel por:
    - Aplicar medidas de seguranÃ§a automÃ¡ticas
    - Verificar configuraÃ§Ãµes de seguranÃ§a
    - Implementar polÃ­ticas de seguranÃ§a
    - Monitorar violaÃ§Ãµes
    - Gerar relatÃ³rios de seguranÃ§a
    """
    
    def __init__(self, config: SecurityConfig):
        self.config = config
        self.metrics_collector = MetricsCollector()
        
        # HistÃ³rico de violaÃ§Ãµes
        self.security_violations = deque(maxlen=1000)
        self.audit_log = deque(maxlen=10000)
        
        # MÃ©tricas
        self.metrics = SecurityMetrics()
        self.metrics_history = deque(maxlen=1000)
        
        # Threading
        self.monitoring_thread = None
        self.scanning_thread = None
        self.monitoring_active = False
        
        # Locks
        self.violations_lock = threading.RLock()
        self.audit_lock = threading.RLock()
        
        # Chaves de criptografia
        self.encryption_key = None
        self._initialize_encryption()
        
        logger.info(f"SecurityHardener inicializado com nÃ­vel: {config.security_level}")
    
    @trace_function(operation_name="start_monitoring", service_name="security-hardener")
    def start_monitoring(self) -> bool:
        """Inicia o monitoramento de seguranÃ§a."""
        try:
            if self.monitoring_active:
                logger.warning("Monitoramento de seguranÃ§a jÃ¡ estÃ¡ ativo")
                return True
            
            self.monitoring_active = True
            
            # Iniciar thread de monitoramento
            self.monitoring_thread = threading.Thread(
                target=self._monitoring_loop,
                daemon=True
            )
            self.monitoring_thread.start()
            
            # Iniciar thread de scanning
            if self.config.enable_vulnerability_scanning:
                self.scanning_thread = threading.Thread(
                    target=self._vulnerability_scanning_loop,
                    daemon=True
                )
                self.scanning_thread.start()
            
            logger.info("Monitoramento de seguranÃ§a iniciado com sucesso")
            return True
            
        except Exception as e:
            logger.error(f"Erro ao iniciar monitoramento de seguranÃ§a: {str(e)}")
            return False
    
    @trace_function(operation_name="stop_monitoring", service_name="security-hardener")
    def stop_monitoring(self) -> bool:
        """Para o monitoramento de seguranÃ§a."""
        try:
            self.monitoring_active = False
            
            if self.monitoring_thread:
                self.monitoring_thread.join(timeout=5)
            
            if self.scanning_thread:
                self.scanning_thread.join(timeout=5)
            
            logger.info("Monitoramento de seguranÃ§a parado")
            return True
            
        except Exception as e:
            logger.error(f"Erro ao parar monitoramento de seguranÃ§a: {str(e)}")
            return False
    
    @trace_function(operation_name="apply_hardening", service_name="security-hardener")
    def apply_hardening(self) -> Dict[str, HardeningResult]:
        """Aplica medidas de hardening de seguranÃ§a."""
        try:
            results = {}
            
            # Hardening de autenticaÃ§Ã£o
            results['authentication'] = self._harden_authentication()
            
            # Hardening de autorizaÃ§Ã£o
            results['authorization'] = self._harden_authorization()
            
            # Hardening de criptografia
            results['encryption'] = self._harden_encryption()
            
            # Hardening de rede
            results['network'] = self._harden_network()
            
            # Hardening de aplicaÃ§Ã£o
            results['application'] = self._harden_application()
            
            # Hardening de banco de dados
            results['database'] = self._harden_database()
            
            # Hardening de sistema
            results['system'] = self._harden_system()
            
            # Calcular score geral
            overall_score = self._calculate_overall_security_score(results)
            
            logger.info(f"Hardening aplicado com score geral: {overall_score:.2f}")
            
            return results
            
        except Exception as e:
            logger.error(f"Erro ao aplicar hardening: {str(e)}")
            return {"error": str(e)}
    
    @trace_function(operation_name="scan_vulnerabilities", service_name="security-hardener")
    def scan_vulnerabilities(self) -> Dict[str, Any]:
        """Escaneia vulnerabilidades de seguranÃ§a."""
        try:
            vulnerabilities = {
                'authentication': self._scan_auth_vulnerabilities(),
                'network': self._scan_network_vulnerabilities(),
                'application': self._scan_app_vulnerabilities(),
                'database': self._scan_db_vulnerabilities(),
                'system': self._scan_system_vulnerabilities()
            }
            
            # Contar vulnerabilidades por severidade
            total_vulnerabilities = 0
            critical_vulnerabilities = 0
            high_vulnerabilities = 0
            medium_vulnerabilities = 0
            low_vulnerabilities = 0
            
            for category, vulns in vulnerabilities.items():
                for vuln in vulns:
                    total_vulnerabilities += 1
                    if vuln['severity'] == SecurityLevel.CRITICAL:
                        critical_vulnerabilities += 1
                    elif vuln['severity'] == SecurityLevel.HIGH:
                        high_vulnerabilities += 1
                    elif vuln['severity'] == SecurityLevel.MEDIUM:
                        medium_vulnerabilities += 1
                    else:
                        low_vulnerabilities += 1
            
            scan_result = {
                'timestamp': datetime.now().isoformat(),
                'total_vulnerabilities': total_vulnerabilities,
                'critical_vulnerabilities': critical_vulnerabilities,
                'high_vulnerabilities': high_vulnerabilities,
                'medium_vulnerabilities': medium_vulnerabilities,
                'low_vulnerabilities': low_vulnerabilities,
                'vulnerabilities': vulnerabilities,
                'recommendations': self._generate_vulnerability_recommendations(vulnerabilities)
            }
            
            # Atualizar mÃ©tricas
            self.metrics.vulnerability_count = total_vulnerabilities
            
            logger.info(f"Scan de vulnerabilidades concluÃ­do: {total_vulnerabilities} encontradas")
            
            return scan_result
            
        except Exception as e:
            logger.error(f"Erro no scan de vulnerabilidades: {str(e)}")
            return {"error": str(e)}
    
    @trace_function(operation_name="encrypt_data", service_name="security-hardener")
    def encrypt_data(self, data: str) -> str:
        """Criptografa dados."""
        try:
            if not self.encryption_key:
                raise ValueError("Chave de criptografia nÃ£o inicializada")
            
            fernet = Fernet(self.encryption_key)
            encrypted_data = fernet.encrypt(data.encode())
            
            # Registrar operaÃ§Ã£o
            self.metrics.encryption_operations += 1
            self._log_audit_event("encryption", "data_encrypted", {"data_length": len(data)})
            
            return encrypted_data.decode()
            
        except Exception as e:
            logger.error(f"Erro ao criptografar dados: {str(e)}")
            raise
    
    @trace_function(operation_name="decrypt_data", service_name="security-hardener")
    def decrypt_data(self, encrypted_data: str) -> str:
        """Descriptografa dados."""
        try:
            if not self.encryption_key:
                raise ValueError("Chave de criptografia nÃ£o inicializada")
            
            fernet = Fernet(self.encryption_key)
            decrypted_data = fernet.decrypt(encrypted_data.encode())
            
            # Registrar operaÃ§Ã£o
            self._log_audit_event("encryption", "data_decrypted", {"data_length": len(decrypted_data)})
            
            return decrypted_data.decode()
            
        except Exception as e:
            logger.error(f"Erro ao descriptografar dados: {str(e)}")
            raise
    
    @trace_function(operation_name="hash_password", service_name="security-hardener")
    def hash_password(self, password: str) -> str:
        """Gera hash seguro de senha."""
        try:
            # Validar senha
            if not self._validate_password_strength(password):
                raise ValueError("Senha nÃ£o atende aos requisitos de seguranÃ§a")
            
            # Gerar salt e hash
            salt = bcrypt.gensalt()
            hashed = bcrypt.hashpw(password.encode('utf-8'), salt)
            
            # Registrar operaÃ§Ã£o
            self._log_audit_event("authentication", "password_hashed", {})
            
            return hashed.decode('utf-8')
            
        except Exception as e:
            logger.error(f"Erro ao gerar hash de senha: {str(e)}")
            raise
    
    @trace_function(operation_name="verify_password", service_name="security-hardener")
    def verify_password(self, password: str, hashed_password: str) -> bool:
        """Verifica senha contra hash."""
        try:
            is_valid = bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8'))
            
            # Registrar tentativa
            if is_valid:
                self.metrics.successful_logins += 1
                self._log_audit_event("authentication", "login_successful", {})
            else:
                self.metrics.failed_login_attempts += 1
                self._log_audit_event("authentication", "login_failed", {})
            
            return is_valid
            
        except Exception as e:
            logger.error(f"Erro ao verificar senha: {str(e)}")
            return False
    
    @trace_function(operation_name="record_violation", service_name="security-hardener")
    def record_violation(self, category: SecurityCategory, severity: SecurityLevel,
                        description: str, **kwargs) -> bool:
        """Registra violaÃ§Ã£o de seguranÃ§a."""
        try:
            violation = SecurityViolation(
                category=category,
                severity=severity,
                description=description,
                source_ip=kwargs.get('source_ip'),
                user_id=kwargs.get('user_id'),
                details=kwargs.get('details', {})
            )
            
            with self.violations_lock:
                self.security_violations.append(violation)
            
            # Atualizar mÃ©tricas
            self.metrics.security_violations += 1
            
            # Enviar alerta se necessÃ¡rio
            if severity in [SecurityLevel.HIGH, SecurityLevel.CRITICAL]:
                self._send_security_alert(violation)
            
            # Registrar no audit log
            self._log_audit_event("security", "violation_recorded", {
                "category": category.value,
                "severity": severity.value,
                "description": description
            })
            
            logger.warning(f"Violation de seguranÃ§a registrada: {description}")
            return True
            
        except Exception as e:
            logger.error(f"Erro ao registrar violaÃ§Ã£o: {str(e)}")
            return False
    
    @trace_function(operation_name="generate_security_report", service_name="security-hardener")
    def generate_security_report(self) -> Dict[str, Any]:
        """Gera relatÃ³rio de seguranÃ§a."""
        try:
            # Obter vulnerabilidades
            vulnerabilities = self.scan_vulnerabilities()
            
            # Obter violaÃ§Ãµes recentes
            recent_violations = list(self.security_violations)[-50:]  # Ãšltimas 50
            
            # Calcular mÃ©tricas
            total_violations = len(self.security_violations)
            critical_violations = len([v for v in self.security_violations 
                                     if v.severity == SecurityLevel.CRITICAL])
            high_violations = len([v for v in self.security_violations 
                                 if v.severity == SecurityLevel.HIGH])
            
            # Calcular score de seguranÃ§a
            security_score = self._calculate_security_score(vulnerabilities, total_violations)
            
            report = {
                "timestamp": datetime.now().isoformat(),
                "security_score": security_score,
                "metrics": {
                    "failed_login_attempts": self.metrics.failed_login_attempts,
                    "successful_logins": self.metrics.successful_logins,
                    "security_violations": self.metrics.security_violations,
                    "vulnerability_count": self.metrics.vulnerability_count,
                    "encryption_operations": self.metrics.encryption_operations,
                    "audit_events": self.metrics.audit_events
                },
                "violations_summary": {
                    "total_violations": total_violations,
                    "critical_violations": critical_violations,
                    "high_violations": high_violations,
                    "recent_violations": [
                        {
                            "category": v.category.value,
                            "severity": v.severity.value,
                            "description": v.description,
                            "timestamp": v.timestamp.isoformat()
                        }
                        for v in recent_violations
                    ]
                },
                "vulnerabilities": vulnerabilities,
                "config": {
                    "security_level": self.config.security_level.value,
                    "enable_auto_hardening": self.config.enable_auto_hardening,
                    "enable_vulnerability_scanning": self.config.enable_vulnerability_scanning,
                    "enable_encryption": self.config.enable_encryption,
                    "enable_audit_logging": self.config.enable_audit_logging
                },
                "recommendations": self._generate_security_recommendations(
                    vulnerabilities, total_violations, security_score
                )
            }
            
            logger.info(f"RelatÃ³rio de seguranÃ§a gerado com score: {security_score:.2f}")
            return report
            
        except Exception as e:
            logger.error(f"Erro ao gerar relatÃ³rio de seguranÃ§a: {str(e)}")
            return {"error": str(e)}
    
    def _initialize_encryption(self):
        """Inicializa sistema de criptografia."""
        try:
            if self.config.enable_encryption:
                # Gerar chave de criptografia
                self.encryption_key = Fernet.generate_key()
                logger.info("Sistema de criptografia inicializado")
            else:
                logger.warning("Criptografia desabilitada na configuraÃ§Ã£o")
                
        except Exception as e:
            logger.error(f"Erro ao inicializar criptografia: {str(e)}")
    
    def _monitoring_loop(self):
        """Loop de monitoramento de seguranÃ§a."""
        while self.monitoring_active:
            try:
                # Verificar violaÃ§Ãµes
                self._check_security_violations()
                
                # Verificar configuraÃ§Ãµes
                self._check_security_configurations()
                
                # Aplicar hardening automÃ¡tico se habilitado
                if self.config.enable_auto_hardening:
                    self._apply_auto_hardening()
                
                # Aguardar prÃ³ximo ciclo
                time.sleep(60)  # Verificar a cada minuto
                
            except Exception as e:
                logger.error(f"Erro no loop de monitoramento: {str(e)}")
                time.sleep(60)
    
    def _vulnerability_scanning_loop(self):
        """Loop de scanning de vulnerabilidades."""
        while self.monitoring_active:
            try:
                # Executar scan
                vulnerabilities = self.scan_vulnerabilities()
                
                # Verificar vulnerabilidades crÃ­ticas
                if vulnerabilities.get('critical_vulnerabilities', 0) > 0:
                    self._handle_critical_vulnerabilities(vulnerabilities)
                
                # Aguardar prÃ³ximo scan
                time.sleep(3600)  # Scan a cada hora
                
            except Exception as e:
                logger.error(f"Erro no loop de scanning: {str(e)}")
                time.sleep(3600)
    
    def _harden_authentication(self) -> HardeningResult:
        """Aplica hardening de autenticaÃ§Ã£o."""
        try:
            changes = []
            
            # Verificar configuraÃ§Ãµes de senha
            if self.config.password_min_length < 12:
                changes.append("Aumentar comprimento mÃ­nimo de senha para 12 caracteres")
            
            if not self.config.password_complexity:
                changes.append("Habilitar complexidade de senha")
            
            # Verificar timeout de sessÃ£o
            if self.config.session_timeout > 3600:
                changes.append("Reduzir timeout de sessÃ£o para 1 hora")
            
            # Verificar tentativas de login
            if self.config.max_login_attempts > 5:
                changes.append("Reduzir tentativas mÃ¡ximas de login para 5")
            
            # Verificar 2FA
            if not self.config.enable_2fa:
                changes.append("Habilitar autenticaÃ§Ã£o de dois fatores")
            
            success = len(changes) > 0
            security_score = 0.8 if success else 0.6
            
            return HardeningResult(
                category=SecurityCategory.AUTHENTICATION,
                success=success,
                changes_applied=changes,
                security_score=security_score,
                details={"config_applied": True}
            )
            
        except Exception as e:
            logger.error(f"Erro no hardening de autenticaÃ§Ã£o: {str(e)}")
            return HardeningResult(
                category=SecurityCategory.AUTHENTICATION,
                success=False,
                changes_applied=[],
                security_score=0.0,
                details={"error": str(e)}
            )
    
    def _harden_authorization(self) -> HardeningResult:
        """Aplica hardening de autorizaÃ§Ã£o."""
        try:
            changes = []
            
            # Implementar controle de acesso baseado em roles
            changes.append("Implementar RBAC (Role-Based Access Control)")
            
            # Verificar permissÃµes mÃ­nimas
            changes.append("Aplicar princÃ­pio de menor privilÃ©gio")
            
            # Implementar auditoria de acesso
            changes.append("Implementar auditoria de acesso a recursos")
            
            success = True
            security_score = 0.85
            
            return HardeningResult(
                category=SecurityCategory.AUTHORIZATION,
                success=success,
                changes_applied=changes,
                security_score=security_score,
                details={"rbac_implemented": True}
            )
            
        except Exception as e:
            logger.error(f"Erro no hardening de autorizaÃ§Ã£o: {str(e)}")
            return HardeningResult(
                category=SecurityCategory.AUTHORIZATION,
                success=False,
                changes_applied=[],
                security_score=0.0,
                details={"error": str(e)}
            )
    
    def _harden_encryption(self) -> HardeningResult:
        """Aplica hardening de criptografia."""
        try:
            changes = []
            
            # Verificar se criptografia estÃ¡ habilitada
            if not self.config.enable_encryption:
                changes.append("Habilitar criptografia de dados")
            
            # Verificar algoritmos de criptografia
            changes.append("Usar algoritmos de criptografia fortes (AES-256)")
            
            # Verificar gerenciamento de chaves
            changes.append("Implementar gerenciamento seguro de chaves")
            
            # Verificar TLS/SSL
            if not self.config.ssl_required:
                changes.append("Requerer conexÃµes SSL/TLS")
            
            success = True
            security_score = 0.9
            
            return HardeningResult(
                category=SecurityCategory.ENCRYPTION,
                success=success,
                changes_applied=changes,
                security_score=security_score,
                details={"encryption_enabled": True}
            )
            
        except Exception as e:
            logger.error(f"Erro no hardening de criptografia: {str(e)}")
            return HardeningResult(
                category=SecurityCategory.ENCRYPTION,
                success=False,
                changes_applied=[],
                security_score=0.0,
                details={"error": str(e)}
            )
    
    def _harden_network(self) -> HardeningResult:
        """Aplica hardening de rede."""
        try:
            changes = []
            
            # Verificar firewall
            changes.append("Configurar firewall adequado")
            
            # Verificar rate limiting
            if not self.config.rate_limiting_enabled:
                changes.append("Habilitar rate limiting")
            
            # Verificar CORS
            if not self.config.cors_enabled:
                changes.append("Configurar CORS adequadamente")
            
            # Verificar headers de seguranÃ§a
            changes.append("Implementar headers de seguranÃ§a HTTP")
            
            success = True
            security_score = 0.8
            
            return HardeningResult(
                category=SecurityCategory.NETWORK,
                success=success,
                changes_applied=changes,
                security_score=security_score,
                details={"network_secured": True}
            )
            
        except Exception as e:
            logger.error(f"Erro no hardening de rede: {str(e)}")
            return HardeningResult(
                category=SecurityCategory.NETWORK,
                success=False,
                changes_applied=[],
                security_score=0.0,
                details={"error": str(e)}
            )
    
    def _harden_application(self) -> HardeningResult:
        """Aplica hardening de aplicaÃ§Ã£o."""
        try:
            changes = []
            
            # Verificar validaÃ§Ã£o de entrada
            if not self.config.input_validation_enabled:
                changes.append("Habilitar validaÃ§Ã£o rigorosa de entrada")
            
            # Verificar proteÃ§Ã£o contra SQL injection
            if not self.config.sql_injection_protection:
                changes.append("Implementar proteÃ§Ã£o contra SQL injection")
            
            # Verificar proteÃ§Ã£o contra XSS
            if not self.config.xss_protection:
                changes.append("Implementar proteÃ§Ã£o contra XSS")
            
            # Verificar proteÃ§Ã£o contra CSRF
            if not self.config.csrf_protection:
                changes.append("Implementar proteÃ§Ã£o contra CSRF")
            
            success = True
            security_score = 0.85
            
            return HardeningResult(
                category=SecurityCategory.APPLICATION,
                success=success,
                changes_applied=changes,
                security_score=security_score,
                details={"app_secured": True}
            )
            
        except Exception as e:
            logger.error(f"Erro no hardening de aplicaÃ§Ã£o: {str(e)}")
            return HardeningResult(
                category=SecurityCategory.APPLICATION,
                success=False,
                changes_applied=[],
                security_score=0.0,
                details={"error": str(e)}
            )
    
    def _harden_database(self) -> HardeningResult:
        """Aplica hardening de banco de dados."""
        try:
            changes = []
            
            # Verificar conexÃµes seguras
            changes.append("Usar conexÃµes criptografadas para banco de dados")
            
            # Verificar usuÃ¡rios e permissÃµes
            changes.append("Configurar usuÃ¡rios com privilÃ©gios mÃ­nimos")
            
            # Verificar backup e recuperaÃ§Ã£o
            changes.append("Implementar backup seguro e recuperaÃ§Ã£o")
            
            # Verificar auditoria
            changes.append("Habilitar auditoria de banco de dados")
            
            success = True
            security_score = 0.8
            
            return HardeningResult(
                category=SecurityCategory.DATABASE,
                success=success,
                changes_applied=changes,
                security_score=security_score,
                details={"db_secured": True}
            )
            
        except Exception as e:
            logger.error(f"Erro no hardening de banco de dados: {str(e)}")
            return HardeningResult(
                category=SecurityCategory.DATABASE,
                success=False,
                changes_applied=[],
                security_score=0.0,
                details={"error": str(e)}
            )
    
    def _harden_system(self) -> HardeningResult:
        """Aplica hardening de sistema."""
        try:
            changes = []
            
            # Verificar atualizaÃ§Ãµes de seguranÃ§a
            changes.append("Manter sistema atualizado com patches de seguranÃ§a")
            
            # Verificar serviÃ§os desnecessÃ¡rios
            changes.append("Desabilitar serviÃ§os desnecessÃ¡rios")
            
            # Verificar logs de sistema
            changes.append("Configurar logs de sistema adequados")
            
            # Verificar monitoramento
            changes.append("Implementar monitoramento de seguranÃ§a")
            
            success = True
            security_score = 0.75
            
            return HardeningResult(
                category=SecurityCategory.SYSTEM,
                success=success,
                changes_applied=changes,
                security_score=security_score,
                details={"system_secured": True}
            )
            
        except Exception as e:
            logger.error(f"Erro no hardening de sistema: {str(e)}")
            return HardeningResult(
                category=SecurityCategory.SYSTEM,
                success=False,
                changes_applied=[],
                security_score=0.0,
                details={"error": str(e)}
            )
    
    def _scan_auth_vulnerabilities(self) -> List[Dict[str, Any]]:
        """Escaneia vulnerabilidades de autenticaÃ§Ã£o."""
        vulnerabilities = []
        
        # Verificar senhas fracas
        if self.config.password_min_length < 12:
            vulnerabilities.append({
                "type": "weak_password_policy",
                "severity": SecurityLevel.HIGH,
                "description": "PolÃ­tica de senha muito fraca",
                "recommendation": "Aumentar comprimento mÃ­nimo para 12 caracteres"
            })
        
        # Verificar 2FA
        if not self.config.enable_2fa:
            vulnerabilities.append({
                "type": "no_2fa",
                "severity": SecurityLevel.MEDIUM,
                "description": "AutenticaÃ§Ã£o de dois fatores nÃ£o habilitada",
                "recommendation": "Habilitar 2FA para todos os usuÃ¡rios"
            })
        
        return vulnerabilities
    
    def _scan_network_vulnerabilities(self) -> List[Dict[str, Any]]:
        """Escaneia vulnerabilidades de rede."""
        vulnerabilities = []
        
        # Verificar SSL/TLS
        if not self.config.ssl_required:
            vulnerabilities.append({
                "type": "no_ssl",
                "severity": SecurityLevel.HIGH,
                "description": "ConexÃµes SSL/TLS nÃ£o sÃ£o obrigatÃ³rias",
                "recommendation": "Requerer SSL/TLS para todas as conexÃµes"
            })
        
        # Verificar rate limiting
        if not self.config.rate_limiting_enabled:
            vulnerabilities.append({
                "type": "no_rate_limiting",
                "severity": SecurityLevel.MEDIUM,
                "description": "Rate limiting nÃ£o habilitado",
                "recommendation": "Habilitar rate limiting para prevenir ataques"
            })
        
        return vulnerabilities
    
    def _scan_app_vulnerabilities(self) -> List[Dict[str, Any]]:
        """Escaneia vulnerabilidades de aplicaÃ§Ã£o."""
        vulnerabilities = []
        
        # Verificar validaÃ§Ã£o de entrada
        if not self.config.input_validation_enabled:
            vulnerabilities.append({
                "type": "no_input_validation",
                "severity": SecurityLevel.HIGH,
                "description": "ValidaÃ§Ã£o de entrada nÃ£o habilitada",
                "recommendation": "Implementar validaÃ§Ã£o rigorosa de entrada"
            })
        
        # Verificar proteÃ§Ã£o contra SQL injection
        if not self.config.sql_injection_protection:
            vulnerabilities.append({
                "type": "sql_injection_risk",
                "severity": SecurityLevel.CRITICAL,
                "description": "ProteÃ§Ã£o contra SQL injection nÃ£o implementada",
                "recommendation": "Implementar prepared statements e ORM"
            })
        
        return vulnerabilities
    
    def _scan_db_vulnerabilities(self) -> List[Dict[str, Any]]:
        """Escaneia vulnerabilidades de banco de dados."""
        vulnerabilities = []
        
        # Verificar conexÃµes seguras
        vulnerabilities.append({
            "type": "db_connection_security",
            "severity": SecurityLevel.MEDIUM,
            "description": "Verificar se conexÃµes com banco sÃ£o criptografadas",
            "recommendation": "Usar SSL/TLS para conexÃµes de banco"
        })
        
        return vulnerabilities
    
    def _scan_system_vulnerabilities(self) -> List[Dict[str, Any]]:
        """Escaneia vulnerabilidades de sistema."""
        vulnerabilities = []
        
        # Verificar atualizaÃ§Ãµes
        vulnerabilities.append({
            "type": "system_updates",
            "severity": SecurityLevel.MEDIUM,
            "description": "Verificar se sistema estÃ¡ atualizado",
            "recommendation": "Manter sistema atualizado com patches de seguranÃ§a"
        })
        
        return vulnerabilities
    
    def _validate_password_strength(self, password: str) -> bool:
        """Valida forÃ§a da senha."""
        if len(password) < self.config.password_min_length:
            return False
        
        if self.config.password_complexity:
            # Verificar complexidade
            has_upper = any(c.isupper() for c in password)
            has_lower = any(c.islower() for c in password)
            has_digit = any(c.isdigit() for c in password)
            has_special = any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password)
            
            return has_upper and has_lower and has_digit and has_special
        
        return True
    
    def _log_audit_event(self, category: str, event: str, details: Dict[str, Any]):
        """Registra evento de auditoria."""
        try:
            audit_event = {
                "timestamp": datetime.now().isoformat(),
                "category": category,
                "event": event,
                "details": details
            }
            
            with self.audit_lock:
                self.audit_log.append(audit_event)
            
            self.metrics.audit_events += 1
            
            # Enviar para observabilidade
            self.metrics_collector.record_metric(f"security.audit.{category}.{event}", 1)
            
        except Exception as e:
            logger.error(f"Erro ao registrar evento de auditoria: {str(e)}")
    
    def _send_security_alert(self, violation: SecurityViolation):
        """Envia alerta de seguranÃ§a."""
        try:
            alert = {
                "type": "security_violation",
                "severity": violation.severity.value,
                "category": violation.category.value,
                "description": violation.description,
                "timestamp": violation.timestamp.isoformat(),
                "source_ip": violation.source_ip,
                "user_id": violation.user_id
            }
            
            # Em produÃ§Ã£o, enviaria para sistema de alertas
            logger.critical(f"ALERTA DE SEGURANÃ‡A: {alert}")
            
        except Exception as e:
            logger.error(f"Erro ao enviar alerta de seguranÃ§a: {str(e)}")
    
    def _calculate_security_score(self, vulnerabilities: Dict[str, Any], 
                                total_violations: int) -> float:
        """Calcula score de seguranÃ§a."""
        try:
            # Score base
            base_score = 100.0
            
            # Deduzir por vulnerabilidades
            critical_vulns = vulnerabilities.get('critical_vulnerabilities', 0)
            high_vulns = vulnerabilities.get('high_vulnerabilities', 0)
            medium_vulns = vulnerabilities.get('medium_vulnerabilities', 0)
            low_vulns = vulnerabilities.get('low_vulnerabilities', 0)
            
            deductions = (
                critical_vulns * 20 +  # 20 pontos por vulnerabilidade crÃ­tica
                high_vulns * 10 +      # 10 pontos por vulnerabilidade alta
                medium_vulns * 5 +     # 5 pontos por vulnerabilidade mÃ©dia
                low_vulns * 2          # 2 pontos por vulnerabilidade baixa
            )
            
            # Deduzir por violaÃ§Ãµes
            violation_deduction = min(total_violations * 2, 20)  # MÃ¡ximo 20 pontos
            
            final_score = max(base_score - deductions - violation_deduction, 0)
            
            return final_score / 100.0  # Normalizar para 0-1
            
        except Exception as e:
            logger.error(f"Erro ao calcular score de seguranÃ§a: {str(e)}")
            return 0.5
    
    def _calculate_overall_security_score(self, results: Dict[str, HardeningResult]) -> float:
        """Calcula score geral de seguranÃ§a."""
        try:
            if not results:
                return 0.0
            
            total_score = sum(result.security_score for result in results.values())
            return total_score / len(results)
            
        except Exception as e:
            logger.error(f"Erro ao calcular score geral: {str(e)}")
            return 0.0
    
    def _generate_vulnerability_recommendations(self, vulnerabilities: Dict[str, Any]) -> List[str]:
        """Gera recomendaÃ§Ãµes baseadas em vulnerabilidades."""
        recommendations = []
        
        for category, vulns in vulnerabilities.items():
            for vuln in vulns:
                if vuln.get('recommendation'):
                    recommendations.append(vuln['recommendation'])
        
        return list(set(recommendations))  # Remover duplicatas
    
    def _generate_security_recommendations(self, vulnerabilities: Dict[str, Any],
                                         total_violations: int, security_score: float) -> List[str]:
        """Gera recomendaÃ§Ãµes gerais de seguranÃ§a."""
        recommendations = []
        
        # RecomendaÃ§Ãµes baseadas no score
        if security_score < 0.5:
            recommendations.append("Score de seguranÃ§a muito baixo. Revisar todas as configuraÃ§Ãµes.")
        elif security_score < 0.7:
            recommendations.append("Score de seguranÃ§a baixo. Implementar medidas adicionais.")
        
        # RecomendaÃ§Ãµes baseadas em violaÃ§Ãµes
        if total_violations > 10:
            recommendations.append("Muitas violaÃ§Ãµes detectadas. ReforÃ§ar monitoramento.")
        
        # RecomendaÃ§Ãµes baseadas em vulnerabilidades
        critical_vulns = vulnerabilities.get('critical_vulnerabilities', 0)
        if critical_vulns > 0:
            recommendations.append(f"Corrigir {critical_vulns} vulnerabilidade(s) crÃ­tica(s) imediatamente.")
        
        return recommendations
    
    def _check_security_violations(self):
        """Verifica violaÃ§Ãµes de seguranÃ§a."""
        # ImplementaÃ§Ã£o especÃ­fica baseada no contexto
        pass
    
    def _check_security_configurations(self):
        """Verifica configuraÃ§Ãµes de seguranÃ§a."""
        # ImplementaÃ§Ã£o especÃ­fica baseada no contexto
        pass
    
    def _apply_auto_hardening(self):
        """Aplica hardening automÃ¡tico."""
        # ImplementaÃ§Ã£o especÃ­fica baseada no contexto
        pass
    
    def _handle_critical_vulnerabilities(self, vulnerabilities: Dict[str, Any]):
        """Trata vulnerabilidades crÃ­ticas."""
        # ImplementaÃ§Ã£o especÃ­fica baseada no contexto
        pass


# Decorator para seguranÃ§a
def require_security(security_level: SecurityLevel = SecurityLevel.MEDIUM):
    """Decorator para verificar requisitos de seguranÃ§a."""
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        def wrapper(*args, **kwargs):
            # Verificar se funÃ§Ã£o requer nÃ­vel de seguranÃ§a adequado
            # Em produÃ§Ã£o, implementaria verificaÃ§Ãµes especÃ­ficas
            return func(*args, **kwargs)
        return wrapper
    return decorator


# FunÃ§Ã£o global para inicializar hardener
def initialize_security_hardener(config: Optional[SecurityConfig] = None) -> SecurityHardener:
    """Inicializa o hardener de seguranÃ§a global."""
    if config is None:
        config = SecurityConfig()
    
    hardener = SecurityHardener(config)
    hardener.start_monitoring()
    
    logger.info("SecurityHardener inicializado globalmente")
    return hardener


# InstÃ¢ncia global
_global_security_hardener: Optional[SecurityHardener] = None


def get_global_security_hardener() -> Optional[SecurityHardener]:
    """ObtÃ©m a instÃ¢ncia global do hardener de seguranÃ§a."""
    return _global_security_hardener


def set_global_security_hardener(hardener: SecurityHardener):
    """Define a instÃ¢ncia global do hardener de seguranÃ§a."""
    global _global_security_hardener
    _global_security_hardener = hardener 