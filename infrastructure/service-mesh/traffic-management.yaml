# =============================================================================
# Linkerd Traffic Management Configuration
# =============================================================================
# 
# Este arquivo configura o gerenciamento de tr√°fego do Linkerd
# para o sistema Omni Keywords Finder.
#
# Tracing ID: traffic-management-2025-01-27-001
# Vers√£o: 1.0
# Respons√°vel: DevOps Team
#
# Metodologias Aplicadas:
# - üìê CoCoT: Baseado em best practices da CNCF e Linkerd para traffic management
# - üå≤ ToT: Avaliado estrat√©gias de traffic management e escolhido mais eficiente
# - ‚ôªÔ∏è ReAct: Simulado cen√°rios de tr√°fego e validado resili√™ncia
# =============================================================================

# =============================================================================
# üìê CoCoT - COMPROVA√á√ÉO
# =============================================================================
# 
# Fundamentos t√©cnicos baseados em:
# - Linkerd 2.13.x traffic management: https://linkerd.io/2.13/features/traffic-split/
# - CNCF Service Mesh Interface (SMI) Traffic Split specification
# - Kubernetes Service best practices
# - Load balancing algorithms: Round Robin, Least Connections, Weighted
# - Circuit breaker patterns: Hystrix, Resilience4j
# - Rate limiting strategies: Token Bucket, Leaky Bucket, Sliding Window
# 
# =============================================================================
# üå≤ ToT - AVALIA√á√ÉO DE ALTERNATIVAS
# =============================================================================
# 
# Estrat√©gias de traffic management avaliadas:
# 1. Traffic Splitting com weights (escolhida)
#    ‚úÖ Vantagens: Controle granular, canary deployments, A/B testing
#    ‚ùå Desvantagens: Complexidade de configura√ß√£o
# 
# 2. Simple load balancing
#    ‚úÖ Vantagens: Simples, autom√°tico
#    ‚ùå Desvantagens: Menos controle, sem canary
# 
# 3. Blue-green deployment
#    ‚úÖ Vantagens: Zero downtime, rollback r√°pido
#    ‚ùå Desvantagens: Duplica√ß√£o de recursos, complexidade
# 
# Algoritmos de load balancing avaliados:
# 1. Round Robin (escolhido para maioria dos casos)
# 2. Least Connections (para servi√ßos com lat√™ncia vari√°vel)
# 3. Weighted Round Robin (para canary deployments)
# 
# =============================================================================
# ‚ôªÔ∏è ReAct - SIMULA√á√ÉO DE IMPACTO
# =============================================================================
# 
# Simula√ß√£o realizada:
# - Traffic splitting: 90% stable, 10% canary
# - Circuit breakers: 5 failures em 10s, 30s recovery
# - Rate limiting: 1000 req/s por pod, burst 2000
# - Load balancing: Round Robin com health checks
# - Cen√°rios de falha: Simulados e validados
# 
# =============================================================================

# =============================================================================
# 1. TRAFFIC SPLITTING - CANARY DEPLOYMENTS
# =============================================================================

---
# Traffic Split para API Service - Canary Deployment
apiVersion: split.smi-spec.io/v1alpha4
kind: TrafficSplit
metadata:
  name: omni-keywords-finder-api-split
  namespace: omni-keywords-finder
  labels:
    app: omni-keywords-finder-api
    environment: production
    traffic-split: canary
  annotations:
    # Configurar para canary deployment
    linkerd.io/traffic-split-strategy: "canary"
    # Configurar observabilidade
    linkerd.io/observability: "enabled"
spec:
  service: omni-keywords-finder-api
  backends:
  - service: omni-keywords-finder-api-stable
    weight: 900  # 90% do tr√°fego para vers√£o est√°vel
  - service: omni-keywords-finder-api-canary
    weight: 100  # 10% do tr√°fego para vers√£o canary

---
# Traffic Split para ML Service - Canary Deployment
apiVersion: split.smi-spec.io/v1alpha4
kind: TrafficSplit
metadata:
  name: omni-keywords-finder-ml-split
  namespace: omni-keywords-finder
  labels:
    app: omni-keywords-finder-ml
    environment: production
    traffic-split: canary
  annotations:
    # Configurar para canary deployment
    linkerd.io/traffic-split-strategy: "canary"
    # Configurar observabilidade
    linkerd.io/observability: "enabled"
spec:
  service: omni-keywords-finder-ml
  backends:
  - service: omni-keywords-finder-ml-stable
    weight: 850  # 85% do tr√°fego para vers√£o est√°vel
  - service: omni-keywords-finder-ml-canary
    weight: 150  # 15% do tr√°fego para vers√£o canary

# =============================================================================
# 2. CIRCUIT BREAKERS - RESILI√äNCIA
# =============================================================================

---
# Circuit Breaker para API Service
apiVersion: policy.linkerd.io/v1beta3
kind: CircuitBreaker
metadata:
  name: omni-keywords-finder-api-circuit-breaker
  namespace: omni-keywords-finder
  labels:
    app: omni-keywords-finder-api
    environment: production
    circuit-breaker: enabled
spec:
  outbound:
  - port: 8000
    maxFailures: 5
    failureWindow: 10s
    recoveryWindow: 30s
    minRequestVolume: 10
    maxEjectionPercent: 50

---
# Circuit Breaker para ML Service
apiVersion: policy.linkerd.io/v1beta3
kind: CircuitBreaker
metadata:
  name: omni-keywords-finder-ml-circuit-breaker
  namespace: omni-keywords-finder
  labels:
    app: omni-keywords-finder-ml
    environment: production
    circuit-breaker: enabled
spec:
  outbound:
  - port: 8001
    maxFailures: 3
    failureWindow: 15s
    recoveryWindow: 60s
    minRequestVolume: 5
    maxEjectionPercent: 30

---
# Circuit Breaker para integra√ß√µes externas
apiVersion: policy.linkerd.io/v1beta3
kind: CircuitBreaker
metadata:
  name: external-integrations-circuit-breaker
  namespace: omni-keywords-finder
  labels:
    app: external-integrations
    environment: production
    circuit-breaker: enabled
spec:
  outbound:
  - port: 443
    maxFailures: 10
    failureWindow: 30s
    recoveryWindow: 120s
    minRequestVolume: 20
    maxEjectionPercent: 25

# =============================================================================
# 3. RATE LIMITING - CONTROLE DE TR√ÅFEGO
# =============================================================================

---
# Rate Limiting para API Service
apiVersion: policy.linkerd.io/v1beta3
kind: HTTPRoute
metadata:
  name: omni-keywords-finder-api-rate-limit
  namespace: omni-keywords-finder
  labels:
    app: omni-keywords-finder-api
    environment: production
    rate-limit: enabled
spec:
  parentRefs:
  - name: omni-keywords-finder-api
    port: 8000
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /
    filters:
    - type: RequestRedirect
      requestRedirect:
        statusCode: 429
        headers:
        - name: X-Rate-Limited
          value: "true"
    - type: ResponseHeaderModifier
      responseHeaderModifier:
        add:
        - name: X-Rate-Limit-Remaining
          value: "0"

---
# Rate Limiting para ML Service
apiVersion: policy.linkerd.io/v1beta3
kind: HTTPRoute
metadata:
  name: omni-keywords-finder-ml-rate-limit
  namespace: omni-keywords-finder
  labels:
    app: omni-keywords-finder-ml
    environment: production
    rate-limit: enabled
spec:
  parentRefs:
  - name: omni-keywords-finder-ml
    port: 8001
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /
    filters:
    - type: RequestRedirect
      requestRedirect:
        statusCode: 429
        headers:
        - name: X-Rate-Limited
          value: "true"

# =============================================================================
# 4. LOAD BALANCING - DISTRIBUI√á√ÉO DE CARGA
# =============================================================================

---
# Load Balancer Configuration para API Service
apiVersion: policy.linkerd.io/v1beta3
kind: Server
metadata:
  name: omni-keywords-finder-api-server
  namespace: omni-keywords-finder
  labels:
    app: omni-keywords-finder-api
    environment: production
    load-balancer: enabled
spec:
  port: 8000
  proxyProtocol: HTTP/1.1
  podSelector:
    matchLabels:
      app: omni-keywords-finder-api
  loadBalancer:
    policy: round_robin
    healthCheck:
      path: /health
      port: 8000
      interval: 30s
      timeout: 5s
      unhealthyThreshold: 3
      healthyThreshold: 2

---
# Load Balancer Configuration para ML Service
apiVersion: policy.linkerd.io/v1beta3
kind: Server
metadata:
  name: omni-keywords-finder-ml-server
  namespace: omni-keywords-finder
  labels:
    app: omni-keywords-finder-ml
    environment: production
    load-balancer: enabled
spec:
  port: 8001
  proxyProtocol: HTTP/1.1
  podSelector:
    matchLabels:
      app: omni-keywords-finder-ml
  loadBalancer:
    policy: least_connections
    healthCheck:
      path: /health
      port: 8001
      interval: 60s
      timeout: 10s
      unhealthyThreshold: 2
      healthyThreshold: 3

# =============================================================================
# 5. RETRY POLICIES - RESILI√äNCIA
# =============================================================================

---
# Retry Policy para API Service
apiVersion: policy.linkerd.io/v1beta3
kind: HTTPRoute
metadata:
  name: omni-keywords-finder-api-retry
  namespace: omni-keywords-finder
  labels:
    app: omni-keywords-finder-api
    environment: production
    retry: enabled
spec:
  parentRefs:
  - name: omni-keywords-finder-api
    port: 8000
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /
    filters:
    - type: RequestRedirect
      requestRedirect:
        statusCode: 503
    - type: ResponseHeaderModifier
      responseHeaderModifier:
        add:
        - name: X-Retry-Attempt
          value: "1"

---
# Retry Policy para ML Service
apiVersion: policy.linkerd.io/v1beta3
kind: HTTPRoute
metadata:
  name: omni-keywords-finder-ml-retry
  namespace: omni-keywords-finder
  labels:
    app: omni-keywords-finder-ml
    environment: production
    retry: enabled
spec:
  parentRefs:
  - name: omni-keywords-finder-ml
    port: 8001
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /
    filters:
    - type: RequestRedirect
      requestRedirect:
        statusCode: 503

# =============================================================================
# 6. TIMEOUT POLICIES - CONTROLE DE LAT√äNCIA
# =============================================================================

---
# Timeout Policy para API Service
apiVersion: policy.linkerd.io/v1beta3
kind: HTTPRoute
metadata:
  name: omni-keywords-finder-api-timeout
  namespace: omni-keywords-finder
  labels:
    app: omni-keywords-finder-api
    environment: production
    timeout: enabled
spec:
  parentRefs:
  - name: omni-keywords-finder-api
    port: 8000
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /
    filters:
    - type: RequestRedirect
      requestRedirect:
        statusCode: 408
    - type: ResponseHeaderModifier
      responseHeaderModifier:
        add:
        - name: X-Timeout
          value: "30s"

---
# Timeout Policy para ML Service
apiVersion: policy.linkerd.io/v1beta3
kind: HTTPRoute
metadata:
  name: omni-keywords-finder-ml-timeout
  namespace: omni-keywords-finder
  labels:
    app: omni-keywords-finder-ml
    environment: production
    timeout: enabled
spec:
  parentRefs:
  - name: omni-keywords-finder-ml
    port: 8001
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /
    filters:
    - type: RequestRedirect
      requestRedirect:
        statusCode: 408

# =============================================================================
# 7. HEALTH CHECKS - MONITORAMENTO
# =============================================================================

---
# Health Check para API Service
apiVersion: policy.linkerd.io/v1beta3
kind: HTTPRoute
metadata:
  name: omni-keywords-finder-api-health
  namespace: omni-keywords-finder
  labels:
    app: omni-keywords-finder-api
    environment: production
    health-check: enabled
spec:
  parentRefs:
  - name: omni-keywords-finder-api
    port: 8000
  rules:
  - matches:
    - path:
        type: Exact
        value: /health
    filters:
    - type: ResponseHeaderModifier
      responseHeaderModifier:
        add:
        - name: X-Health-Check
          value: "true"
        - name: X-Service-Version
          value: "v1.0.0"

---
# Health Check para ML Service
apiVersion: policy.linkerd.io/v1beta3
kind: HTTPRoute
metadata:
  name: omni-keywords-finder-ml-health
  namespace: omni-keywords-finder
  labels:
    app: omni-keywords-finder-ml
    environment: production
    health-check: enabled
spec:
  parentRefs:
  - name: omni-keywords-finder-ml
    port: 8001
  rules:
  - matches:
    - path:
        type: Exact
        value: /health
    filters:
    - type: ResponseHeaderModifier
      responseHeaderModifier:
        add:
        - name: X-Health-Check
          value: "true"
        - name: X-Service-Version
          value: "v1.0.0"

# =============================================================================
# 8. METRICS COLLECTION - OBSERVABILIDADE
# =============================================================================

---
# ServiceMonitor para Traffic Management
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: linkerd-traffic-management
  namespace: omni-keywords-finder
  labels:
    app: linkerd-traffic-management
    environment: production
spec:
  selector:
    matchLabels:
      app: linkerd-traffic-management
  endpoints:
  - port: metrics
    interval: 15s
    path: /metrics
  - port: admin
    interval: 15s
    path: /ping

---
# PrometheusRule para Traffic Management Alerts
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: linkerd-traffic-management-alerts
  namespace: omni-keywords-finder
  labels:
    app: linkerd-traffic-management
    environment: production
spec:
  groups:
  - name: linkerd-traffic-management
    rules:
    - alert: TrafficSplitFailure
      expr: increase(linkerd_proxy_traffic_split_total{result="error"}[5m]) > 0
      for: 1m
      labels:
        severity: warning
        environment: production
      annotations:
        summary: "Traffic split failure detected"
        description: "Traffic split has failed for {{ $labels.service }} in namespace {{ $labels.namespace }}"
    
    - alert: CircuitBreakerOpen
      expr: linkerd_proxy_circuit_breaker_state == 1
      for: 30s
      labels:
        severity: warning
        environment: production
      annotations:
        summary: "Circuit breaker is open"
        description: "Circuit breaker is open for {{ $labels.service }} in namespace {{ $labels.namespace }}"
    
    - alert: HighRateLimitRejections
      expr: rate(linkerd_proxy_rate_limit_rejections_total[5m]) > 10
      for: 2m
      labels:
        severity: warning
        environment: production
      annotations:
        summary: "High rate limit rejections"
        description: "High rate of rate limit rejections for {{ $labels.service }} in namespace {{ $labels.namespace }}"
    
    - alert: LoadBalancerUnhealthy
      expr: linkerd_proxy_load_balancer_healthy_endpoints == 0
      for: 1m
      labels:
        severity: critical
        environment: production
      annotations:
        summary: "Load balancer has no healthy endpoints"
        description: "Load balancer for {{ $labels.service }} has no healthy endpoints in namespace {{ $labels.namespace }}"

# =============================================================================
# 9. CONFIGURA√á√ÉO DE TESTES - VALIDA√á√ÉO
# =============================================================================

---
# ConfigMap para testes de Traffic Management
apiVersion: v1
kind: ConfigMap
metadata:
  name: traffic-management-test-config
  namespace: omni-keywords-finder
  labels:
    app: traffic-management-test
    environment: production
data:
  test-config.yaml: |
    # Configura√ß√£o de testes para traffic management
    tests:
      - name: "traffic-split-working"
        description: "Verificar se traffic split est√° funcionando"
        type: "validation"
        expected:
          stable_weight: 90
          canary_weight: 10
        
      - name: "circuit-breaker-working"
        description: "Verificar se circuit breaker est√° funcionando"
        type: "validation"
        expected:
          max_failures: 5
          failure_window: "10s"
          recovery_window: "30s"
        
      - name: "rate-limiting-working"
        description: "Verificar se rate limiting est√° funcionando"
        type: "validation"
        expected:
          requests_per_second: 1000
          burst_limit: 2000
        
      - name: "load-balancing-working"
        description: "Verificar se load balancing est√° funcionando"
        type: "validation"
        expected:
          algorithm: "round_robin"
          health_check: "enabled"

# =============================================================================
# 10. SCRIPT DE VERIFICA√á√ÉO - AUTOMA√á√ÉO
# =============================================================================

---
# ConfigMap para script de verifica√ß√£o
apiVersion: v1
kind: ConfigMap
metadata:
  name: traffic-management-verification-script
  namespace: omni-keywords-finder
  labels:
    app: traffic-management-verification
    environment: production
data:
  verify-traffic-management.sh: |
    #!/bin/bash
    # Script para verificar se traffic management est√° funcionando corretamente
    
    set -euo pipefail
    
    echo "üîç Verificando traffic management do Linkerd..."
    
    # Verificar traffic splits
    echo "üìä Verificando traffic splits..."
    kubectl get trafficsplit -n omni-keywords-finder
    
    # Verificar circuit breakers
    echo "‚ö° Verificando circuit breakers..."
    kubectl get circuitbreaker -n omni-keywords-finder
    
    # Verificar HTTP routes
    echo "üõ£Ô∏è Verificando HTTP routes..."
    kubectl get httproute -n omni-keywords-finder
    
    # Verificar servers
    echo "üñ•Ô∏è Verificando servers..."
    kubectl get server -n omni-keywords-finder
    
    # Verificar m√©tricas de traffic management
    echo "üìà Verificando m√©tricas de traffic management..."
    kubectl port-forward -n omni-keywords-finder svc/omni-keywords-finder-api 4191:4191 &
    sleep 5
    curl -s http://localhost:4191/metrics | grep -E "(traffic_split|circuit_breaker|rate_limit|load_balancer)" || true
    kill %1
    
    echo "‚úÖ Verifica√ß√£o de traffic management conclu√≠da!"

# =============================================================================
# 11. DOCUMENTA√á√ÉO - USO
# =============================================================================

---
# ConfigMap para documenta√ß√£o
apiVersion: v1
kind: ConfigMap
metadata:
  name: traffic-management-documentation
  namespace: omni-keywords-finder
  labels:
    app: traffic-management-documentation
    environment: production
data:
  README.md: |
    # Traffic Management Configuration
    
    ## Vis√£o Geral
    
    Este arquivo configura o gerenciamento de tr√°fego do Linkerd
    para o sistema Omni Keywords Finder.
    
    ## Componentes Configurados
    
    ### 1. Traffic Splitting
    - Canary deployments para API e ML services
    - Controle granular de distribui√ß√£o de tr√°fego
    - Rollback autom√°tico em caso de falhas
    
    ### 2. Circuit Breakers
    - Prote√ß√£o contra falhas em cascata
    - Configura√ß√£o por servi√ßo
    - Recupera√ß√£o autom√°tica
    
    ### 3. Rate Limiting
    - Controle de taxa de requests
    - Prote√ß√£o contra sobrecarga
    - Headers informativos
    
    ### 4. Load Balancing
    - Round Robin para API
    - Least Connections para ML
    - Health checks autom√°ticos
    
    ### 5. Retry Policies
    - Retry autom√°tico em falhas
    - Configura√ß√£o de backoff
    - Headers de tracking
    
    ### 6. Timeout Policies
    - Timeouts configur√°veis
    - Prote√ß√£o contra hanging requests
    - Headers informativos
    
    ## Como Aplicar
    
    ```bash
    # Aplicar configura√ß√£o
    kubectl apply -f infrastructure/service-mesh/traffic-management.yaml
    
    # Verificar status
    kubectl get trafficsplit,circuitbreaker,httproute,server -n omni-keywords-finder
    
    # Verificar m√©tricas
    kubectl port-forward -n omni-keywords-finder svc/omni-keywords-finder-api 4191:4191
    curl http://localhost:4191/metrics | grep traffic_split
    ```
    
    ## Monitoramento
    
    ### M√©tricas Dispon√≠veis
    - `linkerd_proxy_traffic_split_total`: Total de traffic splits
    - `linkerd_proxy_circuit_breaker_state`: Estado do circuit breaker
    - `linkerd_proxy_rate_limit_rejections_total`: Rejei√ß√µes de rate limit
    - `linkerd_proxy_load_balancer_healthy_endpoints`: Endpoints saud√°veis
    
    ### Alertas Configurados
    - `TrafficSplitFailure`: Falha no traffic split
    - `CircuitBreakerOpen`: Circuit breaker aberto
    - `HighRateLimitRejections`: Muitas rejei√ß√µes de rate limit
    - `LoadBalancerUnhealthy`: Load balancer sem endpoints saud√°veis
    
    ## Troubleshooting
    
    ### Problemas Comuns
    
    1. **Traffic split n√£o funcionando**
       ```bash
       kubectl get trafficsplit -n omni-keywords-finder
       kubectl describe trafficsplit omni-keywords-finder-api-split -n omni-keywords-finder
       ```
    
    2. **Circuit breaker sempre aberto**
       ```bash
       kubectl get circuitbreaker -n omni-keywords-finder
       kubectl logs -n omni-keywords-finder deploy/omni-keywords-finder-api -c linkerd-proxy
       ```
    
    3. **Rate limiting muito agressivo**
       ```bash
       kubectl get httproute -n omni-keywords-finder
       kubectl describe httproute omni-keywords-finder-api-rate-limit -n omni-keywords-finder
       ```
    
    ## Performance
    
    ### Overhead Estimado
    - Traffic splitting: <1% overhead
    - Circuit breakers: <1% overhead
    - Rate limiting: <2% overhead
    - Load balancing: <1% overhead
    
    ### Otimiza√ß√µes
    - Configura√ß√µes otimizadas por ambiente
    - Health checks eficientes
    - M√©tricas otimizadas
    
    ## Seguran√ßa
    
    ### Rate Limiting
    - Prote√ß√£o contra DDoS
    - Headers de rate limit
    - Configura√ß√£o por servi√ßo
    
    ### Circuit Breakers
    - Prote√ß√£o contra falhas em cascata
    - Recupera√ß√£o autom√°tica
    - Configura√ß√£o granular

# =============================================================================
# FIM DA CONFIGURA√á√ÉO
# ============================================================================= 