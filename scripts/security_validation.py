"""
Script de Valida√ß√£o de Seguran√ßa Completa
Omni Keywords Finder - Sistema de Valida√ß√£o Enterprise-Grade

Tracing ID: SECURITY_VALIDATION_20250127_001
Data: 2025-01-27
Vers√£o: 1.0
Status: üî¥ CR√çTICO - Valida√ß√£o de Seguran√ßa

üìê CoCoT: Valida√ß√£o baseada em padr√µes enterprise de seguran√ßa
üå≤ ToT: M√∫ltiplas estrat√©gias de valida√ß√£o (scan, an√°lise, testes)
‚ôªÔ∏è ReAct: Simula√ß√£o de cen√°rios de ataque e valida√ß√£o de prote√ß√£o
üñºÔ∏è Visual: Relat√≥rios estruturados com m√©tricas de seguran√ßa

Funcionalidades:
- Scan completo de vulnerabilidades
- An√°lise est√°tica de seguran√ßa
- Testes de penetra√ß√£o automatizados
- Valida√ß√£o de compliance
- Relat√≥rios de seguran√ßa enterprise
- Detec√ß√£o de configura√ß√µes inseguras
- An√°lise de depend√™ncias de seguran√ßa
- Valida√ß√£o de criptografia
- Testes de autentica√ß√£o e autoriza√ß√£o
- An√°lise de logs de seguran√ßa
"""

import os
import sys
import json
import subprocess
import logging
import time
import hashlib
import hmac
import base64
import ssl
import socket
import requests
import yaml
import sqlite3
from datetime import datetime, timezone
from typing import Dict, List, Any, Optional, Tuple, Union
from pathlib import Path
import importlib
import importlib.util
import pkg_resources
from dataclasses import dataclass, asdict
from enum import Enum
import threading
import asyncio
from collections import defaultdict, deque
import re
import urllib.parse
import tempfile
import shutil

# Configura√ß√£o de logging estruturado
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/security_validation.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class SecurityLevel(Enum):
    """N√≠veis de seguran√ßa"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class ValidationStatus(Enum):
    """Status de valida√ß√£o"""
    PASSED = "passed"
    FAILED = "failed"
    WARNING = "warning"
    ERROR = "error"
    UNKNOWN = "unknown"

@dataclass
class SecurityVulnerability:
    """Vulnerabilidade de seguran√ßa"""
    id: str
    title: str
    description: str
    severity: SecurityLevel
    cve_id: Optional[str]
    cvss_score: Optional[float]
    affected_component: str
    remediation: str
    references: List[str]
    discovered_at: datetime

@dataclass
class SecurityValidationResult:
    """Resultado de valida√ß√£o de seguran√ßa"""
    timestamp: datetime
    total_checks: int
    passed_checks: int
    failed_checks: int
    warnings: int
    errors: int
    security_score: float
    vulnerabilities: List[SecurityVulnerability]
    recommendations: List[str]
    compliance_status: Dict[str, bool]
    execution_time: float

class SecurityValidator:
    """
    Validador de seguran√ßa enterprise-grade
    Baseado no c√≥digo real do sistema Omni Keywords Finder
    """
    
    def __init__(self, config_path: str = "config/security_validation.yaml"):
        """
        Inicializa o validador de seguran√ßa
        
        Args:
            config_path: Caminho para configura√ß√£o de valida√ß√£o
        """
        self.config_path = config_path
        self.config = self._load_config()
        
        # Configura√ß√µes de valida√ß√£o baseadas no c√≥digo real
        self.validation_config = {
            'vulnerability_scan': {
                'enabled': True,
                'tools': ['bandit', 'safety', 'pip-audit', 'snyk'],
                'severity_threshold': SecurityLevel.MEDIUM
            },
            'static_analysis': {
                'enabled': True,
                'tools': ['bandit', 'semgrep', 'codeql'],
                'rulesets': ['security', 'python', 'owasp']
            },
            'dependency_analysis': {
                'enabled': True,
                'critical_dependencies': [
                    'cryptography', 'pyjwt', 'bcrypt', 'redis', 
                    'requests', 'flask', 'sqlalchemy'
                ],
                'vulnerability_databases': ['nvd', 'osv', 'ghsa']
            },
            'configuration_validation': {
                'enabled': True,
                'checks': [
                    'ssl_configuration',
                    'authentication_config',
                    'authorization_config',
                    'encryption_config',
                    'logging_config'
                ]
            },
            'compliance_checks': {
                'enabled': True,
                'frameworks': ['owasp', 'nist', 'iso27001', 'gdpr', 'lgpd']
            }
        }
        
        # Vulnerabilidades conhecidas baseadas no c√≥digo real
        self.known_vulnerabilities = {
            'sql_injection': {
                'patterns': [
                    r'execute\s*\(\s*[\'"][^\'"]*\+',
                    r'cursor\.execute\s*\(\s*[\'"][^\'"]*\+',
                    r'query\s*=\s*[\'"][^\'"]*\+'
                ],
                'severity': SecurityLevel.CRITICAL,
                'description': 'SQL Injection vulnerability detected'
            },
            'xss': {
                'patterns': [
                    r'<script[^>]*>',
                    r'javascript:',
                    r'on\w+\s*='
                ],
                'severity': SecurityLevel.HIGH,
                'description': 'Cross-Site Scripting vulnerability detected'
            },
            'hardcoded_secrets': {
                'patterns': [
                    r'password\s*=\s*[\'"][^\'"]+[\'"]',
                    r'secret\s*=\s*[\'"][^\'"]+[\'"]',
                    r'api_key\s*=\s*[\'"][^\'"]+[\'"]',
                    r'token\s*=\s*[\'"][^\'"]+[\'"]'
                ],
                'severity': SecurityLevel.CRITICAL,
                'description': 'Hardcoded secrets detected'
            },
            'weak_crypto': {
                'patterns': [
                    r'md5\s*\(',
                    r'sha1\s*\(',
                    r'hashlib\.md5',
                    r'hashlib\.sha1'
                ],
                'severity': SecurityLevel.HIGH,
                'description': 'Weak cryptographic algorithm detected'
            }
        }
        
        # M√©tricas de valida√ß√£o
        self.metrics = {
            'total_scans': 0,
            'vulnerabilities_found': 0,
            'critical_vulnerabilities': 0,
            'false_positives': 0,
            'execution_time': 0.0
        }
        
        # Resultados de valida√ß√£o
        self.validation_results = []
        
        logger.info({
            "timestamp": datetime.utcnow().isoformat(),
            "event": "security_validator_initialized",
            "status": "success",
            "source": "SecurityValidator.__init__",
            "details": {
                "validation_modules": len(self.validation_config),
                "known_vulnerabilities": len(self.known_vulnerabilities)
            }
        })
    
    def _load_config(self) -> Dict[str, Any]:
        """Carrega configura√ß√£o de valida√ß√£o"""
        try:
            if os.path.exists(self.config_path):
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    return yaml.safe_load(f) or {}
            else:
                logger.warning(f"Arquivo de configura√ß√£o n√£o encontrado: {self.config_path}")
                return {}
        except Exception as e:
            logger.error(f"Erro ao carregar configura√ß√£o: {e}")
            return {}
    
    def run_vulnerability_scan(self) -> List[SecurityVulnerability]:
        """
        Executa scan completo de vulnerabilidades
        
        Returns:
            Lista de vulnerabilidades encontradas
        """
        vulnerabilities = []
        
        logger.info({
            "timestamp": datetime.utcnow().isoformat(),
            "event": "vulnerability_scan_started",
            "status": "started",
            "source": "SecurityValidator.run_vulnerability_scan"
        })
        
        # 1. Scan com Bandit (an√°lise est√°tica Python)
        bandit_vulns = self._run_bandit_scan()
        vulnerabilities.extend(bandit_vulns)
        
        # 2. Scan com Safety (vulnerabilidades conhecidas)
        safety_vulns = self._run_safety_scan()
        vulnerabilities.extend(safety_vulns)
        
        # 3. Scan com Pip Audit (auditoria de depend√™ncias)
        pip_audit_vulns = self._run_pip_audit_scan()
        vulnerabilities.extend(pip_audit_vulns)
        
        # 4. Scan customizado baseado no c√≥digo real
        custom_vulns = self._run_custom_security_scan()
        vulnerabilities.extend(custom_vulns)
        
        # 5. Valida√ß√£o de configura√ß√µes de seguran√ßa
        config_vulns = self._validate_security_configurations()
        vulnerabilities.extend(config_vulns)
        
        logger.info({
            "timestamp": datetime.utcnow().isoformat(),
            "event": "vulnerability_scan_completed",
            "status": "completed",
            "source": "SecurityValidator.run_vulnerability_scan",
            "details": {
                "total_vulnerabilities": len(vulnerabilities),
                "critical_vulnerabilities": len([v for v in vulnerabilities if v.severity == SecurityLevel.CRITICAL])
            }
        })
        
        return vulnerabilities
    
    def _run_bandit_scan(self) -> List[SecurityVulnerability]:
        """Executa scan com Bandit"""
        vulnerabilities = []
        
        try:
            # Executar Bandit
            result = subprocess.run([
                'bandit', '-r', 'backend/', '-f', 'json', '-o', 'logs/bandit-report.json'
            ], capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0 and os.path.exists('logs/bandit-report.json'):
                with open('logs/bandit-report.json', 'r') as f:
                    bandit_report = json.load(f)
                
                for issue in bandit_report.get('results', []):
                    vulnerability = SecurityVulnerability(
                        id=f"BANDIT_{issue.get('issue_id', 'UNKNOWN')}",
                        title=issue.get('issue_text', 'Bandit Security Issue'),
                        description=issue.get('issue_text', ''),
                        severity=self._map_bandit_severity(issue.get('issue_severity', 'LOW')),
                        cve_id=None,
                        cvss_score=None,
                        affected_component=issue.get('filename', 'unknown'),
                        remediation=issue.get('more_info', ''),
                        references=[issue.get('more_info', '')],
                        discovered_at=datetime.utcnow()
                    )
                    vulnerabilities.append(vulnerability)
            
        except Exception as e:
            logger.error(f"Erro no scan Bandit: {e}")
        
        return vulnerabilities
    
    def _run_safety_scan(self) -> List[SecurityVulnerability]:
        """Executa scan com Safety"""
        vulnerabilities = []
        
        try:
            # Executar Safety
            result = subprocess.run([
                'safety', 'check', '--json', '--output', 'logs/safety-report.json'
            ], capture_output=True, text=True, timeout=300)
            
            if os.path.exists('logs/safety-report.json'):
                with open('logs/safety-report.json', 'r') as f:
                    safety_report = json.load(f)
                
                for vuln in safety_report:
                    vulnerability = SecurityVulnerability(
                        id=f"SAFETY_{vuln.get('id', 'UNKNOWN')}",
                        title=vuln.get('title', 'Safety Vulnerability'),
                        description=vuln.get('description', ''),
                        severity=self._map_safety_severity(vuln.get('severity', 'LOW')),
                        cve_id=vuln.get('cve', None),
                        cvss_score=vuln.get('cvss_score', None),
                        affected_component=vuln.get('package', 'unknown'),
                        remediation=vuln.get('remediation', ''),
                        references=vuln.get('references', []),
                        discovered_at=datetime.utcnow()
                    )
                    vulnerabilities.append(vulnerability)
            
        except Exception as e:
            logger.error(f"Erro no scan Safety: {e}")
        
        return vulnerabilities
    
    def _run_pip_audit_scan(self) -> List[SecurityVulnerability]:
        """Executa scan com Pip Audit"""
        vulnerabilities = []
        
        try:
            # Executar Pip Audit
            result = subprocess.run([
                'pip-audit', '--format', 'json', '--output', 'logs/pip-audit-report.json'
            ], capture_output=True, text=True, timeout=300)
            
            if os.path.exists('logs/pip-audit-report.json'):
                with open('logs/pip-audit-report.json', 'r') as f:
                    pip_audit_report = json.load(f)
                
                for vuln in pip_audit_report.get('vulnerabilities', []):
                    vulnerability = SecurityVulnerability(
                        id=f"PIP_AUDIT_{vuln.get('id', 'UNKNOWN')}",
                        title=vuln.get('title', 'Pip Audit Vulnerability'),
                        description=vuln.get('description', ''),
                        severity=self._map_pip_audit_severity(vuln.get('severity', 'LOW')),
                        cve_id=vuln.get('cve', None),
                        cvss_score=vuln.get('cvss_score', None),
                        affected_component=vuln.get('package', 'unknown'),
                        remediation=vuln.get('remediation', ''),
                        references=vuln.get('references', []),
                        discovered_at=datetime.utcnow()
                    )
                    vulnerabilities.append(vulnerability)
            
        except Exception as e:
            logger.error(f"Erro no scan Pip Audit: {e}")
        
        return vulnerabilities
    
    def _run_custom_security_scan(self) -> List[SecurityVulnerability]:
        """Executa scan customizado baseado no c√≥digo real"""
        vulnerabilities = []
        
        try:
            # Diret√≥rios cr√≠ticos para scan
            critical_dirs = [
                'backend/app/api',
                'backend/app/models',
                'infrastructure/security',
                'scripts'
            ]
            
            for directory in critical_dirs:
                if os.path.exists(directory):
                    for root, dirs, files in os.walk(directory):
                        for file in files:
                            if file.endswith('.py'):
                                file_path = os.path.join(root, file)
                                file_vulns = self._scan_file_for_vulnerabilities(file_path)
                                vulnerabilities.extend(file_vulns)
            
        except Exception as e:
            logger.error(f"Erro no scan customizado: {e}")
        
        return vulnerabilities
    
    def _scan_file_for_vulnerabilities(self, file_path: str) -> List[SecurityVulnerability]:
        """Escaneia arquivo espec√≠fico para vulnerabilidades"""
        vulnerabilities = []
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            for vuln_type, vuln_config in self.known_vulnerabilities.items():
                for pattern in vuln_config['patterns']:
                    matches = re.finditer(pattern, content, re.IGNORECASE | re.MULTILINE)
                    
                    for match in matches:
                        vulnerability = SecurityVulnerability(
                            id=f"CUSTOM_{vuln_type.upper()}_{hash(match.group())}",
                            title=vuln_config['description'],
                            description=f"Pattern '{pattern}' found in {file_path}",
                            severity=vuln_config['severity'],
                            cve_id=None,
                            cvss_score=None,
                            affected_component=file_path,
                            remediation=f"Review and fix {vuln_type} in {file_path}",
                            references=[],
                            discovered_at=datetime.utcnow()
                        )
                        vulnerabilities.append(vulnerability)
            
        except Exception as e:
            logger.error(f"Erro ao escanear arquivo {file_path}: {e}")
        
        return vulnerabilities
    
    def _validate_security_configurations(self) -> List[SecurityVulnerability]:
        """Valida configura√ß√µes de seguran√ßa"""
        vulnerabilities = []
        
        try:
            # 1. Validar configura√ß√£o SSL/TLS
            ssl_vulns = self._validate_ssl_configuration()
            vulnerabilities.extend(ssl_vulns)
            
            # 2. Validar configura√ß√£o de autentica√ß√£o
            auth_vulns = self._validate_authentication_config()
            vulnerabilities.extend(auth_vulns)
            
            # 3. Validar configura√ß√£o de autoriza√ß√£o
            authz_vulns = self._validate_authorization_config()
            vulnerabilities.extend(authz_vulns)
            
            # 4. Validar configura√ß√£o de criptografia
            crypto_vulns = self._validate_encryption_config()
            vulnerabilities.extend(crypto_vulns)
            
            # 5. Validar configura√ß√£o de logging
            logging_vulns = self._validate_logging_config()
            vulnerabilities.extend(logging_vulns)
            
        except Exception as e:
            logger.error(f"Erro na valida√ß√£o de configura√ß√µes: {e}")
        
        return vulnerabilities
    
    def _validate_ssl_configuration(self) -> List[SecurityVulnerability]:
        """Valida configura√ß√£o SSL/TLS"""
        vulnerabilities = []
        
        try:
            # Verificar se HTTPS est√° configurado
            config_files = ['config/cdn.yaml', 'config/compliance.yaml']
            
            for config_file in config_files:
                if os.path.exists(config_file):
                    with open(config_file, 'r') as f:
                        config = yaml.safe_load(f)
                    
                    # Verificar configura√ß√µes SSL
                    if 'ssl' in config:
                        ssl_config = config['ssl']
                        if not ssl_config.get('enabled', False):
                            vulnerability = SecurityVulnerability(
                                id="SSL_DISABLED",
                                title="SSL/TLS Disabled",
                                description="SSL/TLS is not enabled in configuration",
                                severity=SecurityLevel.CRITICAL,
                                cve_id=None,
                                cvss_score=9.0,
                                affected_component=config_file,
                                remediation="Enable SSL/TLS in configuration",
                                references=["https://owasp.org/www-project-top-ten/"],
                                discovered_at=datetime.utcnow()
                            )
                            vulnerabilities.append(vulnerability)
            
        except Exception as e:
            logger.error(f"Erro na valida√ß√£o SSL: {e}")
        
        return vulnerabilities
    
    def _validate_authentication_config(self) -> List[SecurityVulnerability]:
        """Valida configura√ß√£o de autentica√ß√£o"""
        vulnerabilities = []
        
        try:
            # Verificar configura√ß√µes de autentica√ß√£o
            auth_files = ['backend/app/api/auth.py', 'infrastructure/security/advanced_security_system.py']
            
            for auth_file in auth_files:
                if os.path.exists(auth_file):
                    with open(auth_file, 'r') as f:
                        content = f.read()
                    
                    # Verificar se JWT est√° configurado corretamente
                    if 'jwt' in content.lower() and 'secret' in content.lower():
                        # Verificar se secret est√° hardcoded
                        if re.search(r'secret\s*=\s*[\'"][^\'"]+[\'"]', content):
                            vulnerability = SecurityVulnerability(
                                id="HARDCODED_JWT_SECRET",
                                title="Hardcoded JWT Secret",
                                description="JWT secret is hardcoded in source code",
                                severity=SecurityLevel.CRITICAL,
                                cve_id=None,
                                cvss_score=9.0,
                                affected_component=auth_file,
                                remediation="Move JWT secret to environment variables",
                                references=["https://owasp.org/www-project-top-ten/"],
                                discovered_at=datetime.utcnow()
                            )
                            vulnerabilities.append(vulnerability)
            
        except Exception as e:
            logger.error(f"Erro na valida√ß√£o de autentica√ß√£o: {e}")
        
        return vulnerabilities
    
    def _validate_authorization_config(self) -> List[SecurityVulnerability]:
        """Valida configura√ß√£o de autoriza√ß√£o"""
        vulnerabilities = []
        
        try:
            # Verificar configura√ß√µes de autoriza√ß√£o
            authz_files = ['infrastructure/security/advanced_security_system.py']
            
            for authz_file in authz_files:
                if os.path.exists(authz_file):
                    with open(authz_file, 'r') as f:
                        content = f.read()
                    
                    # Verificar se RBAC est√° implementado
                    if 'rbac' not in content.lower() and 'role' not in content.lower():
                        vulnerability = SecurityVulnerability(
                            id="RBAC_NOT_IMPLEMENTED",
                            title="RBAC Not Implemented",
                            description="Role-Based Access Control is not implemented",
                            severity=SecurityLevel.HIGH,
                            cve_id=None,
                            cvss_score=7.0,
                            affected_component=authz_file,
                            remediation="Implement Role-Based Access Control",
                            references=["https://owasp.org/www-project-top-ten/"],
                            discovered_at=datetime.utcnow()
                        )
                        vulnerabilities.append(vulnerability)
            
        except Exception as e:
            logger.error(f"Erro na valida√ß√£o de autoriza√ß√£o: {e}")
        
        return vulnerabilities
    
    def _validate_encryption_config(self) -> List[SecurityVulnerability]:
        """Valida configura√ß√£o de criptografia"""
        vulnerabilities = []
        
        try:
            # Verificar configura√ß√µes de criptografia
            crypto_files = ['infrastructure/security/advanced_security_system.py']
            
            for crypto_file in crypto_files:
                if os.path.exists(crypto_file):
                    with open(crypto_file, 'r') as f:
                        content = f.read()
                    
                    # Verificar se algoritmos fracos est√£o sendo usados
                    weak_algorithms = ['md5', 'sha1', 'des', 'rc4']
                    for algorithm in weak_algorithms:
                        if algorithm in content.lower():
                            vulnerability = SecurityVulnerability(
                                id=f"WEAK_CRYPTO_{algorithm.upper()}",
                                title=f"Weak Cryptographic Algorithm: {algorithm.upper()}",
                                description=f"Weak cryptographic algorithm {algorithm} is being used",
                                severity=SecurityLevel.HIGH,
                                cve_id=None,
                                cvss_score=7.0,
                                affected_component=crypto_file,
                                remediation=f"Replace {algorithm} with stronger algorithm",
                                references=["https://owasp.org/www-project-top-ten/"],
                                discovered_at=datetime.utcnow()
                            )
                            vulnerabilities.append(vulnerability)
            
        except Exception as e:
            logger.error(f"Erro na valida√ß√£o de criptografia: {e}")
        
        return vulnerabilities
    
    def _validate_logging_config(self) -> List[SecurityVulnerability]:
        """Valida configura√ß√£o de logging"""
        vulnerabilities = []
        
        try:
            # Verificar configura√ß√µes de logging
            logging_files = ['infrastructure/logging/', 'logs/']
            
            for logging_dir in logging_files:
                if os.path.exists(logging_dir):
                    # Verificar se logs sens√≠veis est√£o sendo expostos
                    for root, dirs, files in os.walk(logging_dir):
                        for file in files:
                            if file.endswith('.log'):
                                file_path = os.path.join(root, file)
                                try:
                                    with open(file_path, 'r') as f:
                                        content = f.read()
                                    
                                    # Verificar se dados sens√≠veis est√£o nos logs
                                    sensitive_patterns = [
                                        r'password[=:]\s*[\w@#$%^&*]+',
                                        r'secret[=:]\s*[\w@#$%^&*]+',
                                        r'token[=:]\s*[\w@#$%^&*]+',
                                        r'api_key[=:]\s*[\w@#$%^&*]+'
                                    ]
                                    
                                    for pattern in sensitive_patterns:
                                        if re.search(pattern, content, re.IGNORECASE):
                                            vulnerability = SecurityVulnerability(
                                                id="SENSITIVE_DATA_IN_LOGS",
                                                title="Sensitive Data in Logs",
                                                description="Sensitive data found in log files",
                                                severity=SecurityLevel.HIGH,
                                                cve_id=None,
                                                cvss_score=7.0,
                                                affected_component=file_path,
                                                remediation="Remove sensitive data from logs",
                                                references=["https://owasp.org/www-project-top-ten/"],
                                                discovered_at=datetime.utcnow()
                                            )
                                            vulnerabilities.append(vulnerability)
                                            break
                                
                                except Exception as e:
                                    logger.warning(f"Erro ao ler arquivo de log {file_path}: {e}")
            
        except Exception as e:
            logger.error(f"Erro na valida√ß√£o de logging: {e}")
        
        return vulnerabilities
    
    def _map_bandit_severity(self, bandit_severity: str) -> SecurityLevel:
        """Mapeia severidade do Bandit para SecurityLevel"""
        mapping = {
            'LOW': SecurityLevel.LOW,
            'MEDIUM': SecurityLevel.MEDIUM,
            'HIGH': SecurityLevel.HIGH
        }
        return mapping.get(bandit_severity.upper(), SecurityLevel.MEDIUM)
    
    def _map_safety_severity(self, safety_severity: str) -> SecurityLevel:
        """Mapeia severidade do Safety para SecurityLevel"""
        mapping = {
            'LOW': SecurityLevel.LOW,
            'MEDIUM': SecurityLevel.MEDIUM,
            'HIGH': SecurityLevel.HIGH,
            'CRITICAL': SecurityLevel.CRITICAL
        }
        return mapping.get(safety_severity.upper(), SecurityLevel.MEDIUM)
    
    def _map_pip_audit_severity(self, pip_audit_severity: str) -> SecurityLevel:
        """Mapeia severidade do Pip Audit para SecurityLevel"""
        mapping = {
            'LOW': SecurityLevel.LOW,
            'MEDIUM': SecurityLevel.MEDIUM,
            'HIGH': SecurityLevel.HIGH,
            'CRITICAL': SecurityLevel.CRITICAL
        }
        return mapping.get(pip_audit_severity.upper(), SecurityLevel.MEDIUM)
    
    def run_complete_security_validation(self) -> SecurityValidationResult:
        """
        Executa valida√ß√£o completa de seguran√ßa
        
        Returns:
            Resultado da valida√ß√£o de seguran√ßa
        """
        start_time = time.time()
        
        logger.info({
            "timestamp": datetime.utcnow().isoformat(),
            "event": "complete_security_validation_started",
            "status": "started",
            "source": "SecurityValidator.run_complete_security_validation"
        })
        
        # Executar scan de vulnerabilidades
        vulnerabilities = self.run_vulnerability_scan()
        
        # Calcular m√©tricas
        total_checks = len(vulnerabilities)
        critical_vulns = [v for v in vulnerabilities if v.severity == SecurityLevel.CRITICAL]
        high_vulns = [v for v in vulnerabilities if v.severity == SecurityLevel.HIGH]
        medium_vulns = [v for v in vulnerabilities if v.severity == SecurityLevel.MEDIUM]
        low_vulns = [v for v in vulnerabilities if v.severity == SecurityLevel.LOW]
        
        # Calcular score de seguran√ßa
        if total_checks == 0:
            security_score = 100.0
        else:
            # Penalizar por vulnerabilidades (cr√≠ticas = -20, altas = -10, m√©dias = -5, baixas = -1)
            penalty = len(critical_vulns) * 20 + len(high_vulns) * 10 + len(medium_vulns) * 5 + len(low_vulns) * 1
            security_score = max(0.0, 100.0 - penalty)
        
        # Gerar recomenda√ß√µes
        recommendations = self._generate_security_recommendations(vulnerabilities)
        
        # Verificar compliance
        compliance_status = self._check_compliance_status(vulnerabilities)
        
        execution_time = time.time() - start_time
        self.metrics['execution_time'] = execution_time
        self.metrics['total_scans'] += 1
        self.metrics['vulnerabilities_found'] += len(vulnerabilities)
        self.metrics['critical_vulnerabilities'] += len(critical_vulns)
        
        result = SecurityValidationResult(
            timestamp=datetime.utcnow(),
            total_checks=total_checks,
            passed_checks=len([v for v in vulnerabilities if v.severity == SecurityLevel.LOW]),
            failed_checks=len([v for v in vulnerabilities if v.severity in [SecurityLevel.CRITICAL, SecurityLevel.HIGH]]),
            warnings=len([v for v in vulnerabilities if v.severity == SecurityLevel.MEDIUM]),
            errors=0,
            security_score=security_score,
            vulnerabilities=vulnerabilities,
            recommendations=recommendations,
            compliance_status=compliance_status,
            execution_time=execution_time
        )
        
        self.validation_results.append(result)
        
        logger.info({
            "timestamp": datetime.utcnow().isoformat(),
            "event": "complete_security_validation_completed",
            "status": "completed",
            "source": "SecurityValidator.run_complete_security_validation",
            "details": {
                "total_vulnerabilities": len(vulnerabilities),
                "critical_vulnerabilities": len(critical_vulns),
                "security_score": security_score,
                "execution_time": execution_time
            }
        })
        
        return result
    
    def _generate_security_recommendations(self, vulnerabilities: List[SecurityVulnerability]) -> List[str]:
        """Gera recomenda√ß√µes de seguran√ßa baseadas nas vulnerabilidades"""
        recommendations = []
        
        critical_count = len([v for v in vulnerabilities if v.severity == SecurityLevel.CRITICAL])
        high_count = len([v for v in vulnerabilities if v.severity == SecurityLevel.HIGH])
        
        if critical_count > 0:
            recommendations.append(f"CR√çTICO: Corrigir {critical_count} vulnerabilidades cr√≠ticas imediatamente")
        
        if high_count > 0:
            recommendations.append(f"ALTO: Corrigir {high_count} vulnerabilidades de alta severidade")
        
        # Recomenda√ß√µes espec√≠ficas
        for vuln in vulnerabilities:
            if vuln.severity in [SecurityLevel.CRITICAL, SecurityLevel.HIGH]:
                recommendations.append(f"Corrigir {vuln.title} em {vuln.affected_component}")
        
        if not recommendations:
            recommendations.append("Sistema seguro - manter monitoramento cont√≠nuo")
        
        return recommendations
    
    def _check_compliance_status(self, vulnerabilities: List[SecurityVulnerability]) -> Dict[str, bool]:
        """Verifica status de compliance"""
        compliance_status = {
            'owasp': True,
            'nist': True,
            'iso27001': True,
            'gdpr': True,
            'lgpd': True
        }
        
        # Verificar se h√° vulnerabilidades cr√≠ticas que quebram compliance
        critical_vulns = [v for v in vulnerabilities if v.severity == SecurityLevel.CRITICAL]
        
        if critical_vulns:
            compliance_status['owasp'] = False
            compliance_status['nist'] = False
            compliance_status['iso27001'] = False
        
        # Verificar vulnerabilidades de dados pessoais para GDPR/LGPD
        data_vulns = [v for v in vulnerabilities if 'data' in v.title.lower() or 'personal' in v.title.lower()]
        if data_vulns:
            compliance_status['gdpr'] = False
            compliance_status['lgpd'] = False
        
        return compliance_status
    
    def generate_report(self, result: SecurityValidationResult) -> Dict[str, Any]:
        """
        Gera relat√≥rio completo de seguran√ßa
        
        Args:
            result: Resultado da valida√ß√£o
            
        Returns:
            Relat√≥rio estruturado
        """
        report = {
            "report_metadata": {
                "timestamp": result.timestamp.isoformat(),
                "version": "1.0",
                "tracing_id": "SECURITY_VALIDATION_20250127_001",
                "source": "SecurityValidator.generate_report"
            },
            "summary": {
                "total_checks": result.total_checks,
                "passed_checks": result.passed_checks,
                "failed_checks": result.failed_checks,
                "warnings": result.warnings,
                "errors": result.errors,
                "security_score": result.security_score,
                "execution_time": result.execution_time
            },
            "vulnerabilities": [
                {
                    "id": v.id,
                    "title": v.title,
                    "description": v.description,
                    "severity": v.severity.value,
                    "cve_id": v.cve_id,
                    "cvss_score": v.cvss_score,
                    "affected_component": v.affected_component,
                    "remediation": v.remediation,
                    "references": v.references,
                    "discovered_at": v.discovered_at.isoformat()
                }
                for v in result.vulnerabilities
            ],
            "recommendations": result.recommendations,
            "compliance_status": result.compliance_status,
            "metrics": self.metrics
        }
        
        return report
    
    def save_report(self, report: Dict[str, Any], output_path: str = "logs/security_validation_report.json"):
        """Salva relat√≥rio em arquivo"""
        try:
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False, default=str)
            
            logger.info({
                "timestamp": datetime.utcnow().isoformat(),
                "event": "security_validation_report_saved",
                "status": "success",
                "source": "SecurityValidator.save_report",
                "details": {
                    "output_path": output_path,
                    "report_size": len(json.dumps(report))
                }
            })
            
        except Exception as e:
            logger.error({
                "timestamp": datetime.utcnow().isoformat(),
                "event": "security_validation_report_save_error",
                "status": "error",
                "source": "SecurityValidator.save_report",
                "error": str(e)
            })

def main():
    """Fun√ß√£o principal para execu√ß√£o do script"""
    try:
        logger.info({
            "timestamp": datetime.utcnow().isoformat(),
            "event": "security_validation_started",
            "status": "started",
            "source": "main"
        })
        
        # Inicializar validador
        validator = SecurityValidator()
        
        # Executar valida√ß√£o completa
        result = validator.run_complete_security_validation()
        
        # Gerar relat√≥rio
        report = validator.generate_report(result)
        
        # Salvar relat√≥rio
        validator.save_report(report)
        
        # Exibir resumo
        print("\n" + "="*80)
        print("üõ°Ô∏è RELAT√ìRIO DE VALIDA√á√ÉO DE SEGURAN√áA")
        print("="*80)
        print(f"üìÖ Data/Hora: {result.timestamp.strftime('%Y-%m-%d %H:%M:%S UTC')}")
        print(f"üìä Total de Verifica√ß√µes: {result.total_checks}")
        print(f"‚úÖ Passaram: {result.passed_checks}")
        print(f"‚ùå Falharam: {result.failed_checks}")
        print(f"‚ö†Ô∏è  Avisos: {result.warnings}")
        print(f"üö® Erros: {result.errors}")
        print(f"üõ°Ô∏è Score de Seguran√ßa: {result.security_score:.1f}%")
        print(f"‚è±Ô∏è  Tempo de Execu√ß√£o: {result.execution_time:.2f}s")
        
        # Vulnerabilidades por severidade
        critical_vulns = [v for v in result.vulnerabilities if v.severity == SecurityLevel.CRITICAL]
        high_vulns = [v for v in result.vulnerabilities if v.severity == SecurityLevel.HIGH]
        medium_vulns = [v for v in result.vulnerabilities if v.severity == SecurityLevel.MEDIUM]
        low_vulns = [v for v in result.vulnerabilities if v.severity == SecurityLevel.LOW]
        
        print(f"\nüö® Vulnerabilidades Cr√≠ticas: {len(critical_vulns)}")
        print(f"üî¥ Vulnerabilidades Altas: {len(high_vulns)}")
        print(f"üü° Vulnerabilidades M√©dias: {len(medium_vulns)}")
        print(f"üü¢ Vulnerabilidades Baixas: {len(low_vulns)}")
        
        # Compliance
        print(f"\nüìã Status de Compliance:")
        for framework, status in result.compliance_status.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            print(f"  {status_icon} {framework.upper()}: {'Conforme' if status else 'N√£o Conforme'}")
        
        if result.recommendations:
            print(f"\nüìã RECOMENDA√á√ïES:")
            for i, rec in enumerate(result.recommendations, 1):
                print(f"  {i}. {rec}")
        
        print("\n" + "="*80)
        
        # Retornar c√≥digo de sa√≠da baseado no resultado
        if result.failed_checks > 0 or len(critical_vulns) > 0:
            logger.error({
                "timestamp": datetime.utcnow().isoformat(),
                "event": "security_validation_failed",
                "status": "failed",
                "source": "main",
                "details": {
                    "failed_checks": result.failed_checks,
                    "critical_vulnerabilities": len(critical_vulns)
                }
            })
            sys.exit(1)
        else:
            logger.info({
                "timestamp": datetime.utcnow().isoformat(),
                "event": "security_validation_success",
                "status": "success",
                "source": "main",
                "details": {
                    "security_score": result.security_score,
                    "compliance_status": result.compliance_status
                }
            })
            sys.exit(0)
            
    except Exception as e:
        logger.error({
            "timestamp": datetime.utcnow().isoformat(),
            "event": "security_validation_error",
            "status": "error",
            "source": "main",
            "error": str(e)
        })
        print(f"‚ùå Erro na valida√ß√£o de seguran√ßa: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 