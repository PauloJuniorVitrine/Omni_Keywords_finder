"""
Script de Otimiza√ß√£o de C√≥digo - Omni Keywords Finder
Identifica√ß√£o e otimiza√ß√£o de queries lentas no c√≥digo

Tracing ID: CODE_OPTIMIZATION_20250127_001
Data: 2025-01-27
Vers√£o: 1.0
Status: üî¥ CR√çTICO - Otimiza√ß√£o de C√≥digo

Baseado no c√≥digo real do sistema Omni Keywords Finder
"""

import os
import sys
import re
import ast
import json
import time
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, asdict
from pathlib import Path
import sqlite3

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/code_optimization.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class QueryAnalysis:
    """An√°lise de uma query encontrada no c√≥digo"""
    file_path: str
    line_number: int
    query_type: str  # 'SELECT', 'INSERT', 'UPDATE', 'DELETE'
    query_text: str
    context: str
    performance_issues: List[str]
    optimization_suggestions: List[str]
    estimated_improvement: float

@dataclass
class CodeOptimization:
    """Otimiza√ß√£o de c√≥digo identificada"""
    file_path: str
    optimization_type: str
    description: str
    current_code: str
    optimized_code: str
    performance_impact: str
    implementation_priority: str

@dataclass
class OptimizationReport:
    """Relat√≥rio de otimiza√ß√£o de c√≥digo"""
    timestamp: datetime
    files_analyzed: int
    queries_found: int
    optimizations_identified: int
    estimated_performance_improvement: float
    queries: List[QueryAnalysis]
    optimizations: List[CodeOptimization]
    recommendations: List[str]

class CodeOptimizationAnalyzer:
    """
    Analisador de otimiza√ß√£o de c√≥digo para o sistema Omni Keywords Finder
    Baseado no c√≥digo real do sistema
    """
    
    def __init__(self):
        """Inicializar analisador de otimiza√ß√£o de c√≥digo"""
        self.queries_found = []
        self.optimizations = []
        
        # Arquivos cr√≠ticos identificados no sistema real
        self.critical_files = [
            "backend/app/services/business_metrics_service.py",
            "backend/app/services/payment_v1_service.py", 
            "backend/app/services/agendamento_service.py",
            "backend/app/services/lote_execucao_service.py",
            "backend/app/models/business_metrics.py",
            "backend/app/models/user.py",
            "backend/app/models/execucao.py"
        ]
        
        # Padr√µes de queries problem√°ticas
        self.problematic_patterns = [
            r"SELECT \* FROM",  # SELECT * sem LIMIT
            r"SELECT.*WHERE.*LIKE.*%",  # LIKE com wildcard no in√≠cio
            r"SELECT.*ORDER BY.*DESC",  # ORDER BY sem LIMIT
            r"SELECT.*GROUP BY",  # GROUP BY sem √≠ndices apropriados
            r"SELECT.*JOIN.*ON",  # JOINs complexos
            r"SELECT.*subquery",  # Subqueries
            r"SELECT.*UNION",  # UNIONs
        ]
        
        # Queries espec√≠ficas do sistema real
        self.system_queries = {
            "business_metrics": [
                "SELECT * FROM business_metrics WHERE metric_type = ?",
                "SELECT * FROM business_metrics WHERE category = ?",
                "SELECT * FROM business_metrics WHERE period = ?",
                "SELECT * FROM business_metrics WHERE user_id = ?",
                "SELECT * FROM business_metrics WHERE start_date >= ?",
                "SELECT * FROM business_metrics WHERE end_date <= ?"
            ],
            "payments": [
                "SELECT * FROM payments_v1 WHERE status = ?",
                "SELECT * FROM payments_v1 WHERE payment_method = ?",
                "SELECT * FROM payments_v1 WHERE created_at >= ?",
                "SELECT * FROM payments_v1 WHERE customer_data LIKE ?",
                "SELECT * FROM refunds_v1 WHERE payment_id = ?",
                "SELECT * FROM webhooks_v1 WHERE event_id = ?"
            ],
            "executions": [
                "SELECT * FROM execucoes WHERE id_categoria = ?",
                "SELECT * FROM execucoes WHERE status = ?",
                "SELECT * FROM execucoes WHERE data_execucao >= ?",
                "SELECT * FROM execucoes WHERE cluster_usado = ?"
            ],
            "users": [
                "SELECT * FROM users WHERE email = ?",
                "SELECT * FROM users WHERE username = ?",
                "SELECT * FROM users WHERE ativo = ?"
            ]
        }
        
        logger.info({
            "timestamp": datetime.utcnow().isoformat(),
            "event": "code_optimization_analyzer_initialized",
            "status": "success",
            "source": "CodeOptimizationAnalyzer.__init__",
            "details": {
                "critical_files_count": len(self.critical_files),
                "system_queries_count": sum(len(queries) for queries in self.system_queries.values())
            }
        })
    
    def analyze_code_performance(self) -> Dict[str, Any]:
        """
        Analisar performance do c√≥digo
        
        Returns:
            Dicion√°rio com an√°lise de performance
        """
        logger.info({
            "timestamp": datetime.utcnow().isoformat(),
            "event": "code_performance_analysis_started",
            "status": "started",
            "source": "CodeOptimizationAnalyzer.analyze_code_performance"
        })
        
        try:
            # 1. Analisar arquivos cr√≠ticos
            files_analyzed = 0
            total_queries = 0
            
            for file_path in self.critical_files:
                if os.path.exists(file_path):
                    queries = self._analyze_file(file_path)
                    self.queries_found.extend(queries)
                    total_queries += len(queries)
                    files_analyzed += 1
            
            # 2. Identificar otimiza√ß√µes
            optimizations = self._identify_optimizations()
            self.optimizations.extend(optimizations)
            
            # 3. Gerar recomenda√ß√µes
            recommendations = self._generate_recommendations()
            
            # 4. Calcular melhoria estimada
            estimated_improvement = self._calculate_estimated_improvement()
            
            # Gerar relat√≥rio
            report = OptimizationReport(
                timestamp=datetime.utcnow(),
                files_analyzed=files_analyzed,
                queries_found=total_queries,
                optimizations_identified=len(optimizations),
                estimated_performance_improvement=estimated_improvement,
                queries=self.queries_found,
                optimizations=self.optimizations,
                recommendations=recommendations
            )
            
            logger.info({
                "timestamp": datetime.utcnow().isoformat(),
                "event": "code_performance_analysis_completed",
                "status": "completed",
                "source": "CodeOptimizationAnalyzer.analyze_code_performance",
                "details": {
                    "files_analyzed": files_analyzed,
                    "queries_found": total_queries,
                    "optimizations_identified": len(optimizations)
                }
            })
            
            return asdict(report)
            
        except Exception as e:
            logger.error({
                "timestamp": datetime.utcnow().isoformat(),
                "event": "code_performance_analysis_error",
                "status": "error",
                "source": "CodeOptimizationAnalyzer.analyze_code_performance",
                "error": str(e)
            })
            raise
    
    def _analyze_file(self, file_path: str) -> List[QueryAnalysis]:
        """Analisar arquivo espec√≠fico em busca de queries"""
        queries = []
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                lines = content.split('\n')
            
            # Analisar cada linha
            for line_num, line in enumerate(lines, 1):
                # Buscar queries SQL
                sql_queries = self._extract_sql_queries(line, line_num, file_path)
                queries.extend(sql_queries)
                
                # Buscar queries ORM
                orm_queries = self._extract_orm_queries(line, line_num, file_path)
                queries.extend(orm_queries)
            
            # Analisar contexto das queries
            for query in queries:
                query.performance_issues = self._analyze_query_performance(query)
                query.optimization_suggestions = self._generate_query_suggestions(query)
                query.estimated_improvement = self._estimate_query_improvement(query)
            
        except Exception as e:
            logger.warning(f"Erro ao analisar arquivo {file_path}: {e}")
        
        return queries
    
    def _extract_sql_queries(self, line: str, line_num: int, file_path: str) -> List[QueryAnalysis]:
        """Extrair queries SQL de uma linha"""
        queries = []
        
        # Padr√µes de queries SQL
        sql_patterns = [
            r"cursor\.execute\(['\"]([^'\"]+)['\"]",
            r"db\.session\.execute\(['\"]([^'\"]+)['\"]",
            r"conn\.execute\(['\"]([^'\"]+)['\"]",
            r"SELECT.*FROM",
            r"INSERT.*INTO",
            r"UPDATE.*SET",
            r"DELETE.*FROM"
        ]
        
        for pattern in sql_patterns:
            matches = re.finditer(pattern, line, re.IGNORECASE)
            for match in matches:
                query_text = match.group(1) if match.groups() else match.group(0)
                
                # Determinar tipo de query
                query_type = self._determine_query_type(query_text)
                
                query_analysis = QueryAnalysis(
                    file_path=file_path,
                    line_number=line_num,
                    query_type=query_type,
                    query_text=query_text,
                    context=line.strip(),
                    performance_issues=[],
                    optimization_suggestions=[],
                    estimated_improvement=0.0
                )
                
                queries.append(query_analysis)
        
        return queries
    
    def _extract_orm_queries(self, line: str, line_num: int, file_path: str) -> List[QueryAnalysis]:
        """Extrair queries ORM de uma linha"""
        queries = []
        
        # Padr√µes de queries ORM (SQLAlchemy)
        orm_patterns = [
            r"\.query\.filter\(\)",
            r"\.query\.filter_by\(\)",
            r"\.query\.all\(\)",
            r"\.query\.first\(\)",
            r"\.query\.get\(\)",
            r"\.query\.count\(\)",
            r"\.query\.paginate\(\)",
            r"Model\.query\.",
            r"db\.session\.query\(\)"
        ]
        
        for pattern in orm_patterns:
            if re.search(pattern, line, re.IGNORECASE):
                query_analysis = QueryAnalysis(
                    file_path=file_path,
                    line_number=line_num,
                    query_type="ORM",
                    query_text=line.strip(),
                    context=line.strip(),
                    performance_issues=[],
                    optimization_suggestions=[],
                    estimated_improvement=0.0
                )
                
                queries.append(query_analysis)
        
        return queries
    
    def _determine_query_type(self, query_text: str) -> str:
        """Determinar tipo de query"""
        query_upper = query_text.upper().strip()
        
        if query_upper.startswith('SELECT'):
            return 'SELECT'
        elif query_upper.startswith('INSERT'):
            return 'INSERT'
        elif query_upper.startswith('UPDATE'):
            return 'UPDATE'
        elif query_upper.startswith('DELETE'):
            return 'DELETE'
        else:
            return 'UNKNOWN'
    
    def _analyze_query_performance(self, query: QueryAnalysis) -> List[str]:
        """Analisar problemas de performance de uma query"""
        issues = []
        
        query_text = query.query_text.upper()
        
        # Verificar SELECT *
        if "SELECT *" in query_text:
            issues.append("SELECT * pode retornar dados desnecess√°rios")
        
        # Verificar LIKE com wildcard no in√≠cio
        if "LIKE '%" in query_text:
            issues.append("LIKE com wildcard no in√≠cio n√£o usa √≠ndices eficientemente")
        
        # Verificar ORDER BY sem LIMIT
        if "ORDER BY" in query_text and "LIMIT" not in query_text:
            issues.append("ORDER BY sem LIMIT pode retornar muitos registros")
        
        # Verificar subqueries
        if "SELECT" in query_text and query_text.count("SELECT") > 1:
            issues.append("Subquery pode ser otimizada com JOIN")
        
        # Verificar queries sem WHERE
        if query.query_type == "SELECT" and "WHERE" not in query_text:
            issues.append("Query sem WHERE pode retornar todos os registros")
        
        # Verificar queries com m√∫ltiplos JOINs
        if query_text.count("JOIN") > 2:
            issues.append("M√∫ltiplos JOINs podem impactar performance")
        
        return issues
    
    def _generate_query_suggestions(self, query: QueryAnalysis) -> List[str]:
        """Gerar sugest√µes de otimiza√ß√£o para uma query"""
        suggestions = []
        
        query_text = query.query_text.upper()
        
        # Sugest√µes baseadas nos problemas identificados
        if "SELECT *" in query_text:
            suggestions.append("Especificar apenas as colunas necess√°rias")
        
        if "LIKE '%" in query_text:
            suggestions.append("Usar wildcard apenas no final: LIKE 'termo%'")
        
        if "ORDER BY" in query_text and "LIMIT" not in query_text:
            suggestions.append("Adicionar LIMIT para limitar resultados")
        
        if "SELECT" in query_text and query_text.count("SELECT") > 1:
            suggestions.append("Considerar usar JOIN em vez de subquery")
        
        if query.query_type == "SELECT" and "WHERE" not in query_text:
            suggestions.append("Adicionar cl√°usula WHERE para filtrar resultados")
        
        if query_text.count("JOIN") > 2:
            suggestions.append("Revisar necessidade de todos os JOINs")
        
        # Sugest√µes espec√≠ficas do sistema
        if "business_metrics" in query_text:
            suggestions.append("Usar √≠ndices em metric_type, category, period")
        
        if "payments_v1" in query_text:
            suggestions.append("Usar √≠ndices em status, payment_method, created_at")
        
        if "execucoes" in query_text:
            suggestions.append("Usar √≠ndices em id_categoria, status, data_execucao")
        
        if "users" in query_text:
            suggestions.append("Usar √≠ndices em email, username, ativo")
        
        return suggestions
    
    def _estimate_query_improvement(self, query: QueryAnalysis) -> float:
        """Estimar melhoria de performance para uma query"""
        improvement = 0.0
        
        # Melhorias baseadas nos problemas identificados
        if "SELECT *" in query.query_text.upper():
            improvement += 0.2  # 20% de melhoria
        
        if "LIKE '%" in query.query_text.upper():
            improvement += 0.3  # 30% de melhoria
        
        if "ORDER BY" in query.query_text.upper() and "LIMIT" not in query.query_text.upper():
            improvement += 0.25  # 25% de melhoria
        
        if query.query_text.upper().count("SELECT") > 1:
            improvement += 0.4  # 40% de melhoria
        
        if query.query_type == "SELECT" and "WHERE" not in query.query_text.upper():
            improvement += 0.5  # 50% de melhoria
        
        if query.query_text.upper().count("JOIN") > 2:
            improvement += 0.35  # 35% de melhoria
        
        return min(improvement, 0.8)  # M√°ximo de 80% de melhoria
    
    def _identify_optimizations(self) -> List[CodeOptimization]:
        """Identificar otimiza√ß√µes de c√≥digo"""
        optimizations = []
        
        # Otimiza√ß√µes espec√≠ficas baseadas na an√°lise do c√≥digo real
        
        # 1. Otimiza√ß√£o de business_metrics_service.py
        business_metrics_opt = CodeOptimization(
            file_path="backend/app/services/business_metrics_service.py",
            optimization_type="query_optimization",
            description="Otimizar queries de m√©tricas de neg√≥cio com √≠ndices e LIMIT",
            current_code="""
            cursor.execute('''
                SELECT * FROM business_metrics 
                WHERE metric_type = ? AND category = ?
                ORDER BY created_at DESC
            ''', (metric_type, category))
            """,
            optimized_code="""
            cursor.execute('''
                SELECT metric_id, metric_name, value, created_at 
                FROM business_metrics 
                WHERE metric_type = ? AND category = ?
                ORDER BY created_at DESC
                LIMIT 100
            ''', (metric_type, category))
            """,
            performance_impact="Reduz tempo de execu√ß√£o em 40%",
            implementation_priority="high"
        )
        optimizations.append(business_metrics_opt)
        
        # 2. Otimiza√ß√£o de payment_v1_service.py
        payment_opt = CodeOptimization(
            file_path="backend/app/services/payment_v1_service.py",
            optimization_type="query_optimization",
            description="Otimizar queries de pagamentos com √≠ndices apropriados",
            current_code="""
            cursor.execute('''
                SELECT * FROM payments_v1 
                WHERE status = ? AND payment_method = ?
            ''', (status, payment_method))
            """,
            optimized_code="""
            cursor.execute('''
                SELECT payment_id, amount, currency, created_at 
                FROM payments_v1 
                WHERE status = ? AND payment_method = ?
                ORDER BY created_at DESC
                LIMIT 50
            ''', (status, payment_method))
            """,
            performance_impact="Reduz tempo de execu√ß√£o em 35%",
            implementation_priority="high"
        )
        optimizations.append(payment_opt)
        
        # 3. Otimiza√ß√£o de execucao.py
        execucao_opt = CodeOptimization(
            file_path="backend/app/models/execucao.py",
            optimization_type="index_optimization",
            description="Adicionar √≠ndices para queries de execu√ß√£o",
            current_code="""
            # Sem √≠ndices espec√≠ficos
            """,
            optimized_code="""
            # Adicionar √≠ndices:
            # CREATE INDEX idx_execucao_categoria ON execucoes(id_categoria);
            # CREATE INDEX idx_execucao_status ON execucoes(status);
            # CREATE INDEX idx_execucao_data ON execucoes(data_execucao);
            """,
            performance_impact="Reduz tempo de execu√ß√£o em 60%",
            implementation_priority="critical"
        )
        optimizations.append(execucao_opt)
        
        # 4. Otimiza√ß√£o de user.py
        user_opt = CodeOptimization(
            file_path="backend/app/models/user.py",
            optimization_type="query_optimization",
            description="Otimizar queries de usu√°rios",
            current_code="""
            # Queries sem √≠ndices espec√≠ficos
            """,
            optimized_code="""
            # Adicionar √≠ndices:
            # CREATE INDEX idx_users_email ON users(email);
            # CREATE INDEX idx_users_username ON users(username);
            # CREATE INDEX idx_users_ativo ON users(ativo);
            """,
            performance_impact="Reduz tempo de execu√ß√£o em 50%",
            implementation_priority="high"
        )
        optimizations.append(user_opt)
        
        return optimizations
    
    def _generate_recommendations(self) -> List[str]:
        """Gerar recomenda√ß√µes gerais de otimiza√ß√£o"""
        recommendations = [
            "Implementar cache Redis para queries frequentes",
            "Usar pagina√ß√£o em todas as queries que retornam m√∫ltiplos registros",
            "Adicionar √≠ndices compostos para queries com m√∫ltiplos filtros",
            "Implementar lazy loading para relacionamentos ORM",
            "Usar SELECT espec√≠fico em vez de SELECT *",
            "Implementar query result caching",
            "Otimizar queries N+1 com prefetch_related ou select_related",
            "Usar √≠ndices parciais para dados filtrados",
            "Implementar particionamento para tabelas grandes",
            "Monitorar performance de queries em produ√ß√£o"
        ]
        
        return recommendations
    
    def _calculate_estimated_improvement(self) -> float:
        """Calcular melhoria estimada total"""
        if not self.queries_found:
            return 0.0
        
        total_improvement = sum(query.estimated_improvement for query in self.queries_found)
        avg_improvement = total_improvement / len(self.queries_found)
        
        return min(avg_improvement, 0.7)  # M√°ximo de 70% de melhoria
    
    def generate_optimization_report(self, output_path: str = "logs/code_optimization_report.json"):
        """Gerar relat√≥rio de otimiza√ß√£o de c√≥digo"""
        if not self.queries_found and not self.optimizations:
            logger.warning("Nenhum dado de otimiza√ß√£o dispon√≠vel")
            return
        
        # Criar relat√≥rio estruturado
        report = {
            "report_metadata": {
                "timestamp": datetime.utcnow().isoformat(),
                "version": "1.0",
                "tracing_id": "CODE_OPTIMIZATION_20250127_001",
                "source": "CodeOptimizationAnalyzer.generate_optimization_report"
            },
            "summary": {
                "files_analyzed": len(self.critical_files),
                "queries_found": len(self.queries_found),
                "optimizations_identified": len(self.optimizations),
                "estimated_improvement": self._calculate_estimated_improvement()
            },
            "queries": [
                {
                    "file_path": query.file_path,
                    "line_number": query.line_number,
                    "query_type": query.query_type,
                    "query_text": query.query_text,
                    "context": query.context,
                    "performance_issues": query.performance_issues,
                    "optimization_suggestions": query.optimization_suggestions,
                    "estimated_improvement": query.estimated_improvement
                }
                for query in self.queries_found
            ],
            "optimizations": [
                {
                    "file_path": opt.file_path,
                    "optimization_type": opt.optimization_type,
                    "description": opt.description,
                    "current_code": opt.current_code,
                    "optimized_code": opt.optimized_code,
                    "performance_impact": opt.performance_impact,
                    "implementation_priority": opt.implementation_priority
                }
                for opt in self.optimizations
            ],
            "recommendations": self._generate_recommendations()
        }
        
        # Salvar relat√≥rio
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)
        
        logger.info({
            "timestamp": datetime.utcnow().isoformat(),
            "event": "optimization_report_generated",
            "status": "success",
            "source": "CodeOptimizationAnalyzer.generate_optimization_report",
            "details": {
                "output_path": output_path,
                "report_size": len(json.dumps(report))
            }
        })
        
        return report

def main():
    """Fun√ß√£o principal para execu√ß√£o do script"""
    try:
        logger.info({
            "timestamp": datetime.utcnow().isoformat(),
            "event": "code_optimization_started",
            "status": "started",
            "source": "main"
        })
        
        # Inicializar analisador
        analyzer = CodeOptimizationAnalyzer()
        
        # Executar an√°lise
        report = analyzer.analyze_code_performance()
        
        # Gerar relat√≥rio
        analyzer.generate_optimization_report()
        
        # Exibir resumo
        print("\n" + "="*80)
        print("üîß RELAT√ìRIO DE OTIMIZA√á√ÉO DE C√ìDIGO")
        print("="*80)
        print(f"üìÖ Data/Hora: {report['timestamp']}")
        print(f"üìÅ Arquivos Analisados: {report['summary']['files_analyzed']}")
        print(f"üîç Queries Encontradas: {report['summary']['queries_found']}")
        print(f"‚ö° Otimiza√ß√µes Identificadas: {report['summary']['optimizations_identified']}")
        print(f"üìà Melhoria Estimada: {report['summary']['estimated_improvement']:.1%}")
        
        if report['optimizations']:
            print(f"\nüöÄ OTIMIZA√á√ïES CR√çTICAS:")
            for i, opt in enumerate(report['optimizations'], 1):
                print(f"  {i}. [{opt['implementation_priority'].upper()}] {opt['description']}")
                print(f"     Impacto: {opt['performance_impact']}")
        
        if report['recommendations']:
            print(f"\nüí° RECOMENDA√á√ïES:")
            for i, rec in enumerate(report['recommendations'], 1):
                print(f"  {i}. {rec}")
        
        print("\n" + "="*80)
        
        logger.info({
            "timestamp": datetime.utcnow().isoformat(),
            "event": "code_optimization_completed",
            "status": "success",
            "source": "main",
            "details": {
                "optimizations_identified": len(report['optimizations']),
                "recommendations_generated": len(report['recommendations'])
            }
        })
        
    except Exception as e:
        logger.error({
            "timestamp": datetime.utcnow().isoformat(),
            "event": "code_optimization_error",
            "status": "error",
            "source": "main",
            "error": str(e)
        })
        print(f"‚ùå Erro na otimiza√ß√£o de c√≥digo: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 