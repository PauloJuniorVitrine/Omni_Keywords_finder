from typing import Dict, List, Optional, Any
#!/usr/bin/env python3
"""
Exemplo de Uso - Sistema de Versionamento de Configura√ß√µes

Este script demonstra o uso completo do sistema de versionamento
de configura√ß√µes do Omni Keywords Finder, incluindo:
- Cria√ß√£o de configura√ß√µes
- Versionamento e rollback
- Compara√ß√£o de vers√µes
- Aprova√ß√£o de mudan√ßas
- Exporta√ß√£o e importa√ß√£o
- Backup e restaura√ß√£o

Autor: Sistema Omni Keywords Finder
Data: 2024-12-19
Vers√£o: 1.0.0
"""

import json
import tempfile
import shutil
from pathlib import Path
from datetime import datetime

# Importa o sistema de versionamento
from shared.config_versioning import (
    ConfigVersioningSystem,
    ConfigStatus,
    ConfigType,
    create_config_version,
    get_active_config,
    activate_config_version,
    rollback_config,
    export_config,
    import_config
)


def print_separator(title: str):
    """Imprime separador com t√≠tulo"""
    print("\n" + "=" * 60)
    print(f" {title}")
    print("=" * 60)


def print_config_info(version, title: str = "Configura√ß√£o"):
    """Imprime informa√ß√µes de uma configura√ß√£o"""
    print(f"\n{title}:")
    print(f"  ID: {version.id}")
    print(f"  Nome: {version.config_name}")
    print(f"  Tipo: {version.config_type.value}")
    print(f"  Status: {version.status.value}")
    print(f"  Criado por: {version.created_by}")
    print(f"  Criado em: {version.created_at}")
    if version.description:
        print(f"  Descri√ß√£o: {version.description}")
    if version.tags:
        print(f"  Tags: {', '.join(version.tags)}")


def main():
    """Fun√ß√£o principal do exemplo"""
    print("üöÄ Sistema de Versionamento de Configura√ß√µes - Exemplo de Uso")
    print("=" * 70)
    
    # Configura√ß√£o tempor√°ria para o exemplo
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
        db_path = f.name
    
    backup_dir = Path(tempfile.mkdtemp())
    
    try:
        # Inicializa o sistema
        print_separator("1. INICIALIZA√á√ÉO DO SISTEMA")
        system = ConfigVersioningSystem(db_path=db_path, backup_dir=str(backup_dir))
        print(f"‚úÖ Sistema inicializado com sucesso")
        print(f"   Banco de dados: {db_path}")
        print(f"   Diret√≥rio de backup: {backup_dir}")
        
        # Configura√ß√µes de exemplo
        print_separator("2. CONFIGURA√á√ïES DE EXEMPLO")
        
        # Configura√ß√£o inicial do banco de dados
        db_config_v1 = {
            "database": {
                "host": "localhost",
                "port": 5432,
                "name": "omni_keywords_dev",
                "pool_size": 5,
                "timeout": 30
            },
            "redis": {
                "host": "localhost",
                "port": 6379,
                "db": 0,
                "ttl": 3600
            }
        }
        
        # Configura√ß√£o atualizada
        db_config_v2 = {
            "database": {
                "host": "prod-db.example.com",
                "port": 5432,
                "name": "omni_keywords_prod",
                "pool_size": 20,  # Aumentado
                "timeout": 60     # Aumentado
            },
            "redis": {
                "host": "prod-redis.example.com",  # Mudado
                "port": 6379,
                "db": 0,
                "ttl": 7200  # Aumentado
            },
            "monitoring": {  # Nova se√ß√£o
                "enabled": True,
                "interval": 30,
                "alerts": ["email", "slack"]
            }
        }
        
        # Configura√ß√£o com problemas (para rollback)
        db_config_v3 = {
            "database": {
                "host": "wrong-host.example.com",  # Host incorreto
                "port": 5432,
                "name": "omni_keywords_prod",
                "pool_size": 50,  # Muito alto
                "timeout": 120    # Muito alto
            },
            "redis": {
                "host": "prod-redis.example.com",
                "port": 6379,
                "db": 0,
                "ttl": 7200
            },
            "monitoring": {
                "enabled": True,
                "interval": 30,
                "alerts": ["email", "slack"]
            }
        }
        
        print("üìã Configura√ß√µes de exemplo criadas:")
        print("   - db_config_v1: Configura√ß√£o inicial (desenvolvimento)")
        print("   - db_config_v2: Configura√ß√£o atualizada (produ√ß√£o)")
        print("   - db_config_v3: Configura√ß√£o com problemas (para rollback)")
        
        # Cria√ß√£o de vers√µes
        print_separator("3. CRIA√á√ÉO DE VERS√ïES")
        
        # Vers√£o 1 - Configura√ß√£o inicial
        version1 = system.create_version(
            config_name="database_config",
            config_type=ConfigType.SYSTEM,
            content=db_config_v1,
            created_by="dev_team",
            description="Configura√ß√£o inicial para desenvolvimento",
            tags=["development", "initial", "database"]
        )
        print_config_info(version1, "Vers√£o 1 - Desenvolvimento")
        
        # Vers√£o 2 - Configura√ß√£o atualizada
        version2 = system.create_version(
            config_name="database_config",
            config_type=ConfigType.SYSTEM,
            content=db_config_v2,
            created_by="devops_team",
            description="Configura√ß√£o para produ√ß√£o com monitoramento",
            tags=["production", "monitoring", "database"]
        )
        print_config_info(version2, "Vers√£o 2 - Produ√ß√£o")
        
        # Vers√£o 3 - Configura√ß√£o com problemas
        version3 = system.create_version(
            config_name="database_config",
            config_type=ConfigType.SYSTEM,
            content=db_config_v3,
            created_by="devops_team",
            description="Configura√ß√£o com problemas (host incorreto)",
            tags=["production", "problematic", "database"]
        )
        print_config_info(version3, "Vers√£o 3 - Com Problemas")
        
        # Ativa√ß√£o de vers√µes
        print_separator("4. ATIVA√á√ÉO DE VERS√ïES")
        
        # Ativa vers√£o 1 (desenvolvimento)
        print("üîÑ Ativando vers√£o 1 (desenvolvimento)...")
        success = system.activate_version(version1.id, "admin")
        if success:
            print("‚úÖ Vers√£o 1 ativada com sucesso")
        else:
            print("‚ùå Falha ao ativar vers√£o 1")
        
        # Verifica configura√ß√£o ativa
        active_config = system.get_active_version("database_config")
        print_config_info(active_config, "Configura√ß√£o Ativa Atual")
        
        # Ativa vers√£o 2 (produ√ß√£o)
        print("\nüîÑ Ativando vers√£o 2 (produ√ß√£o)...")
        success = system.activate_version(version2.id, "admin")
        if success:
            print("‚úÖ Vers√£o 2 ativada com sucesso")
        else:
            print("‚ùå Falha ao ativar vers√£o 2")
        
        # Verifica configura√ß√£o ativa
        active_config = system.get_active_version("database_config")
        print_config_info(active_config, "Configura√ß√£o Ativa Atual")
        
        # Compara√ß√£o de vers√µes
        print_separator("5. COMPARA√á√ÉO DE VERS√ïES")
        
        print("üîç Comparando vers√£o 1 com vers√£o 2...")
        comparison = system.compare_versions(version1.id, version2.id)
        
        print(f"üìä Resumo das mudan√ßas:")
        print(f"   - Chaves adicionadas: {comparison['summary']['added_keys']}")
        print(f"   - Chaves removidas: {comparison['summary']['removed_keys']}")
        print(f"   - Chaves modificadas: {comparison['summary']['modified_keys']}")
        print(f"   - Chaves inalteradas: {comparison['summary']['unchanged_keys']}")
        
        print(f"\nüìù Mudan√ßas detalhadas:")
        changes = comparison['changes']
        if changes['added']:
            print(f"   ‚ûï Adicionadas: {', '.join(changes['added'])}")
        if changes['modified']:
            print(f"   üîÑ Modificadas: {', '.join(changes['modified'])}")
        if changes['removed']:
            print(f"   ‚ûñ Removidas: {', '.join(changes['removed'])}")
        
        # Simula√ß√£o de problema e rollback
        print_separator("6. SIMULA√á√ÉO DE PROBLEMA E ROLLBACK")
        
        # Ativa vers√£o problem√°tica
        print("‚ö†Ô∏è  Ativando vers√£o problem√°tica (vers√£o 3)...")
        system.activate_version(version3.id, "admin")
        
        print("üö® Problema detectado: Host incorreto e configura√ß√µes inadequadas!")
        print("   - Host: wrong-host.example.com (incorreto)")
        print("   - Pool size: 50 (muito alto)")
        print("   - Timeout: 120s (muito alto)")
        
        # Faz rollback para vers√£o est√°vel
        print("\nüîÑ Executando rollback para vers√£o est√°vel (vers√£o 2)...")
        success = system.rollback_to_version("database_config", version2.id, "admin")
        
        if success:
            print("‚úÖ Rollback executado com sucesso!")
            
            # Verifica configura√ß√£o ap√≥s rollback
            active_config = system.get_active_version("database_config")
            print_config_info(active_config, "Configura√ß√£o Ap√≥s Rollback")
            
            print(f"üìã Configura√ß√£o restaurada:")
            print(f"   - Host: {active_config.content['database']['host']}")
            print(f"   - Pool size: {active_config.content['database']['pool_size']}")
            print(f"   - Timeout: {active_config.content['database']['timeout']}")
        else:
            print("‚ùå Falha no rollback")
        
        # Sistema de aprova√ß√£o
        print_separator("7. SISTEMA DE APROVA√á√ÉO")
        
        # Cria nova vers√£o para aprova√ß√£o
        new_config = {
            "database": {
                "host": "new-prod-db.example.com",
                "port": 5432,
                "name": "omni_keywords_prod_v2",
                "pool_size": 25,
                "timeout": 45
            },
            "redis": {
                "host": "new-prod-redis.example.com",
                "port": 6379,
                "db": 0,
                "ttl": 7200
            },
            "monitoring": {
                "enabled": True,
                "interval": 15,
                "alerts": ["email", "slack", "pagerduty"]
            },
            "security": {  # Nova se√ß√£o
                "ssl_enabled": True,
                "encryption": "AES-256",
                "audit_logging": True
            }
        }
        
        version_pending = system.create_version(
            config_name="database_config",
            config_type=ConfigType.SYSTEM,
            content=new_config,
            created_by="security_team",
            description="Configura√ß√£o com melhorias de seguran√ßa",
            tags=["production", "security", "database"]
        )
        
        print_config_info(version_pending, "Nova Vers√£o - Aguardando Aprova√ß√£o")
        
        # Marca para aprova√ß√£o
        system.update_status(version_pending.id, ConfigStatus.PENDING_APPROVAL)
        
        # Simula processo de aprova√ß√£o
        print("\nüìã Processo de aprova√ß√£o:")
        print("   1. Vers√£o criada e marcada para aprova√ß√£o")
        print("   2. Revis√£o t√©cnica realizada")
        print("   3. Testes de seguran√ßa aprovados")
        print("   4. Aprova√ß√£o final concedida")
        
        # Aprova vers√£o
        success = system.approve_version(
            version_pending.id,
            approver="senior_architect",
            approved=True,
            comments="Configura√ß√£o revisada e aprovada. Melhorias de seguran√ßa implementadas."
        )
        
        if success:
            print("‚úÖ Vers√£o aprovada com sucesso!")
            
            # Ativa vers√£o aprovada
            system.activate_version(version_pending.id, "admin")
            active_config = system.get_active_version("database_config")
            print_config_info(active_config, "Configura√ß√£o Ativa - P√≥s Aprova√ß√£o")
        else:
            print("‚ùå Falha na aprova√ß√£o")
        
        # Exporta√ß√£o e importa√ß√£o
        print_separator("8. EXPORTA√á√ÉO E IMPORTA√á√ÉO")
        
        # Exporta configura√ß√£o ativa
        print("üì§ Exportando configura√ß√£o ativa...")
        exported_json = system.export_configuration(active_config.id, "json")
        exported_yaml = system.export_configuration(active_config.id, "yaml")
        
        print(f"‚úÖ Exporta√ß√£o JSON: {len(exported_json)} caracteres")
        print(f"‚úÖ Exporta√ß√£o YAML: {len(exported_yaml)} caracteres")
        
        # Salva arquivo de exemplo
        export_file = backup_dir / "config_export_example.json"
        with open(export_file, 'w') as f:
            f.write(exported_json)
        print(f"üíæ Arquivo salvo: {export_file}")
        
        # Importa configura√ß√£o
        print("\nüì• Importando configura√ß√£o...")
        imported_version = system.import_configuration(
            exported_json,
            "json",
            "import_user"
        )
        
        print_config_info(imported_version, "Vers√£o Importada")
        
        # Backup e restaura√ß√£o
        print_separator("9. BACKUP E RESTAURA√á√ÉO")
        
        # Cria backup
        print("üíæ Criando backup do sistema...")
        backup_file = system.create_backup()
        print(f"‚úÖ Backup criado: {backup_file}")
        
        # Verifica arquivo de backup
        backup_size = Path(backup_file).stat().st_size
        print(f"üìä Tamanho do backup: {backup_size:,} bytes")
        
        # Simula restaura√ß√£o (criando novo sistema)
        print("\nüîÑ Simulando restaura√ß√£o...")
        new_system = ConfigVersioningSystem(
            db_path=db_path + "_restored",
            backup_dir=str(backup_dir)
        )
        
        restored_count = new_system.restore_from_backup(backup_file, "restore_user")
        print(f"‚úÖ {restored_count} vers√µes restauradas")
        
        # Verifica restaura√ß√£o
        restored_versions = new_system.get_version_history("database_config")
        print(f"üìã Vers√µes restauradas: {len(restored_versions)}")
        
        # Estat√≠sticas do sistema
        print_separator("10. ESTAT√çSTICAS DO SISTEMA")
        
        stats = system.get_statistics()
        
        print("üìä Estat√≠sticas gerais:")
        print(f"   - Total de vers√µes: {stats['total_versions']}")
        print(f"   - Configura√ß√µes √∫nicas: {stats['unique_configurations']}")
        print(f"   - Pendentes de aprova√ß√£o: {stats['pending_approvals']}")
        print(f"   - √öltima atividade: {stats['last_activity']}")
        
        print("\nüìà Distribui√ß√£o por status:")
        for status, count in stats['status_distribution'].items():
            print(f"   - {status}: {count}")
        
        print("\nüè∑Ô∏è  Distribui√ß√£o por tipo:")
        for config_type, count in stats['type_distribution'].items():
            print(f"   - {config_type}: {count}")
        
        # Hist√≥rico de vers√µes
        print_separator("11. HIST√ìRICO DE VERS√ïES")
        
        history = system.get_version_history("database_config")
        print(f"üìã Hist√≥rico completo ({len(history)} vers√µes):")
        
        for index, version in enumerate(history, 1):
            print(f"\n   {index}. Vers√£o {version.version}")
            print(f"      Status: {version.status.value}")
            print(f"      Criado por: {version.created_by}")
            print(f"      Criado em: {version.created_at}")
            if version.description:
                print(f"      Descri√ß√£o: {version.description}")
            if version.tags:
                print(f"      Tags: {', '.join(version.tags)}")
        
        # Demonstra√ß√£o das fun√ß√µes de conveni√™ncia
        print_separator("12. FUN√á√ïES DE CONVENI√äNCIA")
        
        print("üîß Usando fun√ß√µes de conveni√™ncia...")
        
        # Obt√©m configura√ß√£o ativa
        active_config_dict = get_active_config("database_config")
        if active_config_dict:
            print(f"‚úÖ Configura√ß√£o ativa obtida: {len(active_config_dict)} se√ß√µes")
        
        # Cria nova configura√ß√£o usando fun√ß√£o de conveni√™ncia
        simple_config = {
            "api": {
                "rate_limit": 1000,
                "timeout": 30
            }
        }
        
        simple_version = create_config_version(
            config_name="api_config",
            config_type=ConfigType.SYSTEM,
            content=simple_config,
            created_by="example_user",
            description="Configura√ß√£o simples de API"
        )
        
        print(f"‚úÖ Nova configura√ß√£o criada: {simple_version.id}")
        
        # Ativa usando fun√ß√£o de conveni√™ncia
        success = activate_config_version(simple_version.id, "admin")
        if success:
            print("‚úÖ Configura√ß√£o ativada com sucesso")
        
        # Exporta usando fun√ß√£o de conveni√™ncia
        exported = export_config(simple_version.id, "json")
        print(f"‚úÖ Configura√ß√£o exportada: {len(exported)} caracteres")
        
        print_separator("13. CONCLUS√ÉO")
        
        print("üéâ Exemplo conclu√≠do com sucesso!")
        print("\nüìã Resumo do que foi demonstrado:")
        print("   ‚úÖ Cria√ß√£o e versionamento de configura√ß√µes")
        print("   ‚úÖ Ativa√ß√£o e desativa√ß√£o de vers√µes")
        print("   ‚úÖ Compara√ß√£o detalhada entre vers√µes")
        print("   ‚úÖ Sistema de aprova√ß√£o e workflow")
        print("   ‚úÖ Rollback para vers√µes anteriores")
        print("   ‚úÖ Exporta√ß√£o em m√∫ltiplos formatos")
        print("   ‚úÖ Importa√ß√£o de configura√ß√µes")
        print("   ‚úÖ Backup e restaura√ß√£o autom√°tica")
        print("   ‚úÖ Estat√≠sticas e hist√≥rico completo")
        print("   ‚úÖ Fun√ß√µes de conveni√™ncia")
        
        print("\nüöÄ O sistema est√° pronto para uso em produ√ß√£o!")
        
    except Exception as e:
        print(f"‚ùå Erro durante execu√ß√£o: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # Limpeza
        print_separator("LIMPEZA")
        print("üßπ Limpando arquivos tempor√°rios...")
        
        try:
            # Remove banco de dados
            Path(db_path).unlink()
            Path(db_path + "_restored").unlink()
            
            # Remove diret√≥rio de backup
            shutil.rmtree(backup_dir)
            
            print("‚úÖ Limpeza conclu√≠da")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro na limpeza: {e}")


if __name__ == "__main__":
    main() 