#!/usr/bin/env python3
"""
Script para gerar chave JWT segura para o OMNI KEYWORDS FINDER
Segue as melhores pr√°ticas de seguran√ßa OWASP e NIST
"""

import secrets
import string
import base64
import hashlib
import os
from typing import str

def generate_secure_jwt_secret(length: int = 64) -> str:
    """
    Gera uma chave JWT segura usando secrets.SystemRandom()
    
    Args:
        length: Comprimento da chave (padr√£o: 64 caracteres)
    
    Returns:
        Chave JWT segura em base64
    """
    # Usar secrets.SystemRandom() para criptografia segura
    secure_random = secrets.SystemRandom()
    
    # Gerar bytes aleat√≥rios seguros
    random_bytes = secure_random.randbytes(length)
    
    # Codificar em base64 para string leg√≠vel
    jwt_secret = base64.urlsafe_b64encode(random_bytes).decode('utf-8')
    
    # Remover padding '=' para compatibilidade
    jwt_secret = jwt_secret.rstrip('=')
    
    return jwt_secret

def validate_jwt_secret(secret: str) -> bool:
    """
    Valida se a chave JWT atende aos crit√©rios de seguran√ßa
    
    Args:
        secret: Chave JWT para validar
    
    Returns:
        True se v√°lida, False caso contr√°rio
    """
    if not secret:
        return False
    
    # Verificar comprimento m√≠nimo (32 caracteres)
    if len(secret) < 32:
        return False
    
    # Verificar entropia (pelo menos 256 bits)
    entropy = len(set(secret)) * 4  # Aproxima√ß√£o de entropia
    if entropy < 256:
        return False
    
    return True

def main():
    """Fun√ß√£o principal"""
    print("üîê GERADOR DE CHAVE JWT SEGURA - OMNI KEYWORDS FINDER")
    print("=" * 60)
    
    # Gerar chave segura
    jwt_secret = generate_secure_jwt_secret()
    
    print(f"‚úÖ Chave JWT gerada com sucesso!")
    print(f"üìè Comprimento: {len(jwt_secret)} caracteres")
    print(f"üîí Entropia estimada: {len(set(jwt_secret)) * 4} bits")
    
    # Validar chave
    if validate_jwt_secret(jwt_secret):
        print("‚úÖ Chave atende aos crit√©rios de seguran√ßa")
    else:
        print("‚ùå Chave n√£o atende aos crit√©rios de seguran√ßa")
        return 1
    
    print("\nüìã COMO USAR:")
    print("1. Adicione ao seu arquivo .env:")
    print(f"   JWT_SECRET_KEY={jwt_secret}")
    print("\n2. Ou exporte como vari√°vel de ambiente:")
    print(f"   export JWT_SECRET_KEY='{jwt_secret}'")
    
    print("\n‚ö†Ô∏è  IMPORTANTE:")
    print("- Mantenha esta chave em segredo")
    print("- N√£o commite no reposit√≥rio")
    print("- Use chaves diferentes para cada ambiente")
    print("- Rotacione a chave periodicamente")
    
    # Salvar em arquivo tempor√°rio (opcional)
    save_to_file = input("\nüíæ Salvar em arquivo tempor√°rio? (y/N): ").lower().strip()
    if save_to_file == 'y':
        filename = f"jwt_secret_{int(os.time())}.txt"
        with open(filename, 'w') as f:
            f.write(f"JWT_SECRET_KEY={jwt_secret}\n")
        print(f"‚úÖ Chave salva em: {filename}")
        print("‚ö†Ô∏è  Lembre-se de deletar o arquivo ap√≥s usar!")
    
    return 0

if __name__ == "__main__":
    exit(main()) 