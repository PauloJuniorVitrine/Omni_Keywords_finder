#!/usr/bin/env python3
"""
Script de Valida√ß√£o - M√©tricas de Neg√≥cio IMP-015
Tracing ID: IMP015_VALIDATION_001_20241227
Data: 2024-12-27
Status: Implementa√ß√£o Completa

Script de valida√ß√£o abrangente para o sistema de m√©tricas de neg√≥cio:
- Valida√ß√£o de funcionalidades
- Testes de performance
- Verifica√ß√£o de integridade
- An√°lise de dados
- Relat√≥rio de valida√ß√£o
"""

import os
import sys
import json
import time
import tempfile
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List, Any, Tuple
import logging
import traceback
from pathlib import Path

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)string_data - %(levelname)string_data - %(message)string_data'
)
logger = logging.getLogger(__name__)

# Adicionar caminho para importar m√≥dulos
sys.path.append('infrastructure/analytics')

try:
    from business_metrics_dashboard_imp015 import (
        BusinessMetricsDashboard,
        BusinessMetric,
        DashboardWidget,
        AlertRule,
        AlertSeverity,
        get_business_dashboard,
        record_business_metric
    )
except ImportError as e:
    logger.error(f"Erro ao importar m√≥dulos: {e}")
    sys.exit(1)

class BusinessMetricsValidator:
    """Validador para sistema de m√©tricas de neg√≥cio"""
    
    def __init__(self):
        self.validation_results = {
            "timestamp": datetime.utcnow().isoformat(),
            "tests": {},
            "summary": {
                "total_tests": 0,
                "passed": 0,
                "failed": 0,
                "warnings": 0
            },
            "performance_metrics": {},
            "recommendations": []
        }
        
        # Criar banco de dados tempor√°rio para testes
        self.temp_db = tempfile.NamedTemporaryFile(delete=False, suffix='.db')
        self.temp_db.close()
        
        # Inicializar dashboard para testes
        self.dashboard = BusinessMetricsDashboard(
            db_path=self.temp_db.name,
            enable_web_dashboard=False,
            enable_alerts=True
        )
    
    def __del__(self):
        """Limpeza ao destruir objeto"""
        if hasattr(self, 'temp_db') and os.path.exists(self.temp_db.name):
            os.unlink(self.temp_db.name)
    
    def run_validation(self) -> Dict[str, Any]:
        """Executa valida√ß√£o completa"""
        logger.info("üöÄ Iniciando valida√ß√£o do sistema de m√©tricas de neg√≥cio IMP-015")
        
        try:
            # Executar todos os testes de valida√ß√£o
            self._test_dashboard_initialization()
            self._test_metric_recording()
            self._test_data_retrieval()
            self._test_alert_system()
            self._test_widget_functionality()
            self._test_export_functionality()
            self._test_performance()
            self._test_error_handling()
            self._test_data_integrity()
            self._test_integration()
            
            # Gerar resumo
            self._generate_summary()
            
            logger.info("‚úÖ Valida√ß√£o conclu√≠da com sucesso")
            return self.validation_results
            
        except Exception as e:
            logger.error(f"‚ùå Erro durante valida√ß√£o: {e}")
            self.validation_results["error"] = str(e)
            return self.validation_results
    
    def _test_dashboard_initialization(self):
        """Testa inicializa√ß√£o do dashboard"""
        test_name = "dashboard_initialization"
        logger.info(f"üîß Testando: {test_name}")
        
        try:
            # Verificar se dashboard foi inicializado corretamente
            self.assertIsNotNone(self.dashboard, "Dashboard n√£o foi inicializado")
            self.assertEqual(len(self.dashboard.widgets), 6, "N√∫mero incorreto de widgets")
            self.assertEqual(len(self.dashboard.alert_rules), 4, "N√∫mero incorreto de regras de alerta")
            
            # Verificar se banco de dados foi criado
            self.assertTrue(os.path.exists(self.temp_db.name), "Banco de dados n√£o foi criado")
            
            # Verificar estrutura do banco
            with sqlite3.connect(self.temp_db.name) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
                tables = [row[0] for row in cursor.fetchall()]
                
                required_tables = ['business_metrics', 'dashboard_widgets']
                for table in required_tables:
                    self.assertIn(table, tables, f"Tabela {table} n√£o encontrada")
            
            self._record_test_result(test_name, "PASSED", "Dashboard inicializado corretamente")
            
        except Exception as e:
            self._record_test_result(test_name, "FAILED", str(e))
    
    def _test_metric_recording(self):
        """Testa registro de m√©tricas"""
        test_name = "metric_recording"
        logger.info(f"üîß Testando: {test_name}")
        
        try:
            # Criar m√©tricas de teste
            test_metrics = [
                BusinessMetric(
                    name="test_revenue",
                    value=15000.0,
                    unit="USD",
                    category="revenue",
                    timestamp=datetime.utcnow(),
                    trend="up",
                    change_percent=5.2
                ),
                BusinessMetric(
                    name="test_users",
                    value=1250,
                    unit="users",
                    category="users",
                    timestamp=datetime.utcnow(),
                    trend="stable",
                    change_percent=0.1
                )
            ]
            
            # Registrar m√©tricas
            for metric in test_metrics:
                self.dashboard.record_metric(metric)
            
            # Verificar se foram salvas no cache
            for metric in test_metrics:
                self.assertIn(metric.name, self.dashboard.metrics_cache)
                self.assertGreater(len(self.dashboard.metrics_cache[metric.name]), 0)
            
            # Verificar se foram salvas no banco
            saved_metrics = self.dashboard.get_metrics()
            for metric in test_metrics:
                self.assertIn(metric.name, saved_metrics)
                self.assertGreater(len(saved_metrics[metric.name]), 0)
            
            self._record_test_result(test_name, "PASSED", f"Registradas {len(test_metrics)} m√©tricas")
            
        except Exception as e:
            self._record_test_result(test_name, "FAILED", str(e))
    
    def _test_data_retrieval(self):
        """Testa recupera√ß√£o de dados"""
        test_name = "data_retrieval"
        logger.info(f"üîß Testando: {test_name}")
        
        try:
            # Registrar m√©trica de teste
            metric = BusinessMetric(
                name="test_retrieval",
                value=100.0,
                unit="test",
                category="test",
                timestamp=datetime.utcnow()
            )
            self.dashboard.record_metric(metric)
            
            # Testar recupera√ß√£o por nome
            metrics_by_name = self.dashboard.get_metrics(metric_names=["test_retrieval"])
            self.assertIn("test_retrieval", metrics_by_name)
            
            # Testar recupera√ß√£o por categoria
            metrics_by_category = self.dashboard.get_metrics(category="test")
            self.assertIn("test_retrieval", metrics_by_category)
            
            # Testar recupera√ß√£o por per√≠odo
            yesterday = datetime.utcnow() - timedelta(days=1)
            tomorrow = datetime.utcnow() + timedelta(days=1)
            metrics_by_period = self.dashboard.get_metrics(
                start_time=yesterday,
                end_time=tomorrow
            )
            self.assertIn("test_retrieval", metrics_by_period)
            
            self._record_test_result(test_name, "PASSED", "Recupera√ß√£o de dados funcionando")
            
        except Exception as e:
            self._record_test_result(test_name, "FAILED", str(e))
    
    def _test_alert_system(self):
        """Testa sistema de alertas"""
        test_name = "alert_system"
        logger.info(f"üîß Testando: {test_name}")
        
        try:
            # Registrar m√©trica que deve disparar alerta
            metric = BusinessMetric(
                name="daily_revenue",
                value=500.0,  # Abaixo do threshold de 1000
                unit="USD",
                category="revenue",
                timestamp=datetime.utcnow()
            )
            
            initial_alerts = len(self.dashboard.alert_history)
            self.dashboard.record_metric(metric)
            
            # Verificar se alerta foi criado
            self.assertGreater(len(self.dashboard.alert_history), initial_alerts)
            
            # Verificar se alerta tem dados corretos
            latest_alert = self.dashboard.alert_history[-1]
            self.assertEqual(latest_alert["metric_name"], "daily_revenue")
            self.assertEqual(latest_alert["severity"], "CRITICAL")
            
            self._record_test_result(test_name, "PASSED", "Sistema de alertas funcionando")
            
        except Exception as e:
            self._record_test_result(test_name, "FAILED", str(e))
    
    def _test_widget_functionality(self):
        """Testa funcionalidade dos widgets"""
        test_name = "widget_functionality"
        logger.info(f"üîß Testando: {test_name}")
        
        try:
            # Registrar m√©tricas para widgets
            test_metrics = [
                BusinessMetric(name="daily_revenue", value=15000.0, unit="USD", category="revenue", timestamp=datetime.utcnow()),
                BusinessMetric(name="keywords_processed", value=5000, unit="keywords", category="keywords", timestamp=datetime.utcnow()),
                BusinessMetric(name="active_users", value=1250, unit="users", category="users", timestamp=datetime.utcnow())
            ]
            
            for metric in test_metrics:
                self.dashboard.record_metric(metric)
            
            # Testar dados para diferentes tipos de widget
            widget_tests = [
                ("revenue_overview", "metric_card"),
                ("keyword_performance", "line_chart"),
                ("user_engagement", "bar_chart"),
                ("top_keywords", "table"),
                ("system_health", "gauge_chart")
            ]
            
            for widget_id, widget_type in widget_tests:
                data = self.dashboard.get_dashboard_data(widget_id)
                self.assertIsInstance(data, dict, f"Dados do widget {widget_id} n√£o s√£o dict")
                
                if widget_type == "metric_card":
                    self.assertIn("value", data, f"Widget {widget_id} n√£o tem valor")
                elif widget_type == "table":
                    self.assertIn("headers", data, f"Widget {widget_id} n√£o tem headers")
                    self.assertIn("data", data, f"Widget {widget_id} n√£o tem dados")
            
            self._record_test_result(test_name, "PASSED", f"Testados {len(widget_tests)} widgets")
            
        except Exception as e:
            self._record_test_result(test_name, "FAILED", str(e))
    
    def _test_export_functionality(self):
        """Testa funcionalidade de exporta√ß√£o"""
        test_name = "export_functionality"
        logger.info(f"üîß Testando: {test_name}")
        
        try:
            # Registrar m√©trica de teste
            metric = BusinessMetric(
                name="test_export",
                value=100.0,
                unit="test",
                category="test",
                timestamp=datetime.utcnow()
            )
            self.dashboard.record_metric(metric)
            
            # Testar exporta√ß√£o JSON
            json_data = self.dashboard.export_data(format_type="json")
            self.assertIsInstance(json_data, str)
            
            # Verificar se JSON √© v√°lido
            parsed_data = json.loads(json_data)
            self.assertIsInstance(parsed_data, dict)
            
            # Verificar se dados est√£o no JSON
            self.assertIn("test_export", parsed_data)
            
            self._record_test_result(test_name, "PASSED", "Exporta√ß√£o JSON funcionando")
            
        except Exception as e:
            self._record_test_result(test_name, "FAILED", str(e))
    
    def _test_performance(self):
        """Testa performance do sistema"""
        test_name = "performance"
        logger.info(f"üîß Testando: {test_name}")
        
        try:
            # Teste de performance: registrar muitas m√©tricas
            start_time = time.time()
            
            for index in range(100):
                metric = BusinessMetric(
                    name=f"perf_test_{index}",
                    value=float(index),
                    unit="test",
                    category="performance",
                    timestamp=datetime.utcnow()
                )
                self.dashboard.record_metric(metric)
            
            record_time = time.time() - start_time
            
            # Teste de performance: recuperar m√©tricas
            start_time = time.time()
            metrics = self.dashboard.get_metrics()
            retrieve_time = time.time() - start_time
            
            # Armazenar m√©tricas de performance
            self.validation_results["performance_metrics"] = {
                "record_100_metrics_seconds": record_time,
                "retrieve_all_metrics_seconds": retrieve_time,
                "metrics_per_second": 100 / record_time if record_time > 0 else 0
            }
            
            # Verificar se performance est√° aceit√°vel
            self.assertLess(record_time, 5.0, f"Registro muito lento: {record_time}string_data")
            self.assertLess(retrieve_time, 2.0, f"Recupera√ß√£o muito lenta: {retrieve_time}string_data")
            
            self._record_test_result(test_name, "PASSED", 
                                   f"Performance OK - Registro: {record_time:.2f}string_data, Recupera√ß√£o: {retrieve_time:.2f}string_data")
            
        except Exception as e:
            self._record_test_result(test_name, "FAILED", str(e))
    
    def _test_error_handling(self):
        """Testa tratamento de erros"""
        test_name = "error_handling"
        logger.info(f"üîß Testando: {test_name}")
        
        try:
            # Testar m√©trica com nome inv√°lido
            metrics = self.dashboard.get_metrics(metric_names=["invalid_metric"])
            self.assertEqual(len(metrics), 0, "M√©trica inv√°lida deveria retornar vazio")
            
            # Testar widget inv√°lido
            data = self.dashboard.get_dashboard_data("invalid_widget")
            self.assertEqual(data, {}, "Widget inv√°lido deveria retornar vazio")
            
            # Testar exporta√ß√£o com formato inv√°lido
            export_result = self.dashboard.export_data(format_type="invalid_format")
            self.assertIn("Formato n√£o suportado", export_result)
            
            self._record_test_result(test_name, "PASSED", "Tratamento de erros funcionando")
            
        except Exception as e:
            self._record_test_result(test_name, "FAILED", str(e))
    
    def _test_data_integrity(self):
        """Testa integridade dos dados"""
        test_name = "data_integrity"
        logger.info(f"üîß Testando: {test_name}")
        
        try:
            # Registrar m√©trica com dados espec√≠ficos
            original_metric = BusinessMetric(
                name="integrity_test",
                value=123.45,
                unit="test",
                category="test",
                timestamp=datetime.utcnow(),
                trend="up",
                change_percent=10.5,
                metadata={"key": "value"}
            )
            
            self.dashboard.record_metric(original_metric)
            
            # Recuperar e verificar integridade
            saved_metrics = self.dashboard.get_metrics(metric_names=["integrity_test"])
            self.assertIn("integrity_test", saved_metrics)
            
            saved_metric = saved_metrics["integrity_test"][0]
            
            # Verificar se todos os campos foram preservados
            self.assertEqual(saved_metric.name, original_metric.name)
            self.assertEqual(saved_metric.value, original_metric.value)
            self.assertEqual(saved_metric.unit, original_metric.unit)
            self.assertEqual(saved_metric.category, original_metric.category)
            self.assertEqual(saved_metric.trend, original_metric.trend)
            self.assertEqual(saved_metric.change_percent, original_metric.change_percent)
            self.assertEqual(saved_metric.metadata, original_metric.metadata)
            
            self._record_test_result(test_name, "PASSED", "Integridade dos dados preservada")
            
        except Exception as e:
            self._record_test_result(test_name, "FAILED", str(e))
    
    def _test_integration(self):
        """Testa integra√ß√£o com outros componentes"""
        test_name = "integration"
        logger.info(f"üîß Testando: {test_name}")
        
        try:
            # Testar fun√ß√£o de conveni√™ncia
            record_business_metric(
                name="integration_test",
                value=100.0,
                unit="test",
                category="test"
            )
            
            # Verificar se m√©trica foi registrada
            metrics = self.dashboard.get_metrics(metric_names=["integration_test"])
            self.assertIn("integration_test", metrics)
            
            # Testar padr√£o singleton
            dashboard1 = get_business_dashboard()
            dashboard2 = get_business_dashboard()
            self.assertIs(dashboard1, dashboard2, "Padr√£o singleton n√£o funcionando")
            
            self._record_test_result(test_name, "PASSED", "Integra√ß√£o funcionando")
            
        except Exception as e:
            self._record_test_result(test_name, "FAILED", str(e))
    
    def _record_test_result(self, test_name: str, status: str, message: str):
        """Registra resultado de teste"""
        self.validation_results["tests"][test_name] = {
            "status": status,
            "message": message,
            "timestamp": datetime.utcnow().isoformat()
        }
        
        if status == "PASSED":
            self.validation_results["summary"]["passed"] += 1
            logger.info(f"‚úÖ {test_name}: {message}")
        elif status == "FAILED":
            self.validation_results["summary"]["failed"] += 1
            logger.error(f"‚ùå {test_name}: {message}")
        else:
            self.validation_results["summary"]["warnings"] += 1
            logger.warning(f"‚ö†Ô∏è {test_name}: {message}")
        
        self.validation_results["summary"]["total_tests"] += 1
    
    def _generate_summary(self):
        """Gera resumo da valida√ß√£o"""
        summary = self.validation_results["summary"]
        
        # Calcular percentual de sucesso
        success_rate = (summary["passed"] / summary["total_tests"]) * 100 if summary["total_tests"] > 0 else 0
        
        # Adicionar recomenda√ß√µes baseadas nos resultados
        if summary["failed"] > 0:
            self.validation_results["recommendations"].append(
                "Corrigir testes que falharam antes de prosseguir"
            )
        
        if success_rate < 90:
            self.validation_results["recommendations"].append(
                "Investigar e corrigir problemas de qualidade"
            )
        
        # Verificar performance
        perf_metrics = self.validation_results.get("performance_metrics", {})
        if perf_metrics.get("record_100_metrics_seconds", 0) > 3.0:
            self.validation_results["recommendations"].append(
                "Otimizar performance de registro de m√©tricas"
            )
        
        logger.info(f"üìä Resumo da valida√ß√£o:")
        logger.info(f"   Total de testes: {summary['total_tests']}")
        logger.info(f"   Aprovados: {summary['passed']}")
        logger.info(f"   Falharam: {summary['failed']}")
        logger.info(f"   Avisos: {summary['warnings']}")
        logger.info(f"   Taxa de sucesso: {success_rate:.1f}%")
    
    def assertIsNotNone(self, obj, message=""):
        """Assert personalizado"""
        if obj is None:
            raise AssertionError(message or "Objeto √© None")
    
    def assertEqual(self, a, b, message=""):
        """Assert personalizado"""
        if a != b:
            raise AssertionError(f"{message} - Esperado: {b}, Obtido: {a}")
    
    def assertIn(self, item, container, message=""):
        """Assert personalizado"""
        if item not in container:
            raise AssertionError(f"{message} - {item} n√£o est√° em {container}")
    
    def assertGreater(self, a, b, message=""):
        """Assert personalizado"""
        if not a > b:
            raise AssertionError(f"{message} - {a} n√£o √© maior que {b}")
    
    def assertLess(self, a, b, message=""):
        """Assert personalizado"""
        if not a < b:
            raise AssertionError(f"{message} - {a} n√£o √© menor que {b}")
    
    def assertIsInstance(self, obj, cls, message=""):
        """Assert personalizado"""
        if not isinstance(obj, cls):
            raise AssertionError(f"{message} - {obj} n√£o √© inst√¢ncia de {cls}")
    
    def assertTrue(self, condition, message=""):
        """Assert personalizado"""
        if not condition:
            raise AssertionError(message or "Condi√ß√£o √© falsa")
    
    def assertIs(self, a, b, message=""):
        """Assert personalizado"""
        if a is not b:
            raise AssertionError(f"{message} - {a} n√£o √© {b}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Validador de M√©tricas de Neg√≥cio IMP-015")
    print("=" * 50)
    
    # Executar valida√ß√£o
    validator = BusinessMetricsValidator()
    results = validator.run_validation()
    
    # Salvar resultados
    output_file = f"validation_results_imp015_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False, default=str)
    
    print(f"\nüìÑ Resultados salvos em: {output_file}")
    
    # Exibir resumo
    summary = results["summary"]
    success_rate = (summary["passed"] / summary["total_tests"]) * 100 if summary["total_tests"] > 0 else 0
    
    print(f"\nüìä RESUMO DA VALIDA√á√ÉO:")
    print(f"   ‚úÖ Aprovados: {summary['passed']}")
    print(f"   ‚ùå Falharam: {summary['failed']}")
    print(f"   ‚ö†Ô∏è Avisos: {summary['warnings']}")
    print(f"   üìà Taxa de sucesso: {success_rate:.1f}%")
    
    # Exibir recomenda√ß√µes
    if results.get("recommendations"):
        print(f"\nüí° RECOMENDA√á√ïES:")
        for index, rec in enumerate(results["recommendations"], 1):
            print(f"   {index}. {rec}")
    
    # Status final
    if summary["failed"] == 0 and success_rate >= 90:
        print(f"\nüéâ VALIDA√á√ÉO APROVADA! Sistema pronto para produ√ß√£o.")
        return 0
    else:
        print(f"\n‚ö†Ô∏è VALIDA√á√ÉO COM PROBLEMAS. Verificar recomenda√ß√µes.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 