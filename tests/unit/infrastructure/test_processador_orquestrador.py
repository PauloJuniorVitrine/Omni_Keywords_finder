"""
Testes para ProcessadorOrquestrador - Omni Keywords Finder

Tracing ID: TEST_ORCHESTRATOR_001_20250127
Data: 2025-01-27
Vers√£o: 1.0
Status: üü° ALTO - Testes para ProcessadorOrquestrador

Baseado no c√≥digo real do sistema Omni Keywords Finder
"""

import pytest
import asyncio
import time
from unittest.mock import Mock, patch, AsyncMock
from typing import Dict, Any, List

# Mock dos m√≥dulos para evitar depend√™ncias externas
class MockConfiguradorNicho:
    def __init__(self):
        self.nicho_config = {"categoria": "test", "pais": "BR"}
    
    def configurar_nicho(self, keywords):
        return {"configurado": True, "keywords": keywords}

class MockAnalisadorSemanticoProcessor:
    def __init__(self):
        self.processed_count = 0
    
    async def processar(self, keywords):
        self.processed_count += len(keywords)
        return [{"keyword": k, "semantic_score": 0.8} for k in keywords]

class MockCalculadorScoresProcessor:
    def __init__(self):
        self.scores_calculated = 0
    
    async def processar(self, keywords):
        self.scores_calculated += len(keywords)
        return [{"keyword": k, "score": 85} for k in keywords]

class MockValidadorAvancadoProcessor:
    def __init__(self):
        self.validated_count = 0
    
    async def processar(self, keywords):
        self.validated_count += len(keywords)
        return [{"keyword": k, "valid": True} for k in keywords]

class MockAplicadorMLProcessor:
    def __init__(self):
        self.ml_applied = 0
    
    async def processar(self, keywords):
        self.ml_applied += len(keywords)
        return [{"keyword": k, "ml_score": 0.9} for k in keywords]

class MockAuditorFinalProcessor:
    def __init__(self):
        self.audited_count = 0
    
    async def processar(self, keywords):
        self.audited_count += len(keywords)
        return [{"keyword": k, "final_score": 92} for k in keywords]

# Teste principal
class TestProcessadorOrquestrador:
    """Testes para o ProcessadorOrquestrador"""
    
    @pytest.fixture
    def mock_processors(self):
        """Fixture para mock dos processadores"""
        with patch('infrastructure.processamento.processador_orquestrador.ConfiguradorNicho', MockConfiguradorNicho), \
             patch('infrastructure.processamento.processador_orquestrador.AnalisadorSemanticoProcessor', MockAnalisadorSemanticoProcessor), \
             patch('infrastructure.processamento.processador_orquestrador.CalculadorScoresProcessor', MockCalculadorScoresProcessor), \
             patch('infrastructure.processamento.processador_orquestrador.ValidadorAvancadoProcessor', MockValidadorAvancadoProcessor), \
             patch('infrastructure.processamento.processador_orquestrador.AplicadorMLProcessor', MockAplicadorMLProcessor), \
             patch('infrastructure.processamento.processador_orquestrador.AuditorFinalProcessor', MockAuditorFinalProcessor):
            
            from infrastructure.processamento.processador_orquestrador import ProcessadorOrquestrador
            return ProcessadorOrquestrador()
    
    @pytest.fixture
    def sample_keywords(self):
        """Fixture para keywords de teste"""
        return [
            "python programming",
            "machine learning",
            "data science",
            "artificial intelligence",
            "deep learning"
        ]
    
    def test_inicializacao(self, mock_processors):
        """Testa inicializa√ß√£o do orquestrador"""
        orch = mock_processors
        
        # Verificar se todos os processadores foram inicializados
        assert orch.configurador is not None
        assert orch.analisador_semantico is not None
        assert orch.calculador_scores is not None
        assert orch.validador_avancado is not None
        assert orch.aplicador_ml is not None
        assert orch.auditor_final is not None
        
        # Verificar se o tracing_id foi gerado
        assert orch.tracing_id is not None
        assert orch.tracing_id.startswith("ORCH_")
        
        # Verificar se as m√©tricas foram inicializadas
        assert orch.metricas["tempo_inicio"] is None
        assert orch.metricas["tempo_fim"] is None
        assert orch.metricas["total_keywords_inicial"] == 0
        assert orch.metricas["total_keywords_final"] == 0
        assert orch.metricas["erros_processamento"] == 0
    
    def test_configuracao_nicho(self, mock_processors, sample_keywords):
        """Testa configura√ß√£o de nicho"""
        orch = mock_processors
        
        # Configurar nicho
        config = orch.configurador.configurar_nicho(sample_keywords)
        
        # Verificar resultado
        assert config["configurado"] is True
        assert config["keywords"] == sample_keywords
    
    @pytest.mark.asyncio
    async def test_processamento_completo(self, mock_processors, sample_keywords):
        """Testa o processamento completo de keywords"""
        orch = mock_processors
        
        # Iniciar processamento
        orch.metricas["tempo_inicio"] = time.time()
        orch.metricas["total_keywords_inicial"] = len(sample_keywords)
        
        # Processar com analisador sem√¢ntico
        resultado_semantico = await orch.analisador_semantico.processar(sample_keywords)
        assert len(resultado_semantico) == len(sample_keywords)
        assert orch.analisador_semantico.processed_count == len(sample_keywords)
        
        # Processar com calculador de scores
        resultado_scores = await orch.calculador_scores.processar(sample_keywords)
        assert len(resultado_scores) == len(sample_keywords)
        assert orch.calculador_scores.scores_calculated == len(sample_keywords)
        
        # Processar com validador avan√ßado
        resultado_validacao = await orch.validador_avancado.processar(sample_keywords)
        assert len(resultado_validacao) == len(sample_keywords)
        assert orch.validador_avancado.validated_count == len(sample_keywords)
        
        # Processar com aplicador ML
        resultado_ml = await orch.aplicador_ml.processar(sample_keywords)
        assert len(resultado_ml) == len(resultado_ml)
        assert orch.aplicador_ml.ml_applied == len(sample_keywords)
        
        # Processar com auditor final
        resultado_final = await orch.auditor_final.processar(sample_keywords)
        assert len(resultado_final) == len(sample_keywords)
        assert orch.auditor_final.audited_count == len(sample_keywords)
        
        # Finalizar processamento
        orch.metricas["tempo_fim"] = time.time()
        orch.metricas["total_keywords_final"] = len(resultado_final)
        
        # Verificar m√©tricas finais
        assert orch.metricas["total_keywords_final"] == len(sample_keywords)
        assert orch.metricas["erros_processamento"] == 0
        assert orch.metricas["tempo_inicio"] is not None
        assert orch.metricas["tempo_fim"] is not None
    
    def test_metricas_tempo_processamento(self, mock_processors, sample_keywords):
        """Testa m√©tricas de tempo de processamento"""
        orch = mock_processors
        
        # Simular tempo de processamento por processador
        orch.metricas["tempo_por_processador"] = {
            "analisador_semantico": 0.5,
            "calculador_scores": 0.3,
            "validador_avancado": 0.2,
            "aplicador_ml": 0.8,
            "auditor_final": 0.1
        }
        
        # Verificar se as m√©tricas foram registradas
        assert "analisador_semantico" in orch.metricas["tempo_por_processador"]
        assert "calculador_scores" in orch.metricas["tempo_por_processador"]
        assert "validador_avancado" in orch.metricas["tempo_por_processador"]
        assert "aplicador_ml" in orch.metricas["tempo_por_processador"]
        assert "auditor_final" in orch.metricas["tempo_por_processador"]
        
        # Verificar valores
        assert orch.metricas["tempo_por_processador"]["analisador_semantico"] == 0.5
        assert orch.metricas["tempo_por_processador"]["calculador_scores"] == 0.3
    
    def test_tracing_id_unico(self, mock_processors):
        """Testa se cada inst√¢ncia tem um tracing_id √∫nico"""
        orch1 = mock_processors
        orch2 = mock_processors.__class__()
        
        # Verificar se os IDs s√£o diferentes
        assert orch1.tracing_id != orch2.tracing_id
        assert orch1.tracing_id.startswith("ORCH_")
        assert orch2.tracing_id.startswith("ORCH_")
    
    def test_resilience_patterns(self, mock_processors):
        """Testa configura√ß√µes de resili√™ncia"""
        orch = mock_processors
        
        # Verificar se os padr√µes de resili√™ncia foram configurados
        # (Este teste depende da implementa√ß√£o espec√≠fica do m√©todo _setup_resilience_patterns)
        assert hasattr(orch, '_setup_resilience_patterns')
    
    @pytest.mark.asyncio
    async def test_processamento_com_erro(self, mock_processors, sample_keywords):
        """Testa processamento com erro em um dos processadores"""
        orch = mock_processors
        
        # Simular erro no analisador sem√¢ntico
        orch.analisador_semantico.processar = AsyncMock(side_effect=Exception("Erro sem√¢ntico"))
        
        # Tentar processar
        try:
            await orch.analisador_semantico.processar(sample_keywords)
        except Exception as e:
            assert str(e) == "Erro sem√¢ntico"
        
        # Verificar se o erro foi registrado
        orch.metricas["erros_processamento"] += 1
        assert orch.metricas["erros_processamento"] == 1
    
    def test_log_inicializacao(self, mock_processors):
        """Testa se o log de inicializa√ß√£o foi chamado"""
        orch = mock_processors
        
        # Verificar se o m√©todo existe
        assert hasattr(orch, '_log_inicializacao')
    
    def test_estrutura_metricas(self, mock_processors):
        """Testa estrutura das m√©tricas"""
        orch = mock_processors
        
        # Verificar estrutura esperada
        expected_keys = [
            "tempo_inicio",
            "tempo_fim", 
            "tempo_por_processador",
            "total_keywords_inicial",
            "total_keywords_final",
            "erros_processamento"
        ]
        
        for key in expected_keys:
            assert key in orch.metricas
        
        # Verificar tipos
        assert orch.metricas["tempo_por_processador"] == {}
        assert isinstance(orch.metricas["total_keywords_inicial"], int)
        assert isinstance(orch.metricas["total_keywords_final"], int)
        assert isinstance(orch.metricas["erros_processamento"], int)
    
    @pytest.mark.asyncio
    async def test_processamento_vazio(self, mock_processors):
        """Testa processamento com lista vazia de keywords"""
        orch = mock_processors
        keywords_vazias = []
        
        # Processar lista vazia
        resultado_semantico = await orch.analisador_semantico.processar(keywords_vazias)
        resultado_scores = await orch.calculador_scores.processar(keywords_vazias)
        resultado_validacao = await orch.validador_avancado.processar(keywords_vazias)
        resultado_ml = await orch.aplicador_ml.processar(keywords_vazias)
        resultado_final = await orch.auditor_final.processar(keywords_vazias)
        
        # Verificar resultados
        assert len(resultado_semantico) == 0
        assert len(resultado_scores) == 0
        assert len(resultado_validacao) == 0
        assert len(resultado_ml) == 0
        assert len(resultado_final) == 0
        
        # Verificar contadores
        assert orch.analisador_semantico.processed_count == 0
        assert orch.calculador_scores.scores_calculated == 0
        assert orch.validador_avancado.validated_count == 0
        assert orch.aplicador_ml.ml_applied == 0
        assert orch.auditor_final.audited_count == 0
    
    def test_configuracao_processadores(self, mock_processors):
        """Testa configura√ß√£o dos processadores"""
        orch = mock_processors
        
        # Verificar se todos os processadores s√£o inst√¢ncias das classes corretas
        assert isinstance(orch.configurador, MockConfiguradorNicho)
        assert isinstance(orch.analisador_semantico, MockAnalisadorSemanticoProcessor)
        assert isinstance(orch.calculador_scores, MockCalculadorScoresProcessor)
        assert isinstance(orch.validador_avancado, MockValidadorAvancadoProcessor)
        assert isinstance(orch.aplicador_ml, MockAplicadorMLProcessor)
        assert isinstance(orch.auditor_final, MockAuditorFinalProcessor)
    
    @pytest.mark.asyncio
    async def test_processamento_paralelo(self, mock_processors, sample_keywords):
        """Testa processamento paralelo de m√∫ltiplas inst√¢ncias"""
        orch1 = mock_processors
        orch2 = mock_processors.__class__()
        
        # Processar em paralelo
        tasks = [
            orch1.analisador_semantico.processar(sample_keywords),
            orch2.analisador_semantico.processar(sample_keywords)
        ]
        
        resultados = await asyncio.gather(*tasks)
        
        # Verificar resultados
        assert len(resultados) == 2
        assert len(resultados[0]) == len(sample_keywords)
        assert len(resultados[1]) == len(sample_keywords)
        
        # Verificar contadores independentes
        assert orch1.analisador_semantico.processed_count == len(sample_keywords)
        assert orch2.analisador_semantico.processed_count == len(sample_keywords)
    
    def test_estado_inicial(self, mock_processors):
        """Testa estado inicial do orquestrador"""
        orch = mock_processors
        
        # Verificar estado inicial
        assert orch.metricas["tempo_inicio"] is None
        assert orch.metricas["tempo_fim"] is None
        assert orch.metricas["total_keywords_inicial"] == 0
        assert orch.metricas["total_keywords_final"] == 0
        assert orch.metricas["erros_processamento"] == 0
        assert orch.metricas["tempo_por_processador"] == {}
        
        # Verificar se os processadores est√£o prontos
        assert orch.configurador is not None
        assert orch.analisador_semantico is not None
        assert orch.calculador_scores is not None
        assert orch.validador_avancado is not None
        assert orch.aplicador_ml is not None
        assert orch.auditor_final is not None
