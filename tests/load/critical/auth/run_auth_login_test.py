"""
üöÄ SCRIPT DE EXECU√á√ÉO - TESTE DE CARGA LOGIN
üìê CoCoT Analysis | üå≤ ToT Approach | ‚ôªÔ∏è ReAct Simulation | üñºÔ∏è Visual Representation

Tracing ID: RUN_AUTH_LOGIN_20250127_001
Baseado em: locustfile_auth_login_v1.py
Depend√™ncias: backend/app/api/auth.py, backend/app/schemas/auth.py

üìä AN√ÅLISE CoCoT:
- Comprova√ß√£o: Script de execu√ß√£o padronizado para testes de carga
- Causalidade: Automatiza√ß√£o da execu√ß√£o e coleta de m√©tricas
- Contexto: Integra√ß√£o com sistema de CI/CD e monitoramento
- Tend√™ncia: Execu√ß√£o distribu√≠da e relat√≥rios automatizados

üå≤ AN√ÅLISE ToT:
1. Op√ß√£o 1: Execu√ß√£o local simples
2. Op√ß√£o 2: Execu√ß√£o com m√©tricas detalhadas
3. Op√ß√£o 3: Execu√ß√£o distribu√≠da
4. Op√ß√£o 4: Execu√ß√£o com relat√≥rios customizados

‚ôªÔ∏è SIMULA√á√ÉO ReAct:
- Efeitos colaterais: Gera√ß√£o de logs, arquivos de resultado
- Ganhos: Automa√ß√£o, m√©tricas consistentes, relat√≥rios
- Riscos: Sobrecarga do sistema, dados de teste inconsistentes
"""

import os
import sys
import subprocess
import json
import time
import argparse
from datetime import datetime
from pathlib import Path
import logging

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('auth_login_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AuthLoginTestRunner:
    """
    Executor de teste de carga para autentica√ß√£o login
    Baseado no c√≥digo real do sistema
    """
    
    def __init__(self, config: dict = None):
        self.config = config or self.get_default_config()
        self.test_start_time = None
        self.results_dir = Path("tests/load/results/auth_login")
        self.results_dir.mkdir(parents=True, exist_ok=True)
        
    def get_default_config(self) -> dict:
        """Configura√ß√£o padr√£o baseada no sistema real"""
        return {
            "host": "http://localhost:8000",
            "users": 10,
            "spawn_rate": 2,
            "run_time": "5m",
            "headless": True,
            "html_report": True,
            "csv_report": True,
            "json_report": True,
            "log_level": "INFO",
            "locustfile": "tests/load/critical/auth/locustfile_auth_login_v1.py"
        }
    
    def validate_environment(self) -> bool:
        """
        Valida√ß√£o do ambiente antes da execu√ß√£o
        Baseado em: backend/app/api/auth.py
        """
        logger.info("üîç Validando ambiente de teste...")
        
        # Verificar se o arquivo de teste existe
        if not Path(self.config["locustfile"]).exists():
            logger.error(f"‚ùå Arquivo de teste n√£o encontrado: {self.config['locustfile']}")
            return False
        
        # Verificar se o servidor est√° rodando
        try:
            import requests
            response = requests.get(f"{self.config['host']}/api/public/health", timeout=5)
            if response.status_code != 200:
                logger.error(f"‚ùå Servidor n√£o est√° respondendo: {response.status_code}")
                return False
            logger.info("‚úÖ Servidor est√° respondendo")
        except Exception as e:
            logger.error(f"‚ùå Erro ao conectar com servidor: {e}")
            return False
        
        # Verificar se o endpoint de login est√° dispon√≠vel
        try:
            response = requests.post(
                f"{self.config['host']}/api/auth/login",
                json={"username": "test", "senha": "test"},
                timeout=5
            )
            # Esperamos 401 (credenciais inv√°lidas) ou 400 (valida√ß√£o)
            if response.status_code not in [400, 401, 422]:
                logger.error(f"‚ùå Endpoint de login n√£o est√° funcionando: {response.status_code}")
                return False
            logger.info("‚úÖ Endpoint de login est√° dispon√≠vel")
        except Exception as e:
            logger.error(f"‚ùå Erro ao testar endpoint de login: {e}")
            return False
        
        return True
    
    def prepare_test_data(self) -> bool:
        """
        Prepara√ß√£o de dados de teste
        Baseado em: backend/app/models/user.py
        """
        logger.info("üìä Preparando dados de teste...")
        
        # Criar diret√≥rio de dados de teste
        test_data_dir = Path("tests/load/test_data")
        test_data_dir.mkdir(parents=True, exist_ok=True)
        
        # Dados de teste baseados no modelo real
        test_users = [
            {"username": "admin_user", "senha": "Admin@123", "email": "admin@test.com"},
            {"username": "premium_user", "senha": "Premium@456", "email": "premium@test.com"},
            {"username": "basic_user", "senha": "Basic@789", "email": "basic@test.com"},
            {"username": "test_user", "senha": "Test@101", "email": "test@test.com"},
            {"username": "demo_user", "senha": "Demo@202", "email": "demo@test.com"}
        ]
        
        # Salvar dados de teste
        test_data_file = test_data_dir / "auth_test_users.json"
        with open(test_data_file, 'w') as f:
            json.dump(test_users, f, indent=2)
        
        logger.info(f"‚úÖ Dados de teste salvos em: {test_data_file}")
        return True
    
    def build_locust_command(self) -> list:
        """Constr√≥i comando Locust baseado na configura√ß√£o"""
        cmd = [
            "locust",
            "-f", self.config["locustfile"],
            "--host", self.config["host"],
            "--users", str(self.config["users"]),
            "--spawn-rate", str(self.config["spawn_rate"]),
            "--run-time", self.config["run_time"],
            "--loglevel", self.config["log_level"]
        ]
        
        # Adicionar relat√≥rios
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        if self.config["html_report"]:
            html_file = self.results_dir / f"auth_login_report_{timestamp}.html"
            cmd.extend(["--html", str(html_file)])
        
        if self.config["csv_report"]:
            csv_prefix = self.results_dir / f"auth_login_{timestamp}"
            cmd.extend(["--csv", str(csv_prefix)])
        
        if self.config["json_report"]:
            json_file = self.results_dir / f"auth_login_{timestamp}.json"
            cmd.extend(["--json", str(json_file)])
        
        if self.config["headless"]:
            cmd.append("--headless")
        
        return cmd
    
    def run_test(self) -> bool:
        """
        Execu√ß√£o do teste de carga
        Baseado em: locustfile_auth_login_v1.py
        """
        logger.info("üöÄ Iniciando teste de carga para autentica√ß√£o login...")
        self.test_start_time = time.time()
        
        # Validar ambiente
        if not self.validate_environment():
            return False
        
        # Preparar dados de teste
        if not self.prepare_test_data():
            return False
        
        # Construir comando
        cmd = self.build_locust_command()
        logger.info(f"üìã Comando: {' '.join(cmd)}")
        
        try:
            # Executar teste
            logger.info("üîÑ Executando teste...")
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=int(self.config["run_time"].replace("m", "")) * 60 + 300  # +5min buffer
            )
            
            # Verificar resultado
            if result.returncode == 0:
                logger.info("‚úÖ Teste executado com sucesso")
                self.save_execution_summary(result.stdout, result.stderr)
                return True
            else:
                logger.error(f"‚ùå Teste falhou com c√≥digo: {result.returncode}")
                logger.error(f"Stderr: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("‚è∞ Teste excedeu tempo limite")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erro durante execu√ß√£o: {e}")
            return False
    
    def save_execution_summary(self, stdout: str, stderr: str):
        """Salva resumo da execu√ß√£o"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        summary_file = self.results_dir / f"execution_summary_{timestamp}.json"
        
        test_duration = time.time() - self.test_start_time
        
        summary = {
            "test_name": "Auth Login Load Test",
            "tracing_id": "RUN_AUTH_LOGIN_20250127_001",
            "execution_time": datetime.now().isoformat(),
            "duration_seconds": test_duration,
            "config": self.config,
            "stdout": stdout,
            "stderr": stderr,
            "status": "completed"
        }
        
        with open(summary_file, 'w') as f:
            json.dump(summary, f, indent=2)
        
        logger.info(f"üìÑ Resumo salvo em: {summary_file}")
    
    def generate_report(self):
        """Gera relat√≥rio de execu√ß√£o"""
        logger.info("üìä Gerando relat√≥rio...")
        
        # Implementar gera√ß√£o de relat√≥rio baseado nos resultados
        # TODO: Implementar an√°lise dos arquivos CSV/JSON gerados
        
        logger.info("‚úÖ Relat√≥rio gerado")

def main():
    """Fun√ß√£o principal"""
    parser = argparse.ArgumentParser(description="Executor de teste de carga para autentica√ß√£o login")
    parser.add_argument("--host", default="http://localhost:8000", help="Host do servidor")
    parser.add_argument("--users", type=int, default=10, help="N√∫mero de usu√°rios")
    parser.add_argument("--spawn-rate", type=int, default=2, help="Taxa de spawn")
    parser.add_argument("--run-time", default="5m", help="Tempo de execu√ß√£o")
    parser.add_argument("--headless", action="store_true", help="Execu√ß√£o headless")
    parser.add_argument("--config", help="Arquivo de configura√ß√£o JSON")
    
    args = parser.parse_args()
    
    # Carregar configura√ß√£o
    if args.config and Path(args.config).exists():
        with open(args.config, 'r') as f:
            config = json.load(f)
    else:
        config = {}
    
    # Sobrescrever com argumentos da linha de comando
    if args.host:
        config["host"] = args.host
    if args.users:
        config["users"] = args.users
    if args.spawn_rate:
        config["spawn_rate"] = args.spawn_rate
    if args.run_time:
        config["run_time"] = args.run_time
    if args.headless:
        config["headless"] = True
    
    # Executar teste
    runner = AuthLoginTestRunner(config)
    success = runner.run_test()
    
    if success:
        runner.generate_report()
        logger.info("üéâ Teste conclu√≠do com sucesso!")
        sys.exit(0)
    else:
        logger.error("üí• Teste falhou!")
        sys.exit(1)

if __name__ == "__main__":
    main() 