"""
üîê Teste de Carga - Endpoint de Logout
üéØ Objetivo: Validar performance e seguran√ßa do endpoint /api/auth/logout
üìÖ Data: 2025-01-27
üîó Tracing ID: LOAD_TEST_LOGOUT_20250127_001
üìã Ruleset: enterprise_control_layer.yaml

üìä Abordagens de Racioc√≠nio:
- CoCoT: Comprova√ß√£o, Causalidade, Contexto, Tend√™ncia
- ToT: Tree of Thoughts - M√∫ltiplas abordagens de teste
- ReAct: Simula√ß√£o e reflex√£o sobre cen√°rios
- Representa√ß√µes Visuais: Diagramas de fluxo e relacionamentos

üîç Cen√°rios de Teste:
1. Logout v√°lido com token JWT
2. Logout com token expirado
3. Logout sem token
4. Logout com token malformado
5. Rate limiting em logout
6. Logout concorrente
7. Logout ap√≥s m√∫ltiplos logins
"""

import time
import json
import random
from locust import HttpUser, task, between, events
from typing import Dict, Any, Optional
import logging

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class LogoutTestUser(HttpUser):
    """
    Usu√°rio de teste para endpoint de logout
    Implementa cen√°rios baseados em c√≥digo real do sistema
    """
    
    wait_time = between(1, 3)  # Tempo entre requisi√ß√µes
    weight = 1  # Peso do usu√°rio no teste
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.auth_token: Optional[str] = None
        self.user_id: Optional[int] = None
        self.test_data = self._load_test_data()
        
    def on_start(self):
        """Inicializa√ß√£o do usu√°rio - login para obter token"""
        try:
            # Login para obter token v√°lido
            login_response = self.client.post(
                "/api/auth/login",
                json={
                    "username": "test_user_load",
                    "senha": "TestPass123!"
                },
                headers={"Content-Type": "application/json"},
                name="setup_login"
            )
            
            if login_response.status_code == 200:
                data = login_response.json()
                self.auth_token = data.get("access_token")
                self.user_id = data.get("user_id")
                logger.info(f"Usu√°rio {self.user_id} autenticado para testes de logout")
            else:
                logger.warning(f"Falha no login de setup: {login_response.status_code}")
                
        except Exception as e:
            logger.error(f"Erro no setup do usu√°rio: {e}")
    
    def _load_test_data(self) -> Dict[str, Any]:
        """Carrega dados de teste baseados no c√≥digo real"""
        return {
            "valid_tokens": [],  # Tokens v√°lidos para teste
            "expired_tokens": [
                "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyMzkwMjJ9.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
            ],
            "malformed_tokens": [
                "invalid_token",
                "Bearer ",
                "Bearer invalid",
                "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.invalid",
                ""
            ],
            "test_users": [
                {"username": "test_user_1", "senha": "TestPass123!"},
                {"username": "test_user_2", "senha": "TestPass123!"},
                {"username": "test_user_3", "senha": "TestPass123!"}
            ]
        }
    
    @task(40)  # 40% das requisi√ß√µes
    def logout_valid_token(self):
        """
        üîê Cen√°rio: Logout com token v√°lido
        üìä CoCoT: Comprova√ß√£o de logout bem-sucedido
        üéØ ToT: Abordagem principal de teste
        """
        if not self.auth_token:
            logger.warning("Token n√£o dispon√≠vel para teste de logout v√°lido")
            return
            
        start_time = time.time()
        
        try:
            response = self.client.post(
                "/api/auth/logout",
                headers={
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                },
                name="logout_valid_token"
            )
            
            # Valida√ß√µes baseadas no c√≥digo real
            if response.status_code == 200:
                data = response.json()
                assert "msg" in data, "Resposta deve conter campo 'msg'"
                assert data["msg"] == "Logout efetuado.", "Mensagem de logout incorreta"
                
                # Log de sucesso
                logger.info(f"Logout bem-sucedido para usu√°rio {self.user_id}")
                
            elif response.status_code == 401:
                logger.warning(f"Token inv√°lido/expirado: {response.status_code}")
                
            else:
                logger.error(f"Erro inesperado no logout: {response.status_code}")
                
        except Exception as e:
            logger.error(f"Exce√ß√£o no logout v√°lido: {e}")
            self.environment.events.request_failure.fire(
                request_type="POST",
                name="logout_valid_token",
                response_time=time.time() - start_time,
                exception=e
            )
    
    @task(20)  # 20% das requisi√ß√µes
    def logout_expired_token(self):
        """
        ‚è∞ Cen√°rio: Logout com token expirado
        üìä CoCoT: Causalidade de token expirado
        üéØ ToT: Abordagem de teste de seguran√ßa
        """
        expired_token = random.choice(self.test_data["expired_tokens"])
        
        start_time = time.time()
        
        try:
            response = self.client.post(
                "/api/auth/logout",
                headers={
                    "Authorization": f"Bearer {expired_token}",
                    "Content-Type": "application/json"
                },
                name="logout_expired_token"
            )
            
            # Valida√ß√µes esperadas para token expirado
            if response.status_code == 401:
                logger.info("Token expirado rejeitado corretamente")
                
            elif response.status_code == 422:
                logger.info("Token malformado rejeitado corretamente")
                
            else:
                logger.warning(f"Resposta inesperada para token expirado: {response.status_code}")
                
        except Exception as e:
            logger.error(f"Exce√ß√£o no logout com token expirado: {e}")
            self.environment.events.request_failure.fire(
                request_type="POST",
                name="logout_expired_token",
                response_time=time.time() - start_time,
                exception=e
            )
    
    @task(15)  # 15% das requisi√ß√µes
    def logout_no_token(self):
        """
        üö´ Cen√°rio: Logout sem token
        üìä CoCoT: Contexto de autentica√ß√£o ausente
        üéØ ToT: Abordagem de teste de valida√ß√£o
        """
        start_time = time.time()
        
        try:
            response = self.client.post(
                "/api/auth/logout",
                headers={"Content-Type": "application/json"},
                name="logout_no_token"
            )
            
            # Valida√ß√µes esperadas para requisi√ß√£o sem token
            if response.status_code == 401:
                logger.info("Requisi√ß√£o sem token rejeitada corretamente")
                
            else:
                logger.warning(f"Resposta inesperada para requisi√ß√£o sem token: {response.status_code}")
                
        except Exception as e:
            logger.error(f"Exce√ß√£o no logout sem token: {e}")
            self.environment.events.request_failure.fire(
                request_type="POST",
                name="logout_no_token",
                response_time=time.time() - start_time,
                exception=e
            )
    
    @task(15)  # 15% das requisi√ß√µes
    def logout_malformed_token(self):
        """
        üõ°Ô∏è Cen√°rio: Logout com token malformado
        üìä CoCoT: Tend√™ncia de ataques de seguran√ßa
        üéØ ToT: Abordagem de teste de robustez
        """
        malformed_token = random.choice(self.test_data["malformed_tokens"])
        
        start_time = time.time()
        
        try:
            response = self.client.post(
                "/api/auth/logout",
                headers={
                    "Authorization": f"Bearer {malformed_token}",
                    "Content-Type": "application/json"
                },
                name="logout_malformed_token"
            )
            
            # Valida√ß√µes esperadas para token malformado
            if response.status_code in [401, 422]:
                logger.info(f"Token malformado rejeitado corretamente: {response.status_code}")
                
            else:
                logger.warning(f"Resposta inesperada para token malformado: {response.status_code}")
                
        except Exception as e:
            logger.error(f"Exce√ß√£o no logout com token malformado: {e}")
            self.environment.events.request_failure.fire(
                request_type="POST",
                name="logout_malformed_token",
                response_time=time.time() - start_time,
                exception=e
            )
    
    @task(10)  # 10% das requisi√ß√µes
    def logout_concurrent_sessions(self):
        """
        üîÑ Cen√°rio: Logout com m√∫ltiplas sess√µes
        üìä CoCoT: Contexto de uso real
        üéØ ToT: Abordagem de teste de concorr√™ncia
        """
        if not self.auth_token:
            return
            
        start_time = time.time()
        
        try:
            # Simular logout concorrente
            responses = []
            for i in range(3):
                response = self.client.post(
                    "/api/auth/logout",
                    headers={
                        "Authorization": f"Bearer {self.auth_token}",
                        "Content-Type": "application/json"
                    },
                    name=f"logout_concurrent_{i}"
                )
                responses.append(response)
            
            # Analisar respostas
            success_count = sum(1 for r in responses if r.status_code == 200)
            logger.info(f"Logout concorrente: {success_count}/3 sucessos")
            
        except Exception as e:
            logger.error(f"Exce√ß√£o no logout concorrente: {e}")
            self.environment.events.request_failure.fire(
                request_type="POST",
                name="logout_concurrent_sessions",
                response_time=time.time() - start_time,
                exception=e
            )

# Event listeners para m√©tricas customizadas
@events.request.add_listener
def on_request(request_type, name, response_time, response_length, response, context, exception, start_time, url, **kwargs):
    """Listener para m√©tricas customizadas"""
    if name.startswith("logout_"):
        # M√©tricas espec√≠ficas de logout
        if response and response.status_code == 200:
            logger.info(f"‚úÖ Logout bem-sucedido: {name} - {response_time:.2f}ms")
        elif response and response.status_code == 401:
            logger.info(f"üîí Logout rejeitado (401): {name} - {response_time:.2f}ms")
        elif exception:
            logger.error(f"‚ùå Erro no logout: {name} - {exception}")

@events.test_start.add_listener
def on_test_start(environment, **kwargs):
    """Inicializa√ß√£o do teste"""
    logger.info("üöÄ Iniciando teste de carga para endpoint de logout")
    logger.info(f"üìä Configura√ß√£o: {environment.host}")
    logger.info("üéØ Cen√°rios: Logout v√°lido, expirado, sem token, malformado, concorrente")

@events.test_stop.add_listener
def on_test_stop(environment, **kwargs):
    """Finaliza√ß√£o do teste"""
    logger.info("üèÅ Teste de carga de logout finalizado")
    
    # Estat√≠sticas finais
    stats = environment.stats
    logout_stats = {
        "total_requests": stats.total.num_requests,
        "failed_requests": stats.total.num_failures,
        "avg_response_time": stats.total.avg_response_time,
        "max_response_time": stats.total.max_response_time,
        "min_response_time": stats.total.min_response_time,
        "requests_per_sec": stats.total.current_rps
    }
    
    logger.info(f"üìà Estat√≠sticas finais: {json.dumps(logout_stats, indent=2)}")

# Configura√ß√µes de teste
class LogoutTestConfig:
    """Configura√ß√µes espec√≠ficas para teste de logout"""
    
    # Limites de performance baseados no c√≥digo real
    MAX_RESPONSE_TIME = 2000  # 2 segundos
    MAX_ERROR_RATE = 0.05     # 5%
    EXPECTED_RPS = 100        # 100 requests por segundo
    
    # Cen√°rios de teste
    SCENARIOS = {
        "logout_valid_token": {
            "weight": 40,
            "expected_status": 200,
            "description": "Logout com token v√°lido"
        },
        "logout_expired_token": {
            "weight": 20,
            "expected_status": 401,
            "description": "Logout com token expirado"
        },
        "logout_no_token": {
            "weight": 15,
            "expected_status": 401,
            "description": "Logout sem token"
        },
        "logout_malformed_token": {
            "weight": 15,
            "expected_status": [401, 422],
            "description": "Logout com token malformado"
        },
        "logout_concurrent_sessions": {
            "weight": 10,
            "expected_status": 200,
            "description": "Logout com sess√µes concorrentes"
        }
    }
    
    # Crit√©rios de sucesso
    SUCCESS_CRITERIA = {
        "response_time_p95": 1500,  # 95% das requisi√ß√µes < 1.5s
        "error_rate": 0.05,         # Taxa de erro < 5%
        "throughput": 50,           # M√≠nimo 50 RPS
        "availability": 0.99        # 99% de disponibilidade
    } 