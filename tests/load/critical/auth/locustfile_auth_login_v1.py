"""
üß™ TESTE DE CARGA CR√çTICO - AUTENTICA√á√ÉO LOGIN
üìê CoCoT Analysis | üå≤ ToT Approach | ‚ôªÔ∏è ReAct Simulation | üñºÔ∏è Visual Representation

Tracing ID: LOAD_TEST_AUTH_LOGIN_20250127_001
Baseado em: backend/app/api/auth.py (linhas 79-146)
Schema: backend/app/schemas/auth.py (LoginRequest)
Modelo: backend/app/models/user.py

üìä AN√ÅLISE CoCoT:
- Comprova√ß√£o: Endpoint cr√≠tico para seguran√ßa do sistema
- Causalidade: Login √© gateway para todas as funcionalidades
- Contexto: Sistema de autentica√ß√£o JWT com rate limiting
- Tend√™ncia: Testes de carga modernos com Locust + m√©tricas

üå≤ AN√ÅLISE ToT:
1. Cen√°rio 1: Carga normal (usu√°rios v√°lidos)
2. Cen√°rio 2: Ataque de for√ßa bruta (credenciais inv√°lidas)
3. Cen√°rio 3: Rate limiting (exceder limites)
4. Cen√°rio 4: Dados malformados (valida√ß√£o)

‚ôªÔ∏è SIMULA√á√ÉO ReAct:
- Efeitos colaterais: Bloqueio de IPs, logs de seguran√ßa
- Ganhos: Identifica√ß√£o de gargalos, valida√ß√£o de rate limiting
- Riscos: Sobrecarga do banco, impacto em usu√°rios reais
"""

import time
import json
import random
from locust import HttpUser, task, between, events
from typing import Dict, List, Optional
import logging

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AuthLoginLoadTest(HttpUser):
    """
    Teste de carga para endpoint de login
    Baseado no c√≥digo real: backend/app/api/auth.py
    """
    
    # Tempo entre requisi√ß√µes (1-3 segundos)
    wait_time = between(1, 3)
    
    # Dados de teste baseados no schema real
    VALID_USERS = [
        {"username": "admin_user", "senha": "Admin@123"},
        {"username": "premium_user", "senha": "Premium@456"},
        {"username": "basic_user", "senha": "Basic@789"},
        {"username": "test_user", "senha": "Test@101"},
        {"username": "demo_user", "senha": "Demo@202"}
    ]
    
    INVALID_CREDENTIALS = [
        {"username": "invalid_user", "senha": "wrong_password"},
        {"username": "nonexistent", "senha": "random_pass"},
        {"username": "admin_user", "senha": "wrong_password"},
        {"username": "", "senha": "test_password"},
        {"username": "test_user", "senha": ""}
    ]
    
    MALFORMED_DATA = [
        {"username": "a" * 100, "senha": "test"},  # Username muito longo
        {"username": "test", "senha": "a" * 200},  # Senha muito longa
        {"username": "test<script>", "senha": "test"},  # Caracteres especiais
        {"username": "123456", "senha": "test"},  # Apenas n√∫meros
        {"username": "test", "senha": "<script>alert('xss')</script>"}  # XSS
    ]
    
    def on_start(self):
        """Inicializa√ß√£o do teste"""
        logger.info("üöÄ Iniciando teste de carga para /api/auth/login")
        self.test_start_time = time.time()
        
        # Headers padr√£o baseados no c√≥digo real
        self.headers = {
            'Content-Type': 'application/json',
            'User-Agent': 'OmniKeywordsFinder-LoadTest/1.0',
            'Accept': 'application/json'
        }
    
    @task(4)  # 40% das requisi√ß√µes - Cen√°rio normal
    def test_valid_login(self):
        """
        Teste de login com credenciais v√°lidas
        Baseado em: backend/app/api/auth.py linha 79-146
        """
        user_data = random.choice(self.VALID_USERS)
        
        with self.client.post(
            "/api/auth/login",
            json=user_data,
            headers=self.headers,
            catch_response=True,
            name="Login V√°lido"
        ) as response:
            
            # Valida√ß√£o baseada no c√≥digo real
            if response.status_code == 200:
                try:
                    data = response.json()
                    
                    # Verificar estrutura da resposta (baseado no c√≥digo real)
                    required_fields = ['success', 'access_token', 'user_id', 'message']
                    for field in required_fields:
                        if field not in data:
                            response.failure(f"Campo obrigat√≥rio ausente: {field}")
                            return
                    
                    # Validar tipos dos campos
                    if not isinstance(data['success'], bool) or not data['success']:
                        response.failure("Campo 'success' deve ser true")
                        return
                    
                    if not isinstance(data['access_token'], str) or len(data['access_token']) < 10:
                        response.failure("Token JWT inv√°lido")
                        return
                    
                    if not isinstance(data['user_id'], int) or data['user_id'] <= 0:
                        response.failure("ID do usu√°rio inv√°lido")
                        return
                    
                    response.success()
                    logger.info(f"‚úÖ Login v√°lido bem-sucedido para: {user_data['username']}")
                    
                except json.JSONDecodeError:
                    response.failure("Resposta n√£o √© JSON v√°lido")
                    return
                    
            elif response.status_code == 401:
                # Credenciais inv√°lidas (esperado para alguns usu√°rios de teste)
                response.success()
                logger.warning(f"‚ö†Ô∏è Login falhou (esperado): {user_data['username']}")
                
            elif response.status_code == 429:
                # Rate limiting atingido
                response.success()
                logger.warning(f"‚è±Ô∏è Rate limiting atingido para: {user_data['username']}")
                
            else:
                response.failure(f"Status code inesperado: {response.status_code}")
    
    @task(3)  # 30% das requisi√ß√µes - Cen√°rio de for√ßa bruta
    def test_invalid_login(self):
        """
        Teste de login com credenciais inv√°lidas
        Baseado em: backend/app/api/auth.py linha 95-105
        """
        invalid_data = random.choice(self.INVALID_CREDENTIALS)
        
        with self.client.post(
            "/api/auth/login",
            json=invalid_data,
            headers=self.headers,
            catch_response=True,
            name="Login Inv√°lido"
        ) as response:
            
            # Valida√ß√£o baseada no c√≥digo real
            if response.status_code == 401:
                try:
                    data = response.json()
                    
                    # Verificar estrutura de erro (baseado no c√≥digo real)
                    if 'error_code' in data and data['error_code'] == 'INVALID_CREDENTIALS':
                        response.success()
                        logger.info(f"‚úÖ Erro de credenciais inv√°lidas (esperado): {invalid_data['username']}")
                    else:
                        response.failure("Estrutura de erro inv√°lida")
                        return
                        
                except json.JSONDecodeError:
                    response.failure("Resposta de erro n√£o √© JSON v√°lido")
                    return
                    
            elif response.status_code == 429:
                # Rate limiting por tentativas inv√°lidas
                response.success()
                logger.warning(f"‚è±Ô∏è Rate limiting por tentativas inv√°lidas: {invalid_data['username']}")
                
            else:
                response.failure(f"Status code inesperado para credenciais inv√°lidas: {response.status_code}")
    
    @task(2)  # 20% das requisi√ß√µes - Cen√°rio de valida√ß√£o
    def test_malformed_data(self):
        """
        Teste de login com dados malformados
        Baseado em: backend/app/schemas/auth.py (valida√ß√µes)
        """
        malformed_data = random.choice(self.MALFORMED_DATA)
        
        with self.client.post(
            "/api/auth/login",
            json=malformed_data,
            headers=self.headers,
            catch_response=True,
            name="Dados Malformados"
        ) as response:
            
            # Valida√ß√£o baseada no schema real
            if response.status_code == 400:
                try:
                    data = response.json()
                    
                    # Verificar se √© erro de valida√ß√£o
                    if 'error_code' in data and data['error_code'] == 'VALIDATION_ERROR':
                        response.success()
                        logger.info(f"‚úÖ Valida√ß√£o de dados malformados (esperado): {malformed_data['username']}")
                    else:
                        response.failure("Estrutura de erro de valida√ß√£o inv√°lida")
                        return
                        
                except json.JSONDecodeError:
                    response.failure("Resposta de valida√ß√£o n√£o √© JSON v√°lido")
                    return
                    
            elif response.status_code == 422:
                # Erro de valida√ß√£o Pydantic
                response.success()
                logger.info(f"‚úÖ Erro de valida√ß√£o Pydantic (esperado): {malformed_data['username']}")
                
            else:
                response.failure(f"Status code inesperado para dados malformados: {response.status_code}")
    
    @task(1)  # 10% das requisi√ß√µes - Cen√°rio de rate limiting
    def test_rate_limiting(self):
        """
        Teste de rate limiting
        Baseado em: backend/app/middleware/rate_limiter.py
        """
        # Fazer m√∫ltiplas requisi√ß√µes r√°pidas para testar rate limiting
        for i in range(5):
            user_data = random.choice(self.VALID_USERS)
            
            with self.client.post(
                "/api/auth/login",
                json=user_data,
                headers=self.headers,
                catch_response=True,
                name="Rate Limiting Test"
            ) as response:
                
                if response.status_code == 429:
                    # Rate limiting atingido
                    response.success()
                    logger.info(f"‚úÖ Rate limiting funcionando (esperado) - tentativa {i+1}")
                    break
                elif response.status_code in [200, 401]:
                    # Requisi√ß√£o processada normalmente
                    response.success()
                else:
                    response.failure(f"Status code inesperado no teste de rate limiting: {response.status_code}")
    
    def on_stop(self):
        """Finaliza√ß√£o do teste"""
        test_duration = time.time() - self.test_start_time
        logger.info(f"üèÅ Teste de carga finalizado. Dura√ß√£o: {test_duration:.2f}s")

# Event listeners para m√©tricas customizadas
@events.request.add_listener
def my_request_handler(request_type, name, response_time, response_length, response, context, exception, start_time, url, **kwargs):
    """Listener para m√©tricas customizadas"""
    if name == "Login V√°lido" and response.status_code == 200:
        # Log de sucesso
        logger.info(f"‚úÖ Login v√°lido: {response_time}ms")
    elif name == "Login Inv√°lido" and response.status_code == 401:
        # Log de falha esperada
        logger.info(f"‚ö†Ô∏è Login inv√°lido (esperado): {response_time}ms")
    elif response.status_code == 429:
        # Log de rate limiting
        logger.warning(f"‚è±Ô∏è Rate limiting: {response_time}ms")

# Configura√ß√£o para execu√ß√£o
if __name__ == "__main__":
    print("üß™ TESTE DE CARGA - AUTENTICA√á√ÉO LOGIN")
    print("üìä Baseado em c√≥digo real do sistema")
    print("üéØ Endpoint: /api/auth/login")
    print("üìã Executar com: locust -f locustfile_auth_login_v1.py") 