"""
Teste de Carga - Exporta√ß√£o de Analytics
========================================

Endpoint: /api/v1/analytics/export
M√©todo: POST
Criticidade: ALTO (Funcionalidade core)

Baseado em: backend/app/api/advanced_analytics.py (linhas 325-405)
"""

import json
import random
from datetime import datetime, timezone
from locust import HttpUser, task, between, events
from typing import Dict, Any


class AnalyticsExportLoadTest(HttpUser):
    """
    Teste de carga para endpoint de exporta√ß√£o de analytics
    
    Baseado no endpoint real: /api/v1/analytics/export
    """
    
    wait_time = between(5, 10)  # Intervalo maior para exporta√ß√£o
    
    def on_start(self):
        """Setup inicial - autentica√ß√£o"""
        self.auth_token = self._authenticate()
        self.time_ranges = ["1d", "7d", "30d", "90d"]
        self.categories = ["all", "marketing", "ecommerce", "saas", "blog"]
        self.nichos = ["all", "tech", "health", "finance", "education"]
        self.formats = ["csv", "json", "excel", "pdf"]
        self.metrics = ["performance", "efficiency", "behavior"]
    
    def _authenticate(self) -> str:
        """Autentica√ß√£o para obter token"""
        try:
            response = self.client.post("/api/auth/login", json={
                "email": "test@example.com",
                "password": "testpassword123"
            })
            
            if response.status_code == 200:
                data = response.json()
                return data.get("access_token", "")
            else:
                print(f"Falha na autentica√ß√£o: {response.status_code}")
                return ""
                
        except Exception as e:
            print(f"Erro na autentica√ß√£o: {str(e)}")
            return ""
    
    @task(3)
    def test_export_csv(self):
        """Teste de exporta√ß√£o CSV"""
        headers = {
            "Authorization": f"Bearer {self.auth_token}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "format": "csv",
            "timeRange": random.choice(self.time_ranges),
            "category": random.choice(self.categories),
            "nicho": random.choice(self.nichos),
            "metrics": random.sample(self.metrics, random.randint(1, 3))
        }
        
        with self.client.post(
            "/api/v1/analytics/export",
            json=payload,
            headers=headers,
            catch_response=True
        ) as response:
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    response.success()
                else:
                    response.failure(f"Exporta√ß√£o CSV falhou: {data.get('error')}")
            elif response.status_code == 400:
                response.success()  # Erro esperado para par√¢metros inv√°lidos
            else:
                response.failure(f"Status inesperado CSV: {response.status_code}")
    
    @task(2)
    def test_export_json(self):
        """Teste de exporta√ß√£o JSON"""
        headers = {
            "Authorization": f"Bearer {self.auth_token}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "format": "json",
            "timeRange": random.choice(self.time_ranges),
            "category": random.choice(self.categories),
            "nicho": random.choice(self.nichos),
            "metrics": ["performance", "efficiency"]
        }
        
        with self.client.post(
            "/api/v1/analytics/export",
            json=payload,
            headers=headers,
            catch_response=True
        ) as response:
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    response.success()
                else:
                    response.failure(f"Exporta√ß√£o JSON falhou: {data.get('error')}")
            elif response.status_code == 400:
                response.success()  # Erro esperado
            else:
                response.failure(f"Status inesperado JSON: {response.status_code}")
    
    @task(2)
    def test_export_excel(self):
        """Teste de exporta√ß√£o Excel"""
        headers = {
            "Authorization": f"Bearer {self.auth_token}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "format": "excel",
            "timeRange": random.choice(self.time_ranges),
            "category": random.choice(self.categories),
            "nicho": random.choice(self.nichos),
            "metrics": ["performance", "efficiency", "behavior"]
        }
        
        with self.client.post(
            "/api/v1/analytics/export",
            json=payload,
            headers=headers,
            catch_response=True
        ) as response:
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    response.success()
                else:
                    response.failure(f"Exporta√ß√£o Excel falhou: {data.get('error')}")
            elif response.status_code == 400:
                response.success()  # Erro esperado
            else:
                response.failure(f"Status inesperado Excel: {response.status_code}")
    
    @task(1)
    def test_export_pdf(self):
        """Teste de exporta√ß√£o PDF"""
        headers = {
            "Authorization": f"Bearer {self.auth_token}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "format": "pdf",
            "timeRange": random.choice(self.time_ranges),
            "category": random.choice(self.categories),
            "nicho": random.choice(self.nichos),
            "metrics": ["performance"]
        }
        
        with self.client.post(
            "/api/v1/analytics/export",
            json=payload,
            headers=headers,
            catch_response=True
        ) as response:
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    response.success()
                else:
                    response.failure(f"Exporta√ß√£o PDF falhou: {data.get('error')}")
            elif response.status_code == 400:
                response.success()  # Erro esperado
            else:
                response.failure(f"Status inesperado PDF: {response.status_code}")
    
    @task(1)
    def test_export_invalid_format(self):
        """Teste de exporta√ß√£o com formato inv√°lido"""
        headers = {
            "Authorization": f"Bearer {self.auth_token}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "format": "invalid_format",
            "timeRange": "7d",
            "category": "all",
            "nicho": "all",
            "metrics": ["performance"]
        }
        
        with self.client.post(
            "/api/v1/analytics/export",
            json=payload,
            headers=headers,
            catch_response=True
        ) as response:
            if response.status_code == 400:
                response.success()  # Esperado para formato inv√°lido
            else:
                response.failure(f"Status inesperado formato inv√°lido: {response.status_code}")
    
    @task(1)
    def test_export_without_auth(self):
        """Teste de exporta√ß√£o sem autentica√ß√£o"""
        payload = {
            "format": "csv",
            "timeRange": "7d",
            "category": "all",
            "nicho": "all",
            "metrics": ["performance"]
        }
        
        headers = {"Content-Type": "application/json"}
        
        with self.client.post(
            "/api/v1/analytics/export",
            json=payload,
            headers=headers,
            catch_response=True
        ) as response:
            if response.status_code == 401:
                response.success()  # Esperado sem autentica√ß√£o
            else:
                response.failure(f"Status inesperado sem auth: {response.status_code}")
    
    @task(1)
    def test_export_large_dataset(self):
        """Teste de exporta√ß√£o com dataset grande"""
        headers = {
            "Authorization": f"Bearer {self.auth_token}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "format": "csv",
            "timeRange": "90d",
            "category": "all",
            "nicho": "all",
            "metrics": ["performance", "efficiency", "behavior"]
        }
        
        with self.client.post(
            "/api/v1/analytics/export",
            json=payload,
            headers=headers,
            catch_response=True
        ) as response:
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    response.success()
                else:
                    response.failure(f"Exporta√ß√£o grande falhou: {data.get('error')}")
            elif response.status_code in [400, 413]:
                response.success()  # Erro esperado para dataset muito grande
            else:
                response.failure(f"Status inesperado dataset grande: {response.status_code}")


@events.test_start.add_listener
def on_test_start(environment, **kwargs):
    """Evento de in√≠cio do teste"""
    print("üöÄ Iniciando teste de carga - Exporta√ß√£o de Analytics")
    print(f"üìä Base URL: {environment.host}")
    print(f"üë• Usu√°rios: {environment.runner.user_count}")


@events.test_stop.add_listener
def on_test_stop(environment, **kwargs):
    """Evento de fim do teste"""
    print("‚úÖ Teste de carga - Exporta√ß√£o de Analytics finalizado")
    print(f"üìà Total de requisi√ß√µes: {environment.stats.total.num_requests}")
    print(f"‚è±Ô∏è Tempo m√©dio de resposta: {environment.stats.total.avg_response_time:.2f}ms") 