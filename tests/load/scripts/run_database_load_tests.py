#!/usr/bin/env python3
"""
Script de execu√ß√£o para testes de carga de banco de dados

Prompt: CHECKLIST_TESTES_CARGA_CRITICIDADE.md - N√≠vel M√©dio
Ruleset: enterprise_control_layer.yaml
Data: 2025-01-27
Tracing ID: LOAD_DATABASE_20250127_001

Funcionalidades:
- Execu√ß√£o de testes de carga para banco de dados
- Configura√ß√£o de par√¢metros de teste
- Monitoramento de m√©tricas
- Gera√ß√£o de relat√≥rios
- Valida√ß√£o de resultados
"""

import os
import sys
import argparse
import subprocess
import time
import json
from datetime import datetime
from pathlib import Path

# Adicionar diret√≥rio raiz ao path
sys.path.append(str(Path(__file__).parent.parent.parent))

def run_database_load_test(
    users: int = 50,
    spawn_rate: int = 10,
    host: str = "http://localhost:8000",
    duration: int = 300,
    output_dir: str = "reports/database_load"
):
    """
    Executa teste de carga de banco de dados
    
    Args:
        users: N√∫mero de usu√°rios concorrentes
        spawn_rate: Taxa de spawn de usu√°rios por segundo
        host: Host do servidor
        duration: Dura√ß√£o do teste em segundos
        output_dir: Diret√≥rio de sa√≠da dos relat√≥rios
    """
    
    print(f"üöÄ Iniciando teste de carga de banco de dados")
    print(f"üìä Par√¢metros:")
    print(f"   - Usu√°rios: {users}")
    print(f"   - Taxa de spawn: {spawn_rate}/s")
    print(f"   - Host: {host}")
    print(f"   - Dura√ß√£o: {duration}s")
    print(f"   - Sa√≠da: {output_dir}")
    
    # Criar diret√≥rio de sa√≠da
    os.makedirs(output_dir, exist_ok=True)
    
    # Nome do arquivo de teste
    locustfile = "tests/load/medium/infrastructure/locustfile_database_load_v1.py"
    
    # Verificar se arquivo existe
    if not os.path.exists(locustfile):
        print(f"‚ùå Arquivo de teste n√£o encontrado: {locustfile}")
        return False
    
    # Comando Locust
    cmd = [
        "locust",
        "-f", locustfile,
        "--host", host,
        "--users", str(users),
        "--spawn-rate", str(spawn_rate),
        "--run-time", f"{duration}s",
        "--headless",
        "--html", f"{output_dir}/database_load_report.html",
        "--csv", f"{output_dir}/database_load_metrics",
        "--json", f"{output_dir}/database_load_results.json"
    ]
    
    print(f"üîß Comando: {' '.join(cmd)}")
    
    try:
        # Executar teste
        start_time = time.time()
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=duration + 60)
        end_time = time.time()
        
        # Verificar resultado
        if result.returncode == 0:
            print(f"‚úÖ Teste conclu√≠do com sucesso em {end_time - start_time:.2f}s")
            
            # Gerar relat√≥rio resumido
            generate_summary_report(output_dir, users, spawn_rate, duration)
            
            return True
        else:
            print(f"‚ùå Teste falhou com c√≥digo {result.returncode}")
            print(f"üìù Erro: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print(f"‚è∞ Teste expirou ap√≥s {duration + 60}s")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao executar teste: {e}")
        return False

def generate_summary_report(output_dir: str, users: int, spawn_rate: int, duration: int):
    """Gera relat√≥rio resumido do teste"""
    
    report_file = f"{output_dir}/database_load_summary.md"
    
    with open(report_file, "w", encoding="utf-8") as f:
        f.write(f"""# üìä Relat√≥rio de Teste de Carga - Banco de Dados

**Data/Hora**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Tracing ID**: LOAD_DATABASE_20250127_001

## üìà Par√¢metros do Teste

- **Usu√°rios**: {users}
- **Taxa de Spawn**: {spawn_rate}/s
- **Dura√ß√£o**: {duration}s
- **Host**: http://localhost:8000

## üéØ Endpoints Testados

### Opera√ß√µes de Leitura
- `GET /api/nichos` - Listagem de nichos com pagina√ß√£o
- `GET /api/categorias` - Listagem de categorias com filtros
- `GET /api/execucoes` - Listagem de execu√ß√µes com joins
- `GET /api/logs/execucoes` - Consulta de logs com filtros complexos
- `GET /api/notificacoes` - Listagem de notifica√ß√µes
- `GET /api/prompt-system/nichos` - Listagem de nichos do prompt system
- `GET /api/prompt-system/categorias` - Listagem de categorias do prompt system

### Opera√ß√µes de Escrita (Transa√ß√µes)
- `POST /api/execucoes` - Cria√ß√£o de execu√ß√µes
- `POST /api/prompt-system/nichos` - Cria√ß√£o de nichos
- `POST /api/prompt-system/categorias` - Cria√ß√£o de categorias

## üîç Cen√°rios de Teste

### 1. Carga em Pool de Conex√µes
- Testa o comportamento do pool de conex√µes sob carga
- Valida limites de conex√µes simult√¢neas
- Monitora tempo de espera por conex√£o

### 2. Queries Complexas com Joins
- Testa queries que envolvem m√∫ltiplas tabelas
- Valida performance de joins complexos
- Monitora uso de √≠ndices

### 3. Transa√ß√µes Concorrentes
- Testa opera√ß√µes de escrita simult√¢neas
- Valida isolamento de transa√ß√µes
- Monitora deadlocks e timeouts

### 4. Pagina√ß√£o e Filtros
- Testa queries com pagina√ß√£o
- Valida performance com diferentes tamanhos de p√°gina
- Monitora uso de mem√≥ria

### 5. Consultas de Logs
- Testa queries em tabelas de logs
- Valida performance com filtros complexos
- Monitora uso de √≠ndices em logs

## üìä M√©tricas Coletadas

- **Response Time**: Tempo de resposta por endpoint
- **Throughput**: Requisi√ß√µes por segundo
- **Error Rate**: Taxa de erros
- **Database Connections**: Uso do pool de conex√µes
- **Query Performance**: Performance de queries espec√≠ficas

## üìÅ Arquivos Gerados

- `database_load_report.html` - Relat√≥rio HTML detalhado
- `database_load_metrics.csv` - M√©tricas em CSV
- `database_load_results.json` - Resultados em JSON
- `database_load_summary.md` - Este relat√≥rio resumido

## üéØ Pr√≥ximos Passos

1. Analisar m√©tricas de performance
2. Identificar gargalos no banco de dados
3. Otimizar queries problem√°ticas
4. Ajustar configura√ß√µes do pool de conex√µes
5. Implementar √≠ndices necess√°rios

---
**Gerado automaticamente pelo sistema de testes de carga**
""")
    
    print(f"üìÑ Relat√≥rio resumido gerado: {report_file}")

def main():
    """Fun√ß√£o principal"""
    parser = argparse.ArgumentParser(description="Executar testes de carga de banco de dados")
    
    parser.add_argument(
        "-u", "--users",
        type=int,
        default=50,
        help="N√∫mero de usu√°rios concorrentes (default: 50)"
    )
    
    parser.add_argument(
        "-r", "--spawn-rate",
        type=int,
        default=10,
        help="Taxa de spawn de usu√°rios por segundo (default: 10)"
    )
    
    parser.add_argument(
        "--host",
        type=str,
        default="http://localhost:8000",
        help="Host do servidor (default: http://localhost:8000)"
    )
    
    parser.add_argument(
        "-d", "--duration",
        type=int,
        default=300,
        help="Dura√ß√£o do teste em segundos (default: 300)"
    )
    
    parser.add_argument(
        "-o", "--output",
        type=str,
        default="reports/database_load",
        help="Diret√≥rio de sa√≠da (default: reports/database_load)"
    )
    
    args = parser.parse_args()
    
    # Executar teste
    success = run_database_load_test(
        users=args.users,
        spawn_rate=args.spawn_rate,
        host=args.host,
        duration=args.duration,
        output_dir=args.output
    )
    
    if success:
        print(f"üéâ Teste de carga de banco de dados executado com sucesso!")
        print(f"üìä Relat√≥rios dispon√≠veis em: {args.output}")
        sys.exit(0)
    else:
        print(f"‚ùå Teste de carga de banco de dados falhou!")
        sys.exit(1)

if __name__ == "__main__":
    main() 