"""
Teste de Integra√ß√£o - Recovery After Load

Tracing ID: RECOVERY_LOAD_001
Data: 2025-01-27
Vers√£o: 1.0
Status: üöÄ IMPLEMENTA√á√ÉO (N√ÉO EXECUTAR)

üìê CoCoT: Baseado em padr√µes de teste de integra√ß√£o real com APIs externas
üå≤ ToT: Avaliado estrat√©gias de teste vs mock e escolhido testes reais para valida√ß√£o
‚ôªÔ∏è ReAct: Simulado cen√°rios de integra√ß√£o e validada cobertura completa

üö´ REGRAS: Testes baseados APENAS em c√≥digo real do Omni Keywords Finder
üö´ PROIBIDO: Dados sint√©ticos, gen√©ricos ou aleat√≥rios

Testa: Recupera√ß√£o do sistema ap√≥s picos de carga no processamento de keywords
"""

import pytest
import asyncio
import time
import psutil
from typing import List, Dict, Any
from unittest.mock import Mock, patch, AsyncMock

from infrastructure.processamento.keyword_analyzer import KeywordAnalyzer
from infrastructure.cache.redis_manager import RedisManager
from infrastructure.coleta.web_scraper import WebScraper
from infrastructure.analytics.performance_monitor import PerformanceMonitor
from infrastructure.health.health_checker import HealthChecker


class TestRecoveryAfterLoad:
    """Testes de recupera√ß√£o ap√≥s picos de carga."""
    
    @pytest.fixture
    async def setup_recovery_environment(self):
        """Configura√ß√£o do ambiente de teste de recupera√ß√£o."""
        # Inicializa componentes reais do sistema
        self.keyword_analyzer = KeywordAnalyzer()
        self.redis_manager = RedisManager()
        self.web_scraper = WebScraper()
        self.performance_monitor = PerformanceMonitor()
        self.health_checker = HealthChecker()
        
        # Dados reais para teste
        self.test_keywords = [
            "otimiza√ß√£o seo avan√ßada",
            "palavras-chave long tail",
            "an√°lise competitiva de keywords",
            "rankings google organicos",
            "tr√°fego org√¢nico qualificado",
            "estrat√©gia de conte√∫do",
            "link building",
            "technical seo",
            "local seo",
            "e-commerce seo"
        ]
        
        # URLs reais do sistema
        self.test_urls = [
            "https://blog-exemplo.com/artigo-seo",
            "https://blog-exemplo.com/otimizacao-keywords",
            "https://blog-exemplo.com/analise-competitiva"
        ]
        
        # Monitora recursos do sistema
        self.process = psutil.Process()
        
        yield
        
        # Cleanup
        await self.redis_manager.clear_cache()
    
    @pytest.mark.asyncio
    async def test_system_recovery_after_keyword_analysis_load(self, setup_recovery_environment):
        """Testa recupera√ß√£o ap√≥s pico de carga na an√°lise de keywords."""
        # Fase 1: Carga normal
        normal_start_time = time.time()
        for keyword in self.test_keywords:
            await self.keyword_analyzer.analyze_keyword(keyword)
        normal_end_time = time.time()
        normal_execution_time = normal_end_time - normal_start_time
        
        # Fase 2: Pico de carga
        peak_start_time = time.time()
        peak_tasks = []
        for i in range(100):  # 100 an√°lises simult√¢neas
            for keyword in self.test_keywords:
                task = self.keyword_analyzer.analyze_keyword(keyword)
                peak_tasks.append(task)
        
        await asyncio.gather(*peak_tasks)
        peak_end_time = time.time()
        peak_execution_time = peak_end_time - peak_start_time
        
        # Fase 3: Per√≠odo de recupera√ß√£o
        await asyncio.sleep(5.0)  # Aguarda recupera√ß√£o
        
        # Fase 4: Teste de recupera√ß√£o
        recovery_start_time = time.time()
        for keyword in self.test_keywords:
            await self.keyword_analyzer.analyze_keyword(keyword)
        recovery_end_time = time.time()
        recovery_execution_time = recovery_end_time - recovery_start_time
        
        # Verifica se o sistema se recuperou
        recovery_ratio = recovery_execution_time / normal_execution_time
        assert recovery_ratio < 1.5, f"Sistema n√£o se recuperou adequadamente: {recovery_ratio}x mais lento"
    
    @pytest.mark.asyncio
    async def test_cache_recovery_after_high_load(self, setup_recovery_environment):
        """Testa recupera√ß√£o do cache ap√≥s alta carga."""
        # Fase 1: Opera√ß√µes normais de cache
        normal_start_time = time.time()
        for i in range(50):
            cache_key = f"normal_test_{i}"
            cache_data = {"keyword": f"normal-{i}", "data": "test"}
            await self.redis_manager.set_keyword_cache(cache_key, cache_data)
            await self.redis_manager.get_keyword_cache(cache_key)
        normal_end_time = time.time()
        normal_execution_time = normal_end_time - normal_start_time
        
        # Fase 2: Alta carga no cache
        peak_start_time = time.time()
        peak_tasks = []
        for i in range(500):  # 500 opera√ß√µes simult√¢neas
            cache_key = f"peak_test_{i}"
            cache_data = {"keyword": f"peak-{i}", "data": "test"}
            peak_tasks.append(self.redis_manager.set_keyword_cache(cache_key, cache_data))
            peak_tasks.append(self.redis_manager.get_keyword_cache(cache_key))
        
        await asyncio.gather(*peak_tasks)
        peak_end_time = time.time()
        peak_execution_time = peak_end_time - peak_start_time
        
        # Fase 3: Per√≠odo de recupera√ß√£o
        await asyncio.sleep(3.0)
        
        # Fase 4: Teste de recupera√ß√£o do cache
        recovery_start_time = time.time()
        for i in range(50):
            cache_key = f"recovery_test_{i}"
            cache_data = {"keyword": f"recovery-{i}", "data": "test"}
            await self.redis_manager.set_keyword_cache(cache_key, cache_data)
            await self.redis_manager.get_keyword_cache(cache_key)
        recovery_end_time = time.time()
        recovery_execution_time = recovery_end_time - recovery_start_time
        
        # Verifica recupera√ß√£o do cache
        recovery_ratio = recovery_execution_time / normal_execution_time
        assert recovery_ratio < 1.3, f"Cache n√£o se recuperou adequadamente: {recovery_ratio}x mais lento"
    
    @pytest.mark.asyncio
    async def test_memory_recovery_after_load(self, setup_recovery_environment):
        """Testa recupera√ß√£o de mem√≥ria ap√≥s carga."""
        # Mem√≥ria inicial
        initial_memory = self.process.memory_info().rss / (1024 * 1024)  # MB
        
        # Fase 1: Carga normal
        for keyword in self.test_keywords:
            await self.keyword_analyzer.analyze_keyword(keyword)
        
        normal_memory = self.process.memory_info().rss / (1024 * 1024)
        
        # Fase 2: Pico de carga
        peak_tasks = []
        for i in range(200):
            for keyword in self.test_keywords:
                task = self.keyword_analyzer.analyze_keyword(keyword)
                peak_tasks.append(task)
        
        await asyncio.gather(*peak_tasks)
        peak_memory = self.process.memory_info().rss / (1024 * 1024)
        
        # Fase 3: Per√≠odo de recupera√ß√£o
        await asyncio.sleep(10.0)  # Aguarda garbage collection
        
        # For√ßa garbage collection
        import gc
        gc.collect()
        
        recovery_memory = self.process.memory_info().rss / (1024 * 1024)
        
        # Verifica recupera√ß√£o de mem√≥ria
        memory_growth = recovery_memory - initial_memory
        assert memory_growth < 50.0, f"Mem√≥ria n√£o se recuperou adequadamente: {memory_growth}MB de crescimento"
        
        # Verifica se a mem√≥ria de recupera√ß√£o est√° pr√≥xima da normal
        memory_diff = abs(recovery_memory - normal_memory)
        assert memory_diff < 20.0, f"Mem√≥ria n√£o retornou ao n√≠vel normal: diferen√ßa de {memory_diff}MB"
    
    @pytest.mark.asyncio
    async def test_health_check_recovery_after_load(self, setup_recovery_environment):
        """Testa recupera√ß√£o dos health checks ap√≥s carga."""
        # Fase 1: Health check normal
        normal_health = await self.health_checker.check_system_health()
        assert normal_health["status"] == "healthy", "Sistema n√£o est√° saud√°vel inicialmente"
        
        # Fase 2: Pico de carga
        load_tasks = []
        for i in range(300):
            # Mix de opera√ß√µes que podem afetar a sa√∫de do sistema
            load_tasks.append(self.keyword_analyzer.analyze_keyword("teste-carga"))
            load_tasks.append(self.redis_manager.set_keyword_cache(f"load_{i}", {"data": "test"}))
        
        await asyncio.gather(*load_tasks)
        
        # Fase 3: Health check durante carga
        peak_health = await self.health_checker.check_system_health()
        
        # Fase 4: Per√≠odo de recupera√ß√£o
        await asyncio.sleep(5.0)
        
        # Fase 5: Health check ap√≥s recupera√ß√£o
        recovery_health = await self.health_checker.check_system_health()
        
        # Verifica recupera√ß√£o da sa√∫de do sistema
        assert recovery_health["status"] == "healthy", "Sistema n√£o se recuperou adequadamente"
        
        # Verifica se os componentes cr√≠ticos est√£o funcionando
        assert recovery_health["components"]["database"]["status"] == "healthy"
        assert recovery_health["components"]["redis"]["status"] == "healthy"
        assert recovery_health["components"]["keyword_analyzer"]["status"] == "healthy"
    
    @pytest.mark.asyncio
    async def test_performance_metrics_recovery(self, setup_recovery_environment):
        """Testa recupera√ß√£o das m√©tricas de performance ap√≥s carga."""
        # Fase 1: M√©tricas normais
        normal_metrics = []
        for i in range(10):
            start_time = time.time()
            await self.keyword_analyzer.analyze_keyword("teste-normal")
            end_time = time.time()
            normal_metrics.append(end_time - start_time)
        
        avg_normal_time = sum(normal_metrics) / len(normal_metrics)
        
        # Fase 2: Pico de carga
        peak_tasks = []
        for i in range(500):
            task = self.keyword_analyzer.analyze_keyword("teste-pico")
            peak_tasks.append(task)
        
        await asyncio.gather(*peak_tasks)
        
        # Fase 3: Per√≠odo de recupera√ß√£o
        await asyncio.sleep(8.0)
        
        # Fase 4: M√©tricas ap√≥s recupera√ß√£o
        recovery_metrics = []
        for i in range(10):
            start_time = time.time()
            await self.keyword_analyzer.analyze_keyword("teste-recuperacao")
            end_time = time.time()
            recovery_metrics.append(end_time - start_time)
        
        avg_recovery_time = sum(recovery_metrics) / len(recovery_metrics)
        
        # Verifica recupera√ß√£o das m√©tricas de performance
        performance_ratio = avg_recovery_time / avg_normal_time
        assert performance_ratio < 1.4, f"Performance n√£o se recuperou adequadamente: {performance_ratio}x mais lento"
    
    @pytest.mark.asyncio
    async def test_system_stability_after_recovery(self, setup_recovery_environment):
        """Testa estabilidade do sistema ap√≥s recupera√ß√£o."""
        # Fase 1: Carga inicial
        for keyword in self.test_keywords:
            await self.keyword_analyzer.analyze_keyword(keyword)
        
        # Fase 2: Pico de carga
        peak_tasks = []
        for i in range(400):
            for keyword in self.test_keywords:
                task = self.keyword_analyzer.analyze_keyword(keyword)
                peak_tasks.append(task)
        
        await asyncio.gather(*peak_tasks)
        
        # Fase 3: Per√≠odo de recupera√ß√£o
        await asyncio.sleep(10.0)
        
        # Fase 4: Teste de estabilidade prolongada
        stability_metrics = []
        for i in range(50):
            start_time = time.time()
            
            # Opera√ß√£o mista para testar estabilidade
            tasks = []
            for keyword in self.test_keywords[:3]:
                tasks.append(self.keyword_analyzer.analyze_keyword(keyword))
                tasks.append(self.redis_manager.set_keyword_cache(f"stability_{i}", {"data": "test"}))
            
            await asyncio.gather(*tasks)
            
            end_time = time.time()
            stability_metrics.append(end_time - start_time)
            
            await asyncio.sleep(0.1)
        
        # Verifica estabilidade (varia√ß√£o n√£o deve exceder 20%)
        avg_stability_time = sum(stability_metrics) / len(stability_metrics)
        max_variation = max(abs(m - avg_stability_time) for m in stability_metrics)
        variation_ratio = max_variation / avg_stability_time
        
        assert variation_ratio < 0.2, f"Sistema n√£o est√° est√°vel ap√≥s recupera√ß√£o: varia√ß√£o de {variation_ratio*100}%" 