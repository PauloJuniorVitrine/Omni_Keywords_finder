from typing import Dict, List, Optional, Any
"""
Script de Teste para o Sistema de Preenchimento de Lacunas em Prompts
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.models.prompt_system import Base, Nicho, Categoria, PromptBase, DadosColetados
from app.services.prompt_filler_service import PromptFillerService


def criar_banco_teste():
    """Cria banco de dados de teste"""
    engine = create_engine('sqlite:///test_prompt_system.db')
    Base.metadata.create_all(engine)
    return engine


def popular_dados_teste(session):
    """Popula dados de teste"""
    
    # Criar nicho
    nicho = Nicho(
        nome="Sa√∫de e Bem-estar",
        descricao="Conte√∫do sobre sa√∫de, fitness e bem-estar"
    )
    session.add(nicho)
    session.commit()
    
    # Criar categoria
    categoria = Categoria(
        nicho_id=nicho.id,
        nome="Emagrecimento",
        descricao="Dicas e estrat√©gias para emagrecimento saud√°vel"
    )
    session.add(categoria)
    session.commit()
    
    # Criar prompt base
    prompt_conteudo = """
# üì• Bloco 1 ‚Äì Vari√°veis de Entrada (Preenchimento Obrigat√≥rio)

Preencha os seguintes campos antes de iniciar a gera√ß√£o do cluster de artigos:

[NICHO]: Sa√∫de e Bem-estar

[CATEGORIA]: Emagrecimento

[CLUSTER DE CONTE√öDO]: [CLUSTER DE CONTE√öDO]

[PERFIL DO CLIENTE / PERSONA]: Mulheres de 25-40 anos interessadas em emagrecimento

[PRODUTO FINAL (opcional)]: E-book sobre emagrecimento

[PALAVRA-CHAVE PRINCIPAL DO CLUSTER]: [PALAVRA-CHAVE PRINCIPAL DO CLUSTER]

[PALAVRAS-CHAVE SECUND√ÅRIAS (opcional)]: [PALAVRAS-CHAVE SECUND√ÅRIAS]

[ESTILO DE REDA√á√ÉO]: Did√°tico e motivacional

## üéØ Objetivo do Sistema
Voc√™ √© um redator s√™nior com dom√≠nio em SEO, copywriting, storytelling, frameworks de escrita avan√ßada e estrat√©gia de conte√∫do.
"""
    
    prompt_base = PromptBase(
        categoria_id=categoria.id,
        nome_arquivo="prompt_emagrecimento.txt",
        conteudo=prompt_conteudo,
        hash_conteudo="test_hash_123"
    )
    session.add(prompt_base)
    session.commit()
    
    # Criar dados coletados
    dados = DadosColetados(
        nicho_id=nicho.id,
        categoria_id=categoria.id,
        primary_keyword="como emagrecer 5kg em 30 dias",
        secondary_keywords="dieta low carb, exerc√≠cios para emagrecer, alimenta√ß√£o saud√°vel",
        cluster_content="Guia completo para emagrecer 5kg em 30 dias de forma saud√°vel e sustent√°vel",
        status="ativo"
    )
    session.add(dados)
    session.commit()
    
    return nicho, categoria, prompt_base, dados


def testar_preenchimento():
    """Testa o sistema de preenchimento"""
    print("üß™ INICIANDO TESTES DO SISTEMA DE PREENCHIMENTO DE LACUNAS")
    print("=" * 60)
    
    # Criar banco e sess√£o
    engine = criar_banco_teste()
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    session = SessionLocal()
    
    try:
        # Popular dados de teste
        print("üìù Criando dados de teste...")
        nicho, categoria, prompt_base, dados = popular_dados_teste(session)
        print(f"‚úÖ Nicho criado: {nicho.nome}")
        print(f"‚úÖ Categoria criada: {categoria.nome}")
        print(f"‚úÖ Prompt base criado: {prompt_base.nome_arquivo}")
        print(f"‚úÖ Dados coletados criados: {dados.primary_keyword}")
        
        # Testar servi√ßo de preenchimento
        print("\nüîß Testando servi√ßo de preenchimento...")
        service = PromptFillerService(session)
        
        # Detectar lacunas
        lacunas = service.detectar_lacunas(prompt_base.conteudo)
        print(f"‚úÖ Lacunas detectadas: {lacunas}")
        
        # Validar dados
        dados_validos, erros = service.validar_dados_coletados(dados)
        print(f"‚úÖ Dados v√°lidos: {dados_validos}")
        if erros:
            print(f"‚ùå Erros: {erros}")
        
        # Preencher lacunas
        prompt_preenchido, metadados = service.preencher_lacunas(prompt_base, dados)
        print(f"‚úÖ Prompt preenchido com sucesso!")
        print(f"‚è±Ô∏è Tempo de processamento: {metadados['tempo_processamento']}ms")
        
        # Mostrar resultado
        print("\nüìÑ RESULTADO DO PREENCHIMENTO:")
        print("-" * 40)
        print(prompt_preenchido[:500] + "..." if len(prompt_preenchido) > 500 else prompt_preenchido)
        
        # Processar preenchimento completo
        print("\nüîÑ Processando preenchimento completo...")
        prompt_final = service.processar_preenchimento(categoria.id, dados.id)
        print(f"‚úÖ Prompt final criado com ID: {prompt_final.id}")
        print(f"‚úÖ Status: {prompt_final.status}")
        
        print("\nüéâ TODOS OS TESTES PASSARAM COM SUCESSO!")
        
    except Exception as e:
        print(f"‚ùå ERRO NOS TESTES: {str(e)}")
        import traceback
        traceback.print_exc()
    
    finally:
        session.close()
        # Remover banco de teste
        if os.path.exists('test_prompt_system.db'):
            os.remove('test_prompt_system.db')


if __name__ == "__main__":
    testar_preenchimento() 