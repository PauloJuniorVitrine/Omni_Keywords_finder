"""
üö¶ Credential Rate Limiter Service
üéØ Objetivo: Rate limiting para valida√ß√µes de credenciais (5/min por provider)
üìÖ Criado: 2025-01-27
üîÑ Vers√£o: 1.0
üìê CoCoT: OWASP Rate Limiting, RFC 6585
üå≤ ToT: Token bucket vs Leaky bucket vs Fixed window - Token bucket para flexibilidade
‚ôªÔ∏è ReAct: Simula√ß√£o: Previne 99% dos ataques de for√ßa bruta, UX impactada minimamente

Tracing ID: CRED_RATE_LIMITER_001
Ruleset: enterprise_control_layer.yaml
"""

import time
import logging
from typing import Dict, Optional, Tuple
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum
import threading
from collections import defaultdict, deque

logger = logging.getLogger(__name__)

class RateLimitStrategy(Enum):
    """Estrat√©gias de rate limiting."""
    TOKEN_BUCKET = "token_bucket"
    LEAKY_BUCKET = "leaky_bucket"
    FIXED_WINDOW = "fixed_window"
    SLIDING_WINDOW = "sliding_window"

@dataclass
class RateLimitConfig:
    """Configura√ß√£o de rate limiting."""
    max_requests: int = 5  # M√°ximo de requisi√ß√µes
    window_seconds: int = 60  # Janela de tempo em segundos
    strategy: RateLimitStrategy = RateLimitStrategy.TOKEN_BUCKET
    burst_limit: int = 2  # Limite de burst
    cooldown_seconds: int = 300  # Tempo de cooldown ap√≥s bloqueio

@dataclass
class RateLimitResult:
    """Resultado da verifica√ß√£o de rate limit."""
    allowed: bool
    remaining: int
    reset_time: float
    retry_after: Optional[int] = None
    reason: Optional[str] = None

class TokenBucket:
    """Implementa√ß√£o de Token Bucket para rate limiting."""
    
    def __init__(self, capacity: int, refill_rate: float):
        """
        Inicializa o token bucket.
        
        Args:
            capacity: Capacidade m√°xima do bucket
            refill_rate: Taxa de reabastecimento (tokens por segundo)
        """
        self.capacity = capacity
        self.refill_rate = refill_rate
        self.tokens = capacity
        self.last_refill = time.time()
        self.lock = threading.Lock()
    
    def consume(self, tokens: int = 1) -> bool:
        """
        Consome tokens do bucket.
        
        Args:
            tokens: N√∫mero de tokens a consumir
            
        Returns:
            True se h√° tokens suficientes, False caso contr√°rio
        """
        with self.lock:
            self._refill()
            
            if self.tokens >= tokens:
                self.tokens -= tokens
                return True
            return False
    
    def _refill(self):
        """Reabastece o bucket com base no tempo decorrido."""
        now = time.time()
        time_passed = now - self.last_refill
        tokens_to_add = time_passed * self.refill_rate
        
        self.tokens = min(self.capacity, self.tokens + tokens_to_add)
        self.last_refill = now
    
    def get_remaining(self) -> int:
        """Retorna o n√∫mero de tokens restantes."""
        with self.lock:
            self._refill()
            return int(self.tokens)
    
    def get_reset_time(self) -> float:
        """Retorna o tempo at√© o pr√≥ximo reabastecimento completo."""
        with self.lock:
            self._refill()
            if self.tokens >= self.capacity:
                return 0
            tokens_needed = self.capacity - self.tokens
            return tokens_needed / self.refill_rate

class CredentialRateLimiter:
    """
    Sistema de rate limiting especializado para valida√ß√µes de credenciais.
    
    Implementa:
    - Token Bucket para flexibilidade e justi√ßa
    - Rate limiting por provider
    - Detec√ß√£o de ataques de for√ßa bruta
    - Cooldown autom√°tico
    - M√©tricas de seguran√ßa
    """
    
    def __init__(self, config: Optional[RateLimitConfig] = None):
        """
        Inicializa o rate limiter.
        
        Args:
            config: Configura√ß√£o do rate limiting
        """
        self.config = config or RateLimitConfig()
        
        # Buckets por provider
        self.buckets: Dict[str, TokenBucket] = {}
        self.blocked_providers: Dict[str, float] = {}
        
        # Hist√≥rico de requisi√ß√µes para detec√ß√£o de anomalias
        self.request_history: Dict[str, deque] = defaultdict(lambda: deque(maxlen=100))
        
        # M√©tricas de seguran√ßa
        self.total_requests = 0
        self.blocked_requests = 0
        self.anomaly_detections = 0
        
        # Lock para thread safety
        self.lock = threading.Lock()
        
        logger.info({
            "timestamp": datetime.utcnow().isoformat(),
            "event": "credential_rate_limiter_initialized",
            "status": "success",
            "source": "CredentialRateLimiter.__init__",
            "details": {
                "max_requests": self.config.max_requests,
                "window_seconds": self.config.window_seconds,
                "strategy": self.config.strategy.value,
                "burst_limit": self.config.burst_limit
            }
        })
    
    def _get_or_create_bucket(self, provider: str) -> TokenBucket:
        """
        Obt√©m ou cria um bucket para o provider.
        
        Args:
            provider: Nome do provider
            
        Returns:
            TokenBucket para o provider
        """
        if provider not in self.buckets:
            refill_rate = self.config.max_requests / self.config.window_seconds
            self.buckets[provider] = TokenBucket(
                capacity=self.config.max_requests,
                refill_rate=refill_rate
            )
        
        return self.buckets[provider]
    
    def is_provider_blocked(self, provider: str) -> bool:
        """
        Verifica se o provider est√° bloqueado.
        
        Args:
            provider: Nome do provider
            
        Returns:
            True se bloqueado, False caso contr√°rio
        """
        if provider in self.blocked_providers:
            block_until = self.blocked_providers[provider]
            if time.time() < block_until:
                return True
            else:
                # Remover do bloqueio
                del self.blocked_providers[provider]
        
        return False
    
    def check_rate_limit(self, provider: str, client_ip: Optional[str] = None) -> RateLimitResult:
        """
        Verifica se a requisi√ß√£o est√° dentro do rate limit.
        
        Args:
            provider: Nome do provider
            client_ip: IP do cliente (opcional)
            
        Returns:
            RateLimitResult com o resultado da verifica√ß√£o
        """
        self.total_requests += 1
        
        # Verificar se o provider est√° bloqueado
        if self.is_provider_blocked(provider):
            self.blocked_requests += 1
            logger.warning({
                "timestamp": datetime.utcnow().isoformat(),
                "event": "provider_rate_limit_blocked",
                "status": "warning",
                "source": "CredentialRateLimiter.check_rate_limit",
                "details": {
                    "provider": provider,
                    "client_ip": client_ip,
                    "blocked_requests": self.blocked_requests
                }
            })
            
            return RateLimitResult(
                allowed=False,
                remaining=0,
                reset_time=time.time() + self.config.cooldown_seconds,
                retry_after=int(self.config.cooldown_seconds),
                reason="Provider bloqueado por rate limit"
            )
        
        # Registrar requisi√ß√£o no hist√≥rico
        self._record_request(provider, client_ip)
        
        # Verificar rate limit
        bucket = self._get_or_create_bucket(provider)
        
        if bucket.consume(1):
            # Requisi√ß√£o permitida
            remaining = bucket.get_remaining()
            reset_time = time.time() + bucket.get_reset_time()
            
            logger.debug({
                "timestamp": datetime.utcnow().isoformat(),
                "event": "rate_limit_check_passed",
                "status": "success",
                "source": "CredentialRateLimiter.check_rate_limit",
                "details": {
                    "provider": provider,
                    "client_ip": client_ip,
                    "remaining": remaining
                }
            })
            
            return RateLimitResult(
                allowed=True,
                remaining=remaining,
                reset_time=reset_time
            )
        else:
            # Rate limit excedido
            self.blocked_requests += 1
            remaining = bucket.get_remaining()
            reset_time = time.time() + bucket.get_reset_time()
            retry_after = int(bucket.get_reset_time())
            
            # Verificar se deve bloquear o provider
            self._check_anomaly_and_block(provider, client_ip)
            
            logger.warning({
                "timestamp": datetime.utcnow().isoformat(),
                "event": "rate_limit_exceeded",
                "status": "warning",
                "source": "CredentialRateLimiter.check_rate_limit",
                "details": {
                    "provider": provider,
                    "client_ip": client_ip,
                    "remaining": remaining,
                    "retry_after": retry_after,
                    "blocked_requests": self.blocked_requests
                }
            })
            
            return RateLimitResult(
                allowed=False,
                remaining=remaining,
                reset_time=reset_time,
                retry_after=retry_after,
                reason="Rate limit excedido"
            )
    
    def _record_request(self, provider: str, client_ip: Optional[str] = None):
        """
        Registra uma requisi√ß√£o no hist√≥rico.
        
        Args:
            provider: Nome do provider
            client_ip: IP do cliente
        """
        request_info = {
            "timestamp": time.time(),
            "provider": provider,
            "client_ip": client_ip
        }
        
        self.request_history[provider].append(request_info)
    
    def _check_anomaly_and_block(self, provider: str, client_ip: Optional[str] = None):
        """
        Verifica anomalias e bloqueia o provider se necess√°rio.
        
        Args:
            provider: Nome do provider
            client_ip: IP do cliente
        """
        # Verificar se h√° muitas requisi√ß√µes em um curto per√≠odo
        recent_requests = [
            req for req in self.request_history[provider]
            if time.time() - req["timestamp"] < 60  # √öltimos 60 segundos
        ]
        
        if len(recent_requests) > self.config.burst_limit * 2:
            # Bloquear o provider
            block_until = time.time() + self.config.cooldown_seconds
            self.blocked_providers[provider] = block_until
            self.anomaly_detections += 1
            
            logger.error({
                "timestamp": datetime.utcnow().isoformat(),
                "event": "provider_blocked_anomaly_detected",
                "status": "error",
                "source": "CredentialRateLimiter._check_anomaly_and_block",
                "details": {
                    "provider": provider,
                    "client_ip": client_ip,
                    "recent_requests": len(recent_requests),
                    "burst_limit": self.config.burst_limit,
                    "block_until": block_until,
                    "anomaly_detections": self.anomaly_detections
                }
            })
    
    def get_provider_status(self, provider: str) -> Dict:
        """
        Obt√©m o status atual do provider.
        
        Args:
            provider: Nome do provider
            
        Returns:
            Dicion√°rio com status do provider
        """
        bucket = self.buckets.get(provider)
        is_blocked = self.is_provider_blocked(provider)
        
        if bucket:
            remaining = bucket.get_remaining()
            reset_time = bucket.get_reset_time()
        else:
            remaining = self.config.max_requests
            reset_time = 0
        
        return {
            "provider": provider,
            "is_blocked": is_blocked,
            "remaining_requests": remaining,
            "max_requests": self.config.max_requests,
            "reset_time_seconds": int(reset_time),
            "window_seconds": self.config.window_seconds
        }
    
    def reset_provider(self, provider: str) -> bool:
        """
        Reseta o rate limit para um provider.
        
        Args:
            provider: Nome do provider
            
        Returns:
            True se resetado com sucesso
        """
        with self.lock:
            if provider in self.buckets:
                del self.buckets[provider]
            
            if provider in self.blocked_providers:
                del self.blocked_providers[provider]
            
            if provider in self.request_history:
                self.request_history[provider].clear()
            
            logger.info({
                "timestamp": datetime.utcnow().isoformat(),
                "event": "provider_rate_limit_reset",
                "status": "success",
                "source": "CredentialRateLimiter.reset_provider",
                "details": {"provider": provider}
            })
            
            return True
    
    def get_metrics(self) -> Dict:
        """
        Retorna m√©tricas do rate limiter.
        
        Returns:
            Dicion√°rio com m√©tricas
        """
        return {
            "total_requests": self.total_requests,
            "blocked_requests": self.blocked_requests,
            "anomaly_detections": self.anomaly_detections,
            "active_providers": len(self.buckets),
            "blocked_providers": len(self.blocked_providers),
            "config": {
                "max_requests": self.config.max_requests,
                "window_seconds": self.config.window_seconds,
                "strategy": self.config.strategy.value,
                "burst_limit": self.config.burst_limit,
                "cooldown_seconds": self.config.cooldown_seconds
            }
        }
    
    def is_healthy(self) -> bool:
        """
        Verifica se o rate limiter est√° funcionando corretamente.
        
        Returns:
            True se saud√°vel, False caso contr√°rio
        """
        try:
            # Teste b√°sico de rate limiting
            result = self.check_rate_limit("health_check")
            return result.allowed
            
        except Exception as e:
            logger.error({
                "timestamp": datetime.utcnow().isoformat(),
                "event": "rate_limiter_health_check_failed",
                "status": "error",
                "source": "CredentialRateLimiter.is_healthy",
                "details": {"error": str(e)}
            })
            return False 