# 🚀 OMNİ KEYWORDS FINDER - AUTO-HEALING PIPELINE ENTERPRISE
# 📅 Criado: 2025-01-27
# 🔧 Tracing ID: AUTO_HEALING_PIPELINE_001_20250127
# ⚡ Status: ✅ ENTERPRISE-READY
# 🎯 Objetivo: Pipeline completo com auto-healing inteligente e auditoria enterprise

name: 🚀 Auto-Healing Enterprise Pipeline

# =============================================================================
# 🔧 CONFIGURAÇÕES GLOBAIS
# =============================================================================
on:
  push:
    branches: [ main, develop, master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop, master ]
  workflow_dispatch:
    inputs:
      stage:
        description: 'Estágio específico para executar'
        required: false
        default: 'all'
        type: choice
        options: [all, unit_tests, integration_tests, e2e_tests, load_test, quality_security, packaging]

# Permissões (release precisa escrever em contents)
permissions:
  contents: write
  actions: read
  checks: read

# Evita execuções paralelas no mesmo branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Shell padrão
defaults:
  run:
    shell: bash

# =============================================================================
# 🔧 VARIÁVEIS DE AMBIENTE
# =============================================================================
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  COVERAGE_THRESHOLD: 80
  MAX_HEALING_ATTEMPTS: 8
  OPENAI_MODEL: 'code-davinci-002'
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

# =============================================================================
# 🔧 JOBS PRINCIPAIS
# =============================================================================
jobs:
  # ========================================
  # 🏗️ BUILD - PREPARAÇÃO DO AMBIENTE
  # ========================================
  build:
    name: 🏗️ Build Environment
    runs-on: ubuntu-latest
    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}   # espelha secret no env do job
    outputs:
      build-status: ${{ job.status }}
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔑 Setup SSH for Auto-PRs
        if: ${{ env.SSH_PRIVATE_KEY != '' }}
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libpq-dev \
            libssl-dev \
            libffi-dev \
            python3-dev \
            php-cli \
            php-mysql \
            zip \
            unzip \
            curl \
            wget \
            git \
            bc \
            jq
          # gitleaks (usado na análise de segurança)
          curl -sSfL https://raw.githubusercontent.com/gitleaks/gitleaks/main/install.sh | sudo bash -s -- -b /usr/local/bin

      - name: 🐍 Create Virtual Environment
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip setuptools wheel

      - name: 📦 Install Python Dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements.txt || true
          pip install pytest pyinstaller coverage safety bandit openai
          pip install pytest-cov pytest-html pytest-xdist

      - name: 📦 Install Node.js Dependencies
        if: hashFiles('package.json') != ''
        run: npm ci

      - name: 🗄️ Setup PostgreSQL
        uses: Harmon758/postgresql-action@v1.0.0
        with:
          postgresql version: '15'
          postgresql db: 'omni_keywords_test'
          postgresql user: 'test_user'
          postgresql password: 'test_password'

      - name: 🔴 Setup Redis
        uses: supercharge/redis-github-action@1.8.0
        with:
          redis-version: '7-alpine'

      - name: 🔑 Generate Cache Key
        id: cache-key
        run: echo "value=$(date +%s)" >> $GITHUB_OUTPUT

      - name: 💾 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            venv/
            node_modules/
            ~/.cache/pip
            ~/.npm
          key: ${{ runner.os }}-deps-${{ steps.cache-key.outputs.value }}
          restore-keys: |
            ${{ runner.os }}-deps-

  # ========================================
  # 🧪 UNIT TESTS + HEALING
  # ========================================
  unit_tests:
    name: 🧪 Unit Tests + Auto-Healing
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.result == 'success'
    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    outputs:
      unit-status: ${{ steps.collect.outputs.status || 'unknown' }}
      healing-attempts: ${{ steps.collect.outputs.attempts || 0 }}
      patches-created: ${{ steps.collect.outputs.patches || 0 }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: 🔑 Setup SSH for Auto-PRs
        if: ${{ env.SSH_PRIVATE_KEY != '' }}
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 💾 Restore Cache
        uses: actions/cache@v3
        with:
          path: |
            venv/
            node_modules/
            ~/.cache/pip
            ~/.npm
          key: ${{ runner.os }}-deps-${{ needs.build.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: 🔧 Ensure jq available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: 🧪 Run Unit Tests with Auto-Healing
        id: healing
        env:
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ env.OPENAI_MODEL }}
        run: |
          source venv/bin/activate
          python scripts/run_and_heal.py \
            --tests "tests/unit" \
            --stage "unit_tests" \
            --max-attempts ${{ env.MAX_HEALING_ATTEMPTS }} \
            --openai-key "${OPENAI_API_KEY}" \
            --openai-model "${OPENAI_MODEL}" || true

      - name: 🔎 Collect Healing Outputs (unit)
        id: collect
        run: |
          FILE="logs/unit_tests_healing_report.json"
          ATTEMPTS=0
          PATCHES=0
          STATUS="unknown"
          if [ -f "$FILE" ]; then
            ATTEMPTS=$(jq -r '.attempts // 0' "$FILE")
            PATCHES=$(jq -r '.patches // 0' "$FILE")
            STATUS=$(jq -r '.status // "unknown"' "$FILE")
          fi
          echo "attempts=$ATTEMPTS" >> $GITHUB_OUTPUT
          echo "patches=$PATCHES" >> $GITHUB_OUTPUT
          echo "status=$STATUS" >> $GITHUB_OUTPUT

      - name: 📊 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: |
            logs/unit_tests_healing_report.json
            patches/unit_tests/
            test-results/unit.xml
            coverage/unit-coverage.xml

      - name: 📋 Generate Unit Test Summary
        if: always()
        run: |
          echo "## Unit Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ steps.collect.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Healing Attempts: ${{ steps.collect.outputs.attempts }}" >> $GITHUB_STEP_SUMMARY
          echo "- Patches Created: ${{ steps.collect.outputs.patches }}" >> $GITHUB_STEP_SUMMARY

  # ========================================
  # 🔗 INTEGRATION TESTS + HEALING
  # ========================================
  integration_tests:
    name: 🔗 Integration Tests + Auto-Healing
    runs-on: ubuntu-latest
    needs: unit_tests
    if: needs.unit_tests.result == 'success'
    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    outputs:
      integration-status: ${{ steps.collect.outputs.status || 'unknown' }}
      healing-attempts: ${{ steps.collect.outputs.attempts || 0 }}
      patches-created: ${{ steps.collect.outputs.patches || 0 }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: 🔑 Setup SSH for Auto-PRs
        if: ${{ env.SSH_PRIVATE_KEY != '' }}
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 💾 Restore Cache
        uses: actions/cache@v3
        with:
          path: |
            venv/
            node_modules/
            ~/.cache/pip
            ~/.npm
          key: ${{ runner.os }}-deps-${{ needs.build.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: 🔧 Ensure jq available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: 🧪 Run Integration Tests with Auto-Healing
        id: healing
        env:
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ env.OPENAI_MODEL }}
        run: |
          source venv/bin/activate
          python scripts/run_and_heal.py \
            --tests "tests/integration" \
            --stage "integration_tests" \
            --max-attempts ${{ env.MAX_HEALING_ATTEMPTS }} \
            --openai-key "${OPENAI_API_KEY}" \
            --openai-model "${OPENAI_MODEL}" || true

      - name: 🔎 Collect Healing Outputs (integration)
        id: collect
        run: |
          FILE="logs/integration_tests_healing_report.json"
          ATTEMPTS=0
          PATCHES=0
          STATUS="unknown"
          if [ -f "$FILE" ]; then
            ATTEMPTS=$(jq -r '.attempts // 0' "$FILE")
            PATCHES=$(jq -r '.patches // 0' "$FILE")
            STATUS=$(jq -r '.status // "unknown"' "$FILE")
          fi
          echo "attempts=$ATTEMPTS" >> $GITHUB_OUTPUT
          echo "patches=$PATCHES" >> $GITHUB_OUTPUT
          echo "status=$STATUS" >> $GITHUB_OUTPUT

      - name: 📊 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: |
            logs/integration_tests_healing_report.json
            patches/integration_tests/
            test-results/integration.xml
            coverage/integration-coverage.xml

      - name: 📋 Generate Integration Test Summary
        if: always()
        run: |
          echo "## Integration Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ steps.collect.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Healing Attempts: ${{ steps.collect.outputs.attempts }}" >> $GITHUB_STEP_SUMMARY
          echo "- Patches Created: ${{ steps.collect.outputs.patches }}" >> $GITHUB_STEP_SUMMARY

  # ========================================
  # 🌐 E2E TESTS + HEALING
  # ========================================
  e2e_tests:
    name: 🌐 E2E Tests + Auto-Healing
    runs-on: ubuntu-latest
    needs: integration_tests
    if: needs.integration_tests.result == 'success'
    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    outputs:
      e2e-status: ${{ steps.collect.outputs.status || 'unknown' }}
      healing-attempts: ${{ steps.collect.outputs.attempts || 0 }}
      patches-created: ${{ steps.collect.outputs.patches || 0 }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: 🔑 Setup SSH for Auto-PRs
        if: ${{ env.SSH_PRIVATE_KEY != '' }}
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 💾 Restore Cache
        uses: actions/cache@v3
        with:
          path: |
            venv/
            node_modules/
            ~/.cache/pip
            ~/.npm
          key: ${{ runner.os }}-deps-${{ needs.build.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: 🔧 Ensure jq available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: 🧪 Run E2E Tests with Auto-Healing
        id: healing
        env:
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ env.OPENAI_MODEL }}
        run: |
          source venv/bin/activate
          python scripts/run_and_heal.py \
            --tests "tests/e2e" \
            --stage "e2e_tests" \
            --max-attempts ${{ env.MAX_HEALING_ATTEMPTS }} \
            --openai-key "${OPENAI_API_KEY}" \
            --openai-model "${OPENAI_MODEL}" || true

      - name: 🔎 Collect Healing Outputs (e2e)
        id: collect
        run: |
          FILE="logs/e2e_tests_healing_report.json"
          ATTEMPTS=0
          PATCHES=0
          STATUS="unknown"
          if [ -f "$FILE" ]; then
            ATTEMPTS=$(jq -r '.attempts // 0' "$FILE")
            PATCHES=$(jq -r '.patches // 0' "$FILE")
            STATUS=$(jq -r '.status // "unknown"' "$FILE")
          fi
          echo "attempts=$ATTEMPTS" >> $GITHUB_OUTPUT
          echo "patches=$PATCHES" >> $GITHUB_OUTPUT
          echo "status=$STATUS" >> $GITHUB_OUTPUT

      - name: 📊 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: |
            logs/e2e_tests_healing_report.json
            patches/e2e_tests/
            test-results/e2e.xml
            coverage/e2e-coverage.xml

      - name: 📋 Generate E2E Test Summary
        if: always()
        run: |
          echo "## E2E Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ steps.collect.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Healing Attempts: ${{ steps.collect.outputs.attempts }}" >> $GITHUB_STEP_SUMMARY
          echo "- Patches Created: ${{ steps.collect.outputs.patches }}" >> $GITHUB_STEP_SUMMARY

  # ========================================
  # 📈 LOAD TESTS
  # ========================================
  load_test:
    name: 📈 Load Tests
    runs-on: ubuntu-latest
    needs: e2e_tests
    if: needs.e2e_tests.result == 'success'
    outputs:
      load-status: ${{ job.status }}
      performance-metrics: ${{ steps.k6.outputs.metrics }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Setup k6
        uses: grafana/setup-k6-action@v1

      - name: 🔧 Ensure jq available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: 📊 Run k6 Load Tests
        id: k6
        run: |
          k6 run --out json=k6-results.json tests/load/performance.js
          echo "metrics=$(jq -r '.metrics.http_req_duration.avg' k6-results.json)" >> $GITHUB_OUTPUT

      - name: 📊 Upload Load Test Results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: k6-results.json

      - name: 📋 Generate Load Test Summary
        run: |
          echo "## Load Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Average Response Time: ${{ steps.k6.outputs.metrics }}ms" >> $GITHUB_STEP_SUMMARY
          echo "- Results saved to: k6-results.json" >> $GITHUB_STEP_SUMMARY

  # ========================================
  # 🔒 QUALITY & SECURITY
  # ========================================
  quality_security:
    name: 🔒 Quality & Security Gates
    runs-on: ubuntu-latest
    needs: load_test
    if: needs.load_test.result == 'success'
    outputs:
      quality-status: ${{ job.status }}
      coverage-percentage: ${{ steps.coverage.outputs.percentage }}
      security-score: ${{ steps.security.outputs.score }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 💾 Restore Cache
        uses: actions/cache@v3
        with:
          path: |
            venv/
            node_modules/
            ~/.cache/pip
            ~/.npm
          key: ${{ runner.os }}-deps-${{ needs.build.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: 🔧 Ensure jq & gitleaks available
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          if ! command -v gitleaks >/dev/null 2>&1; then
            curl -sSfL https://raw.githubusercontent.com/gitleaks/gitleaks/main/install.sh | sudo bash -s -- -b /usr/local/bin
          fi

      - name: 🧪 Run Coverage Analysis
        id: coverage
        run: |
          source venv/bin/activate
          pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing
          COVERAGE_PCT=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
          echo "percentage=$COVERAGE_PCT" >> $GITHUB_OUTPUT
          if (( $(echo "$COVERAGE_PCT < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "❌ Coverage below threshold: $COVERAGE_PCT% < ${{ env.COVERAGE_THRESHOLD }}%"
            exit 1
          fi

      - name: 🔒 Run Security Analysis
        id: security
        run: |
          source venv/bin/activate
          bandit -r . -f json -o bandit-results.json || true
          safety check --json --output safety-results.json || true
          gitleaks detect --source . --report-format json --report-path gitleaks-results.json || true

          SECURITY_SCORE=100
          if [ -f "bandit-results.json" ]; then
            BANDIT_ISSUES=$(jq '.results | length' bandit-results.json)
            SECURITY_SCORE=$((SECURITY_SCORE - BANDIT_ISSUES * 5))
          fi
          if [ -f "safety-results.json" ]; then
            SAFETY_ISSUES=$(jq '.vulnerabilities | length' safety-results.json)
            SECURITY_SCORE=$((SECURITY_SCORE - SAFETY_ISSUES * 10))
          fi
          if [ -f "gitleaks-results.json" ]; then
            GITLEAKS_ISSUES=$(jq '.findings | length' gitleaks-results.json)
            SECURITY_SCORE=$((SECURITY_SCORE - GITLEAKS_ISSUES * 20))
          fi
          [ $SECURITY_SCORE -lt 0 ] && SECURITY_SCORE=0
          echo "score=$SECURITY_SCORE" >> $GITHUB_OUTPUT
          if [ $SECURITY_SCORE -lt 70 ]; then
            echo "❌ Security score too low: $SECURITY_SCORE"
            exit 1
          fi

      - name: 📊 Upload Quality Results
        uses: actions/upload-artifact@v3
        with:
          name: quality-security-results
          path: |
            coverage.xml
            htmlcov/
            bandit-results.json
            safety-results.json
            gitleaks-results.json

      - name: 📋 Generate Quality Summary
        run: |
          echo "## Quality & Security Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage: ${{ steps.coverage.outputs.percentage }}%" >> $GITHUB_STEP_SUMMARY
          echo "- Security Score: ${{ steps.security.outputs.score }}/100" >> $GITHUB_STEP_SUMMARY

  # ========================================
  # 🧮 AGGREGATES (somas sem usar '+')
  # ========================================
  aggregates:
    name: 🧮 Aggregate Totals
    runs-on: ubuntu-latest
    needs: [unit_tests, integration_tests, e2e_tests]
    if: always()
    outputs:
      total-healing-attempts: ${{ steps.sum.outputs.total_heal }}
      total-patches-created: ${{ steps.sum.outputs.total_patches }}
    steps:
      - name: 🔢 Compute totals from previous jobs
        id: sum
        run: |
          UNIT_HEAL="${UNIT_HEAL:-0}"; INT_HEAL="${INT_HEAL:-0}"; E2E_HEAL="${E2E_HEAL:-0}"
          UNIT_PATCH="${UNIT_PATCH:-0}"; INT_PATCH="${INT_PATCH:-0}"; E2E_PATCH="${E2E_PATCH:-0}"
          UNIT_HEAL="$(echo "$UNIT_HEAL" | sed 's/[^0-9]//g')"
          INT_HEAL="$(echo "$INT_HEAL" | sed 's/[^0-9]//g')"
          E2E_HEAL="$(echo "$E2E_HEAL" | sed 's/[^0-9]//g')"
          UNIT_PATCH="$(echo "$UNIT_PATCH" | sed 's/[^0-9]//g')"
          INT_PATCH="$(echo "$INT_PATCH" | sed 's/[^0-9]//g')"
          E2E_PATCH="$(echo "$E2E_PATCH" | sed 's/[^0-9]//g')"
          TOTAL_HEAL=$(( ${UNIT_HEAL:-0} + ${INT_HEAL:-0} + ${E2E_HEAL:-0} ))
          TOTAL_PATCH=$(( ${UNIT_PATCH:-0} + ${INT_PATCH:-0} + ${E2E_PATCH:-0} ))
          echo "total_heal=${TOTAL_HEAL}" >> "$GITHUB_OUTPUT"
          echo "total_patches=${TOTAL_PATCH}" >> "$GITHUB_OUTPUT"
        env:
          UNIT_HEAL: ${{ needs.unit_tests.outputs.healing-attempts }}
          INT_HEAL:  ${{ needs.integration_tests.outputs.healing-attempts }}
          E2E_HEAL:  ${{ needs.e2e_tests.outputs.healing-attempts }}
          UNIT_PATCH: ${{ needs.unit_tests.outputs.patches-created }}
          INT_PATCH:  ${{ needs.integration_tests.outputs.patches-created }}
          E2E_PATCH:  ${{ needs.e2e_tests.outputs.patches-created }}

  # ========================================
  # 📦 PACKAGING & RELEASE
  # ========================================
  packaging:
    name: 📦 Packaging & Release
    runs-on: ubuntu-latest
    needs: [quality_security, aggregates, unit_tests, integration_tests, e2e_tests, load_test]
    if: needs.quality_security.result == 'success'
    outputs:
      release-url: ${{ steps.release.outputs.url }}
      artifacts-created: ${{ steps.package.outputs.artifacts }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 💾 Restore Cache
        uses: actions/cache@v3
        with:
          path: |
            venv/
            node_modules/
            ~/.cache/pip
            ~/.npm
          key: ${{ runner.os }}-deps-${{ needs.build.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: 📦 Generate Python Executable
        id: package
        run: |
          source venv/bin/activate
          pyinstaller --onefile --name OmniKeywordsFinder backend/app/main.py
          if [ -d "wp-plugin" ]; then
            zip -r wordpress-plugin.zip wp-plugin/
          fi
          python scripts/generate_changelog.py || true
          echo "artifacts=dist/OmniKeywordsFinder,wordpress-plugin.zip,CHANGELOG.md" >> $GITHUB_OUTPUT

      - name: 🏷️ Create GitHub Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/OmniKeywordsFinder
            wordpress-plugin.zip
            CHANGELOG.md
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            ## Auto-Healing Pipeline Release v${{ github.run_number }}

            ### 🧪 Test Results
            - Unit Tests: ${{ needs.unit_tests.outputs.unit-status }}
            - Integration Tests: ${{ needs.integration_tests.outputs.integration-status }}
            - E2E Tests: ${{ needs.e2e_tests.outputs.e2e-status }}
            - Load Tests: ${{ needs.load_test.outputs.load-status }}

            ### 🔒 Quality Gates
            - Coverage: ${{ needs.quality_security.outputs.coverage-percentage }}%
            - Security Score: ${{ needs.quality_security.outputs.security-score }}/100

            ### 🚀 Auto-Healing Summary
            - Total Healing Attempts: ${{ needs.aggregates.outputs.total-healing-attempts }}
            - Patches Created: ${{ needs.aggregates.outputs.total-patches-created }}

            ### 📦 Artifacts
            - Python Executable: OmniKeywordsFinder
            - WordPress Plugin: wordpress-plugin.zip
            - Changelog: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Upload Release Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: |
            dist/
            wordpress-plugin.zip
            CHANGELOG.md

      - name: 📋 Generate Release Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Release URL: ${{ steps.release.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "- Artifacts: ${{ steps.package.outputs.artifacts }}" >> $GITHUB_STEP_SUMMARY

  # ========================================
  # 📢 NOTIFICATION
  # ========================================
  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [packaging, unit_tests, integration_tests, e2e_tests, load_test, quality_security, aggregates]
    if: always()
    steps:
      - name: 🎨 Compute Discord Color
        id: color
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "value=3066993" >> "$GITHUB_OUTPUT"      # verde
          else
            echo "value=15158332" >> "$GITHUB_OUTPUT"     # vermelho
          fi

      - name: 📢 Send Slack Notification
        if: env.SLACK_WEBHOOK != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#devops-alerts'
          text: |
            🚀 **Auto-Healing Pipeline Complete**

            **Status**: ${{ job.status }}
            **Branch**: ${{ github.ref_name }}
            **Commit**: ${{ github.sha }}

            **🧪 Test Results**:
            - Unit: ${{ needs.unit_tests.outputs.unit-status }}
            - Integration: ${{ needs.integration_tests.outputs.integration-status }}
            - E2E: ${{ needs.e2e_tests.outputs.e2e-status }}
            - Load: ${{ needs.load_test.outputs.load-status }}

            **🔒 Quality Gates**:
            - Coverage: ${{ needs.quality_security.outputs.coverage-percentage }}%
            - Security: ${{ needs.quality_security.outputs.security-score }}/100

            **🚀 Auto-Healing**:
            - Total Attempts: ${{ needs.aggregates.outputs.total-healing-attempts }}
            - Patches: ${{ needs.aggregates.outputs.total-patches-created }}

            **📦 Release**: ${{ needs.packaging.outputs.release-url }}
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK }}

      - name: 📢 Send Discord Notification
        if: env.DISCORD_WEBHOOK != ''
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "embeds": [{
                   "title": "🚀 Auto-Healing Pipeline Complete",
                   "color": '${{ steps.color.outputs.value }}',
                   "fields": [
                     {"name": "Status","value": "${{ job.status }}","inline": true},
                     {"name": "Branch","value": "${{ github.ref_name }}","inline": true},
                     {"name": "Tests","value": "Unit: ${{ needs.unit_tests.outputs.unit-status }}\nIntegration: ${{ needs.integration_tests.outputs.integration-status }}\nE2E: ${{ needs.e2e_tests.outputs.e2e-status }}","inline": false},
                     {"name": "Quality","value": "Coverage: ${{ needs.quality_security.outputs.coverage-percentage }}%\nSecurity: ${{ needs.quality_security.outputs.security-score }}/100","inline": false},
                     {"name": "Auto-Healing","value": "Attempts: ${{ needs.aggregates.outputs.total-healing-attempts }}\nPatches: ${{ needs.aggregates.outputs.total-patches-created }}","inline": false}
                   ],
                   "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                 }]
               }' \
               ${{ env.DISCORD_WEBHOOK }}

      - name: 📋 Generate Final Summary
        run: |
          echo "## 🚀 Auto-Healing Pipeline Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Final Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Overall Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit_tests.outputs.unit-status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration_tests.outputs.integration-status }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.e2e_tests.outputs.e2e-status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Load Tests: ${{ needs.load_test.outputs.load-status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔒 Quality Gates" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage: ${{ needs.quality_security.outputs.coverage-percentage }}%" >> $GITHUB_STEP_SUMMARY
          echo "- Security Score: ${{ needs.quality_security.outputs.security-score }}/100" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Auto-Healing Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Total Healing Attempts: ${{ needs.aggregates.outputs.total-healing-attempts }}" >> $GITHUB_STEP_SUMMARY
          echo "- Patches Created: ${{ needs.aggregates.outputs.total-patches-created }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Release" >> $GITHUB_STEP_SUMMARY
          echo "- Release URL: ${{ needs.packaging.outputs.release-url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Release](${{ needs.packaging.outputs.release-url }})" >> $GITHUB_STEP_SUMMARY
